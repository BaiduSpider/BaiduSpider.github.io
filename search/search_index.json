{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"BaiduSpider \u2693\ufe0e BaiduSpider \u662f\u4e00\u4e2a\u4f7f\u7528 Python \u7f16\u5199\u7684\u8f7b\u91cf\u7ea7\u767e\u5ea6\u722c\u866b\u3002\u5b83\u57fa\u4e8e Requests \u548c BeautifulSoup \u6784\u5efa\uff0c\u5e76\u63d0\u4f9b\u4e86\u6613\u7528\u7684 API \u63a5\u53e3\u4ee5\u53ca\u5b8c\u5584\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u63d0\u5347\u5f00\u53d1\u8005\u7684\u4f7f\u7528\u4f53\u9a8c\u3002 \u6709\u4e86 BaiduSpider\uff0c\u4f60\u53ef\u4ee5\uff1a \u7cbe\u51c6\uff0c\u5feb\u901f\u7684\u63d0\u53d6\u767e\u5ea6\u641c\u7d22\u7ed3\u679c \u83b7\u53d6\u591a\u79cd\u7ed3\u679c\u7c7b\u578b \u4f7f\u7528\u6211\u4eec\u7b80\u6d01\u6613\u7528\u7684 API \u5fc5\u8981\u6761\u4ef6 \u2693\ufe0e Python 3.6+ \u5b89\u88c5 \u2693\ufe0e $ pip install baiduspider \u94fe\u63a5 \u2693\ufe0e \u6587\u6863\uff1a https://baiduspider.github.io PyPI\uff1a https://pypi.org/project/BaiduSpider/ GitHub\uff1a https://github.com/BaiduSpider/BaiduSpider \u8ba8\u8bba\uff1a https://github.com/BaiduSpider/BaiduSpider/discussions \u62a5\u544a Issue\uff1a https://github.com/BaiduSpider/BaiduSpider/issues \u793a\u4f8b \u2693\ufe0e \u666e\u901a from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_web ( input ( '\u641c\u7d22\u8bcd\uff1a' )) . plain ) \u6307\u5b9a\u9875\u7801 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_web ( input ( '\u641c\u7d22\u8bcd\uff1a' ), pn = int ( input ( '\u9875\u7801\uff1a' ))) . plain ) \u4ec0\u4e48\u662f pprint \uff1f pprint \u662f\u4e00\u4e2a Python \u5185\u7f6e\u7684\u8f93\u51fa\u7f8e\u5316\u5e93\uff0c\u53ef\u4ee5\u6539\u5584\u7ed3\u6784\u5316\u6570\u636e\u7684\u8f93\u51fa\u4f53\u9a8c\u3002\u53ef\u4ee5\u901a\u8fc7 import pprint \u5bfc\u5165\u6b64\u5e93\u3002\u4e0b\u9762\u662f\u5b83\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528 BaiduSpider \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u5bf9\u6bd4\u3002 from pprint import pprint from baiduspider import BaiduSpider result = BaiduSpider () . search_web ( 'Python' ) print ( result ) # print print ( ' \\n\\n ' ) pprint ( result ) # pprint \u5728\u63a5\u4e0b\u6765\u7684\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u5927\u91cf\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u56e0\u4e3aBaiduSpider \u7684\u5b57\u5178\u8fd4\u56de\u503c\u5341\u5206\u590d\u6742\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"index.html#BaiduSpider","text":"BaiduSpider \u662f\u4e00\u4e2a\u4f7f\u7528 Python \u7f16\u5199\u7684\u8f7b\u91cf\u7ea7\u767e\u5ea6\u722c\u866b\u3002\u5b83\u57fa\u4e8e Requests \u548c BeautifulSoup \u6784\u5efa\uff0c\u5e76\u63d0\u4f9b\u4e86\u6613\u7528\u7684 API \u63a5\u53e3\u4ee5\u53ca\u5b8c\u5584\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u63d0\u5347\u5f00\u53d1\u8005\u7684\u4f7f\u7528\u4f53\u9a8c\u3002 \u6709\u4e86 BaiduSpider\uff0c\u4f60\u53ef\u4ee5\uff1a \u7cbe\u51c6\uff0c\u5feb\u901f\u7684\u63d0\u53d6\u767e\u5ea6\u641c\u7d22\u7ed3\u679c \u83b7\u53d6\u591a\u79cd\u7ed3\u679c\u7c7b\u578b \u4f7f\u7528\u6211\u4eec\u7b80\u6d01\u6613\u7528\u7684 API","title":"BaiduSpider"},{"location":"index.html#\u5fc5\u8981\u6761\u4ef6","text":"Python 3.6+","title":"\u5fc5\u8981\u6761\u4ef6"},{"location":"index.html#\u5b89\u88c5","text":"$ pip install baiduspider","title":"\u5b89\u88c5"},{"location":"index.html#\u94fe\u63a5","text":"\u6587\u6863\uff1a https://baiduspider.github.io PyPI\uff1a https://pypi.org/project/BaiduSpider/ GitHub\uff1a https://github.com/BaiduSpider/BaiduSpider \u8ba8\u8bba\uff1a https://github.com/BaiduSpider/BaiduSpider/discussions \u62a5\u544a Issue\uff1a https://github.com/BaiduSpider/BaiduSpider/issues","title":"\u94fe\u63a5"},{"location":"index.html#\u793a\u4f8b","text":"\u666e\u901a from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_web ( input ( '\u641c\u7d22\u8bcd\uff1a' )) . plain ) \u6307\u5b9a\u9875\u7801 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_web ( input ( '\u641c\u7d22\u8bcd\uff1a' ), pn = int ( input ( '\u9875\u7801\uff1a' ))) . plain ) \u4ec0\u4e48\u662f pprint \uff1f pprint \u662f\u4e00\u4e2a Python \u5185\u7f6e\u7684\u8f93\u51fa\u7f8e\u5316\u5e93\uff0c\u53ef\u4ee5\u6539\u5584\u7ed3\u6784\u5316\u6570\u636e\u7684\u8f93\u51fa\u4f53\u9a8c\u3002\u53ef\u4ee5\u901a\u8fc7 import pprint \u5bfc\u5165\u6b64\u5e93\u3002\u4e0b\u9762\u662f\u5b83\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528 BaiduSpider \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u5bf9\u6bd4\u3002 from pprint import pprint from baiduspider import BaiduSpider result = BaiduSpider () . search_web ( 'Python' ) print ( result ) # print print ( ' \\n\\n ' ) pprint ( result ) # pprint \u5728\u63a5\u4e0b\u6765\u7684\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u5927\u91cf\u4f7f\u7528\u6b64\u51fd\u6570\uff0c\u56e0\u4e3aBaiduSpider \u7684\u5b57\u5178\u8fd4\u56de\u503c\u5341\u5206\u590d\u6742\u3002","title":"\u793a\u4f8b"},{"location":"FAQ/index.html","text":"FAQ \u2693\ufe0e FAQ\uff0c\u5373 Frequently Asked Questions \uff0c\u5e38\u89c1\u95ee\u9898\u3002\u8fd9\u7bc7\u6587\u6863\u5c06\u4f1a\u9010\u4e00\u89e3\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002 \u6280\u672f\u65b9\u9762 \u2693\ufe0e \u4e3a\u4ec0\u4e48\u6709\u65f6\u5019 BaiduSpider \u4f1a\u51fa\u73b0\u8b66\u544a\uff1f \u2693\ufe0e \u5982\u679c\u4f60\u9047\u5230\u4e86\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8b66\u544a 1 \uff1a WARNING: An error occurred while executing function BaiduSpider.parse-web, which is currently ignored. However, the rest of the parsing process is still being executed normally. This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \u4e0d\u8981\u7d27\u5f20\uff0c\u4f60\u7684\u8bbe\u5907\u5e76\u6ca1\u6709\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\uff0c\u53ea\u662f\u5728\u6570\u636e\u7684\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u4e00\u70b9\u5c0f\u5dee\u9519\u3002 \uff08\u6700\u96be\u8c03\u8bd5\u7684 Bug \u662f\u4e0d\u62a5\u9519\u7684 Bug\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u7684 Bug\uff09 \u6ce8\uff1a\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u767e\u5ea6\u6587\u5e93\u641c\u7d22\uff0c\u8bf7\u5148\u4f7f\u7528 \u7279\u4f8b \u8fdb\u884c\u9a8c\u8bc1\uff0c\u82e5\u4ecd\u7136\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u518d\u6309\u7167\u4e0b\u8ff0\u65b9\u6cd5\u8fdb\u884c\u68c0\u67e5\u3002 Why? \u2693\ufe0e \u8fd9\u662f\u7531\u4e8e BaiduSpider \u5185\u90e8\u89e3\u6790\u51fa\u73b0\u9519\u8bef\u5bfc\u81f4\u7684\u3002\u629b\u51fa\u6b64\u5f02\u5e38\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u89e3\u6790\u8fc7\u7a0b\u4e2d\u4e0d\u56e0\u4e3a\u5076\u7136\u51fa\u73b0\u7684\u9519\u8bef\u800c\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u7ec8\u6b62\u3002 \u4f46\u662f\uff0c\u9664\u4e86 BaiduSpider \u5185\u90e8\u89e3\u6790\u51fa\u73b0\u9519\u8bef\u4ee5\u5916\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u7528\u6237\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\u9020\u6210\u65e0\u6cd5\u6b63\u5e38\u83b7\u53d6\u5230\u767e\u5ea6\u7f51\u9875\u9020\u6210\u7684\u89e3\u6790\u9519\u8bef\u3002 How? \u2693\ufe0e \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u662f\u5426\u4e3aBaiduSpider\u5185\u90e8\u89e3\u6790\u9519\u8bef\u3002\u8bf7\u5728\u4f60\u7684\u7ec8\u7aef\u4e0b\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a Linux / macOS $ export DEBUG = 1 Windows $ set DEBUG = 1 \u7136\u540e\uff0c\u91cd\u65b0\u8fd0\u884c\u4f60\u51fa\u9519\u7684\u90a3\u6bb5\u7a0b\u5e8f\u3002\u8fd9\u6b21\uff0c\u7531\u4e8e\u662f\u5728 DEBUG \u6a21\u5f0f\u4e0b\u8fdb\u884c\uff0cBaiduSpider \u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\u5e76\u7ec8\u6b62\u7a0b\u5e8f\u8fd0\u884c\u3002\u8bf7\u4ed4\u7ec6\u68c0\u67e5\u9519\u8bef\u4fe1\u606f\u5e76\u786e\u8ba4\u662f\u5426\u4e3a\u4f60\u7684\u7a0b\u5e8f\u9519\u8bef\u3002 \u4e00\u822c\u6765\u8bb2\uff0cBaiduSpider \u89e3\u6790\u9519\u8bef\u4f1a\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a Traceback (most recent call last): File \"d:\\Develop\\Python\\BaiduSpider\\exp.py\" , line 8 , in <module> result = spider . search_web ( \"\u5357\u4eac\u75ab\u60c5\" ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\__init__.py\" , line 408 , in search_web self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\_spider.py\" , line 87 , in _handle_error raise err File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\__init__.py\" , line 404 , in search_web results = self . parser . parse_web ( content , exclude = exclude ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\parser\\__init__.py\" , line 47 , in parse_web news_detail = self . webSubParser . parse_news_block ( news ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\util.py\" , line 15 , in wrapper raise err File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\util.py\" , line 12 , in wrapper return func ( * args , ** kwargs ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\parser\\subparser.py\" , line 45 , in parse_news_block row_time = self . _format ( row . find ( \"div\" , class_ = \"c-color-gray2\" ) . text ) AttributeError : 'NoneType' object has no attribute 'text' \u5982\u679c\u4f60\u7684\u62a5\u9519\u662f\u7531 Requests \u6216\u5176\u4ed6\u8bf7\u6c42\u5305\u53d1\u51fa\u7684\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u7684\u7a0b\u5e8f\u8bf7\u6c42\u6b21\u6570\u8fc7\u591a\u5bfc\u81f4 IP \u88ab\u5c01\u7981\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u6216 \u8bbe\u7f6eCookie \u4ee5\u5ef6\u7f13\u5c01\u7981\u3002 \u7279\u4f8b\uff1a\u6587\u5e93\u641c\u7d22 \u2693\ufe0e \u7531\u4e8e\u6587\u5e93\u641c\u7d22\u7684\u7279\u6b8a\u4fa6\u6d4b\u673a\u5236\uff0c\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u9700\u8981\u8fdb\u884c\u4eba\u5de5\u9a8c\u8bc1\u3002\u5982\u679c\u6587\u5e93\u641c\u7d22\u51fa\u73b0\u4e0a\u8ff0\u8b66\u544a\uff0c\u8bf7\u81ea\u884c\u8bbf\u95ee \u6587\u5e93\u641c\u7d22 \u8fdb\u884c\u624b\u52a8\u9a8c\u8bc1\u3002 BaiduSpider \u6682\u4e0d\u8003\u8651\u5b9e\u73b0\u6a21\u62df\u4eba\u5de5\u9a8c\u8bc1\u3002 Fix? \u2693\ufe0e \u65e2\u7136\u53d1\u73b0\u4e86\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u51b3\u95ee\u9898\u3002\u5982\u679c\u4f60\u662f\u7531\u4e8e\u81ea\u8eab\u539f\u56e0\u7a0b\u5e8f\u8fd0\u884c\u51fa\u9519\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\uff1b\u5982\u679c\u662f\u7531\u4e8e IP \u88ab\u5c01\u7981\u5bfc\u81f4\u51fa\u9519\uff0c\u53ef\u4ee5\u53c2\u8003 \u8bbe\u7f6eCookie \u6765\u5ef6\u7f13\u5c01\u7981\uff1b\u5982\u679c\u771f\u7684\u662f BaiduSpider \u7684\u5185\u90e8\u95ee\u9898\uff0c\u8bf7 \u63d0\u51faissue \uff0c\u5e76\u9644\u4e0a\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u548c\u60a8\u7684\u4ee3\u7801\u3002 \u4e3a\u4ec0\u4e48\u6211\u7684 BaiduSpider \u8fd4\u56de\u503c\u90fd\u662f\u5b57\u5178\uff1f \u2693\ufe0e \u8fd9\u662f\u7531\u4e8e\u4f60\u6ca1\u6709\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684 BaiduSpider\u3002\u5728\u8f83\u65e7\u7248\u672c 2 \u7684 BaiduSpider \u4e2d\uff0c\u641c\u7d22\u51fd\u6570\u7684\u8fd4\u56de\u503c\u90fd\u4f1a\u4ee5\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\uff0c\u800c\u975e\u73b0\u5728\u65b0\u7248\u7684\u8fd4\u56de\u7ed3\u679c\u7c7b\u3002 \u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u4e0b\u8f7d\u5e76\u5b89\u88c5 \u6700\u65b0\u7248\u7684 BaiduSpider \u3002 \u6211\u722c\u53d6\u7684\u6570\u91cf\u592a\u591a\uff0c\u767e\u5ea6\u628a\u6211\u7684IP\u5c01\u7981\u4e86\u600e\u4e48\u529e\uff1f \u2693\ufe0e \u8bf7\u53c2\u8003 \u8bbe\u7f6e Cookie \u6765\u5ef6\u7f13\u5c01\u7981 3 \u3002 \u5f3a\u70c8\u4e0d\u5efa\u8bae\u5927\u91cf\u722c\u53d6\u767e\u5ea6\u5185\u5bb9\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider\u4e0d\u4e3a\u6b64\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002 \u6587\u6863\u65b9\u9762 \u2693\ufe0e \u6211\u53d1\u73b0\u6709\u4e00\u7bc7\u6587\u6863\u5199\u7684\u4e0d\u592a\u8be6\u7ec6\u600e\u4e48\u529e\uff1f \u2693\ufe0e \u9996\u5148\uff0c\u7279\u522b\u611f\u8c22\u4f60\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\uff01\u4f60\u53ef\u4ee5\u53bb GitHub \u62a5\u544a\u8fd9\u4e2a\u95ee\u9898 \uff0c\u6216\u8005\u76f4\u63a5\u63d0\u4ea4\u4e00\u4e2a PR \u6765\u81ea\u5df1\u4fee\u590d\u5b83\uff01 \u5728\u63d0\u4ea4 Issue \u6216 PR \u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5305\u542b\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4f60\u53d1\u73b0\u7684\u9519\u8bef \u4f60\u63d0\u51fa\u7684\u610f\u89c1 \u9519\u8bef\u7684\u4f4d\u7f6e \u4e3a\u4ec0\u4e48\u4f60\u8ba4\u4e3a\u662f\u9519\u7684 \u2026\u2026 \u4e0d\u7ba1\u4f60\u9009\u7684\u662f\u54ea\u9879\uff0cBaiduSpider \u56e2\u961f\u90fd\u4f1a\u70ed\u70c8\u6b22\u8fce\uff01\u6211\u4eec\u4e5f\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u56de\u590d\u4f60\u3002 \u4e3a\u4ec0\u4e48\u6bcf\u7bc7\u6587\u6863\u4e0b\u9762\u90fd\u6709\u201c\u8bc4\u8bba\u201d\u4e8c\u5b57\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bc4\u8bba\u533a\uff1f \u2693\ufe0e \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u56fd\u5916\u7684 Disqus \u8bc4\u8bba\u7cfb\u7edf\uff0c\u5728\u56fd\u5185\u53ef\u80fd\u4f1a\u7531\u4e8e\u7f51\u7edc\u539f\u56e0\u65e0\u6cd5\u8bbf\u95ee\u8be5\u7ad9\u70b9\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u3002 \u8d21\u732e\u65b9\u9762 \u2693\ufe0e \u6211\u53d1\u73b0\u4e86\u4e00\u4e2a Bug / \u6709\u4e00\u4e2a\u529f\u80fd\u8bf7\u6c42\uff0c\u6211\u8be5\u5982\u4f55\u8ba9\u5f00\u53d1\u56e2\u961f\u77e5\u9053\uff1f \u2693\ufe0e \u4f60\u53ef\u4ee5 \u5f00\u542f\u4e00\u4e2a Issue \u6765\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u4e5f\u4f1a\u5728\u7b2c\u4e00\u65f6\u95f4\u56de\u590d\u4f60\u3002 \u8bf7\u63d0\u4f9b\u5173\u4e8e\u4f60 Issue \u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u5783\u573e Issue \u5c06\u88ab\u76f4\u63a5\u5173\u95ed\u3002 \u6211\u81ea\u5df1\u505a\u51fa\u4e86\u4e00\u4e2a\u65b0\u529f\u80fd / \u4fee\u590d\u4e86\u4e00\u4e2abug\uff0c\u6211\u600e\u4e48\u544a\u77e5BaiduSpider\u6210\u5458\uff1f \u2693\ufe0e \u6700\u597d\u7684\u65b9\u5f0f\u662f\u5728 GitHub \u4e0a\u63d0\u4ea4\u4e00\u4e2a Pull Request\uff0c\u6211\u4eec\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5ba1\u6838\u5e76\u56de\u590d\u4f60\u7684 PR\u3002 \u6b64\u5916\uff0c\u8bf7\u8be6\u7ec6\u63cf\u8ff0\u4f60\u7684 PR \u505a\u4e86\u54ea\u4e9b\u66f4\u6539\uff0c\u5b9e\u73b0\u4e86\u4ec0\u4e48\u529f\u80fd\u3002 \u6761\u4f8b\u65b9\u9762 \u2693\ufe0e BaiduSpider \u53ef\u4ee5\u5546\u7528\u5417\uff1f \u2693\ufe0e \u4e0d\u53ef\u4ee5\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u6839\u636e\u8bb8\u53ef\u8bc1\u89c4\u5b9a\uff0c\u4efb\u4f55\u4f7f\u7528 BaiduSpider \u7684\u9879\u76ee\u5fc5\u987b\u5f00\u6e90\uff0c\u4e0d\u5f97\u95ed\u6e90\u3002 \u6211\u53ef\u4ee5\u4f7f\u7528 BaiduSpider \u722c\u53d6\u5927\u91cf\u6570\u636e\u5417\uff1f \u2693\ufe0e \u4e0d\u53ef\u4ee5\u3002\u867d\u7136 BaiduSpider \u63d0\u4f9b\u8fd9\u79cd\u722c\u866b\uff0c\u4f46\u662f\u4e0d\u4ee3\u8868\u4f60\u5c31\u80fd\u591f\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\u3002BaiduSpider \u7684\u7528\u9014\u4ec5\u9650\u5b66\u4e60\u4e0e\u7814\u7a76\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider \u56e2\u961f\u4efb\u4f55\u6210\u5458\u4e0d\u627f\u62c5\u56e0\u6b64\u800c\u9020\u6210\u7684\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002 \u6211\u53ef\u4ee5\u4e8c\u6b21\u5f00\u53d1 BaiduSpider \u5417\uff1f \u2693\ufe0e \u5f53\u7136\u53ef\u4ee5\u3002\u6211\u4eec\u975e\u5e38\u9f13\u52b1\u8fd9\u79cd\u884c\u4e3a\uff01\u4f46\u662f\uff0c\u5728\u60a8\u4e8c\u6b21\u5f00\u53d1 BaiduSpider \u7684\u540c\u65f6\uff0c\u8bf7\u9075\u5b88\u8bb8\u53ef\u8bc1\u89c4\u5b9a\uff0c\u4fdd\u6301\u9879\u76ee\u5f00\u6e90\u4e14\u4e0d\u53ef\u8fdb\u884c\u5546\u7528\u3002 BaiduSpider v0.1.5 \u4e4b\u524d\u7684\u7248\u672c\u5c1a\u672a\u6dfb\u52a0\u9519\u8bef\u5904\u7406\u3002\u5bf9\u4e8e v0.0.2 - v0.1.4 \u7248\u672c\uff0c\u6240\u6709\u9519\u8bef\u5c06\u4f1a\u76f4\u63a5\u5f39\u51fa\u800c\u975e\u53d1\u51fa\u8b66\u544a\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6216\u5176\u4ed6\u65b0\u529f\u80fd\uff0c\u8bf7\u5347\u7ea7BaiduSpider\u5230 \u6700\u65b0\u7a33\u5b9a\u7248\u672c \u3002 \u21a9 \u786e\u5207\u7684\u8bf4\uff0c\u5728 BaiduSpider v0.5 Preview \u7248\u672c\u4e4b\u524d\u7684 v0.x \u7248\u672c\u90fd\u6ca1\u6709\u8fd9\u4e00\u529f\u80fd\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4f7f\u7528\u5b57\u5178\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4e5f\u4e0d\u5fc5\u9000\u56de\u8fd9\u4e9b\u65e9\u671f\u7248\u672c\u3002\u6bcf\u4e2a\u8fd4\u56de\u7c7b\u7684 plain \u6210\u5458\u53d8\u91cf\u90fd\u662f\u8fd9\u4e2a\u7c7b\u7684\u5b57\u5178\u6216\u6570\u7ec4\u5f62\u5f0f\u3002\u8be6\u89c1 API\u6587\u6863 \u3002 \u21a9 \u867d\u7136BaiduSpider\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u4ec5\u4f9b\u5b66\u4e60\u4e0e\u7814\u7a76\u4f7f\u7528\u3002\u6b64\u5916\uff0c\u8fd9\u4e00\u529f\u80fd\u5e76\u4e0d\u4fdd\u8bc1\u80fd 100% \u6709\u6548\u3002 \u21a9","title":"FAQ"},{"location":"FAQ/index.html#FAQ","text":"FAQ\uff0c\u5373 Frequently Asked Questions \uff0c\u5e38\u89c1\u95ee\u9898\u3002\u8fd9\u7bc7\u6587\u6863\u5c06\u4f1a\u9010\u4e00\u89e3\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002","title":"FAQ"},{"location":"FAQ/index.html#\u6280\u672f\u65b9\u9762","text":"","title":"\u6280\u672f\u65b9\u9762"},{"location":"FAQ/index.html#\u4e3a\u4ec0\u4e48\u6709\u65f6\u5019-BaiduSpider-\u4f1a\u51fa\u73b0\u8b66\u544a","text":"\u5982\u679c\u4f60\u9047\u5230\u4e86\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8b66\u544a 1 \uff1a WARNING: An error occurred while executing function BaiduSpider.parse-web, which is currently ignored. However, the rest of the parsing process is still being executed normally. This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \u4e0d\u8981\u7d27\u5f20\uff0c\u4f60\u7684\u8bbe\u5907\u5e76\u6ca1\u6709\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\uff0c\u53ea\u662f\u5728\u6570\u636e\u7684\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u4e00\u70b9\u5c0f\u5dee\u9519\u3002 \uff08\u6700\u96be\u8c03\u8bd5\u7684 Bug \u662f\u4e0d\u62a5\u9519\u7684 Bug\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u7684 Bug\uff09 \u6ce8\uff1a\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u767e\u5ea6\u6587\u5e93\u641c\u7d22\uff0c\u8bf7\u5148\u4f7f\u7528 \u7279\u4f8b \u8fdb\u884c\u9a8c\u8bc1\uff0c\u82e5\u4ecd\u7136\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u518d\u6309\u7167\u4e0b\u8ff0\u65b9\u6cd5\u8fdb\u884c\u68c0\u67e5\u3002","title":"\u4e3a\u4ec0\u4e48\u6709\u65f6\u5019 BaiduSpider \u4f1a\u51fa\u73b0\u8b66\u544a\uff1f"},{"location":"FAQ/index.html#Why","text":"\u8fd9\u662f\u7531\u4e8e BaiduSpider \u5185\u90e8\u89e3\u6790\u51fa\u73b0\u9519\u8bef\u5bfc\u81f4\u7684\u3002\u629b\u51fa\u6b64\u5f02\u5e38\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u89e3\u6790\u8fc7\u7a0b\u4e2d\u4e0d\u56e0\u4e3a\u5076\u7136\u51fa\u73b0\u7684\u9519\u8bef\u800c\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u7ec8\u6b62\u3002 \u4f46\u662f\uff0c\u9664\u4e86 BaiduSpider \u5185\u90e8\u89e3\u6790\u51fa\u73b0\u9519\u8bef\u4ee5\u5916\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u7528\u6237\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\u9020\u6210\u65e0\u6cd5\u6b63\u5e38\u83b7\u53d6\u5230\u767e\u5ea6\u7f51\u9875\u9020\u6210\u7684\u89e3\u6790\u9519\u8bef\u3002","title":"Why?"},{"location":"FAQ/index.html#How","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u662f\u5426\u4e3aBaiduSpider\u5185\u90e8\u89e3\u6790\u9519\u8bef\u3002\u8bf7\u5728\u4f60\u7684\u7ec8\u7aef\u4e0b\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a Linux / macOS $ export DEBUG = 1 Windows $ set DEBUG = 1 \u7136\u540e\uff0c\u91cd\u65b0\u8fd0\u884c\u4f60\u51fa\u9519\u7684\u90a3\u6bb5\u7a0b\u5e8f\u3002\u8fd9\u6b21\uff0c\u7531\u4e8e\u662f\u5728 DEBUG \u6a21\u5f0f\u4e0b\u8fdb\u884c\uff0cBaiduSpider \u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\u5e76\u7ec8\u6b62\u7a0b\u5e8f\u8fd0\u884c\u3002\u8bf7\u4ed4\u7ec6\u68c0\u67e5\u9519\u8bef\u4fe1\u606f\u5e76\u786e\u8ba4\u662f\u5426\u4e3a\u4f60\u7684\u7a0b\u5e8f\u9519\u8bef\u3002 \u4e00\u822c\u6765\u8bb2\uff0cBaiduSpider \u89e3\u6790\u9519\u8bef\u4f1a\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a Traceback (most recent call last): File \"d:\\Develop\\Python\\BaiduSpider\\exp.py\" , line 8 , in <module> result = spider . search_web ( \"\u5357\u4eac\u75ab\u60c5\" ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\__init__.py\" , line 408 , in search_web self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\_spider.py\" , line 87 , in _handle_error raise err File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\__init__.py\" , line 404 , in search_web results = self . parser . parse_web ( content , exclude = exclude ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\parser\\__init__.py\" , line 47 , in parse_web news_detail = self . webSubParser . parse_news_block ( news ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\util.py\" , line 15 , in wrapper raise err File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\util.py\" , line 12 , in wrapper return func ( * args , ** kwargs ) File \"d:\\Develop\\Python\\BaiduSpider\\baiduspider\\parser\\subparser.py\" , line 45 , in parse_news_block row_time = self . _format ( row . find ( \"div\" , class_ = \"c-color-gray2\" ) . text ) AttributeError : 'NoneType' object has no attribute 'text' \u5982\u679c\u4f60\u7684\u62a5\u9519\u662f\u7531 Requests \u6216\u5176\u4ed6\u8bf7\u6c42\u5305\u53d1\u51fa\u7684\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u7684\u7a0b\u5e8f\u8bf7\u6c42\u6b21\u6570\u8fc7\u591a\u5bfc\u81f4 IP \u88ab\u5c01\u7981\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u6216 \u8bbe\u7f6eCookie \u4ee5\u5ef6\u7f13\u5c01\u7981\u3002","title":"How?"},{"location":"FAQ/index.html#\u7279\u4f8b\u6587\u5e93\u641c\u7d22","text":"\u7531\u4e8e\u6587\u5e93\u641c\u7d22\u7684\u7279\u6b8a\u4fa6\u6d4b\u673a\u5236\uff0c\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u9700\u8981\u8fdb\u884c\u4eba\u5de5\u9a8c\u8bc1\u3002\u5982\u679c\u6587\u5e93\u641c\u7d22\u51fa\u73b0\u4e0a\u8ff0\u8b66\u544a\uff0c\u8bf7\u81ea\u884c\u8bbf\u95ee \u6587\u5e93\u641c\u7d22 \u8fdb\u884c\u624b\u52a8\u9a8c\u8bc1\u3002 BaiduSpider \u6682\u4e0d\u8003\u8651\u5b9e\u73b0\u6a21\u62df\u4eba\u5de5\u9a8c\u8bc1\u3002","title":"\u7279\u4f8b\uff1a\u6587\u5e93\u641c\u7d22"},{"location":"FAQ/index.html#Fix","text":"\u65e2\u7136\u53d1\u73b0\u4e86\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u51b3\u95ee\u9898\u3002\u5982\u679c\u4f60\u662f\u7531\u4e8e\u81ea\u8eab\u539f\u56e0\u7a0b\u5e8f\u8fd0\u884c\u51fa\u9519\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\uff1b\u5982\u679c\u662f\u7531\u4e8e IP \u88ab\u5c01\u7981\u5bfc\u81f4\u51fa\u9519\uff0c\u53ef\u4ee5\u53c2\u8003 \u8bbe\u7f6eCookie \u6765\u5ef6\u7f13\u5c01\u7981\uff1b\u5982\u679c\u771f\u7684\u662f BaiduSpider \u7684\u5185\u90e8\u95ee\u9898\uff0c\u8bf7 \u63d0\u51faissue \uff0c\u5e76\u9644\u4e0a\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u548c\u60a8\u7684\u4ee3\u7801\u3002","title":"Fix?"},{"location":"FAQ/index.html#\u4e3a\u4ec0\u4e48\u6211\u7684-BaiduSpider-\u8fd4\u56de\u503c\u90fd\u662f\u5b57\u5178","text":"\u8fd9\u662f\u7531\u4e8e\u4f60\u6ca1\u6709\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684 BaiduSpider\u3002\u5728\u8f83\u65e7\u7248\u672c 2 \u7684 BaiduSpider \u4e2d\uff0c\u641c\u7d22\u51fd\u6570\u7684\u8fd4\u56de\u503c\u90fd\u4f1a\u4ee5\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\uff0c\u800c\u975e\u73b0\u5728\u65b0\u7248\u7684\u8fd4\u56de\u7ed3\u679c\u7c7b\u3002 \u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u4e0b\u8f7d\u5e76\u5b89\u88c5 \u6700\u65b0\u7248\u7684 BaiduSpider \u3002","title":"\u4e3a\u4ec0\u4e48\u6211\u7684 BaiduSpider \u8fd4\u56de\u503c\u90fd\u662f\u5b57\u5178\uff1f"},{"location":"FAQ/index.html#\u6211\u722c\u53d6\u7684\u6570\u91cf\u592a\u591a\u767e\u5ea6\u628a\u6211\u7684IP\u5c01\u7981\u4e86\u600e\u4e48\u529e","text":"\u8bf7\u53c2\u8003 \u8bbe\u7f6e Cookie \u6765\u5ef6\u7f13\u5c01\u7981 3 \u3002 \u5f3a\u70c8\u4e0d\u5efa\u8bae\u5927\u91cf\u722c\u53d6\u767e\u5ea6\u5185\u5bb9\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider\u4e0d\u4e3a\u6b64\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002","title":"\u6211\u722c\u53d6\u7684\u6570\u91cf\u592a\u591a\uff0c\u767e\u5ea6\u628a\u6211\u7684IP\u5c01\u7981\u4e86\u600e\u4e48\u529e\uff1f"},{"location":"FAQ/index.html#\u6587\u6863\u65b9\u9762","text":"","title":"\u6587\u6863\u65b9\u9762"},{"location":"FAQ/index.html#\u6211\u53d1\u73b0\u6709\u4e00\u7bc7\u6587\u6863\u5199\u7684\u4e0d\u592a\u8be6\u7ec6\u600e\u4e48\u529e","text":"\u9996\u5148\uff0c\u7279\u522b\u611f\u8c22\u4f60\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\uff01\u4f60\u53ef\u4ee5\u53bb GitHub \u62a5\u544a\u8fd9\u4e2a\u95ee\u9898 \uff0c\u6216\u8005\u76f4\u63a5\u63d0\u4ea4\u4e00\u4e2a PR \u6765\u81ea\u5df1\u4fee\u590d\u5b83\uff01 \u5728\u63d0\u4ea4 Issue \u6216 PR \u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5305\u542b\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4f60\u53d1\u73b0\u7684\u9519\u8bef \u4f60\u63d0\u51fa\u7684\u610f\u89c1 \u9519\u8bef\u7684\u4f4d\u7f6e \u4e3a\u4ec0\u4e48\u4f60\u8ba4\u4e3a\u662f\u9519\u7684 \u2026\u2026 \u4e0d\u7ba1\u4f60\u9009\u7684\u662f\u54ea\u9879\uff0cBaiduSpider \u56e2\u961f\u90fd\u4f1a\u70ed\u70c8\u6b22\u8fce\uff01\u6211\u4eec\u4e5f\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u56de\u590d\u4f60\u3002","title":"\u6211\u53d1\u73b0\u6709\u4e00\u7bc7\u6587\u6863\u5199\u7684\u4e0d\u592a\u8be6\u7ec6\u600e\u4e48\u529e\uff1f"},{"location":"FAQ/index.html#\u4e3a\u4ec0\u4e48\u6bcf\u7bc7\u6587\u6863\u4e0b\u9762\u90fd\u6709\u8bc4\u8bba\u4e8c\u5b57\u4f46\u662f\u5374\u6ca1\u6709\u8bc4\u8bba\u533a","text":"\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u56fd\u5916\u7684 Disqus \u8bc4\u8bba\u7cfb\u7edf\uff0c\u5728\u56fd\u5185\u53ef\u80fd\u4f1a\u7531\u4e8e\u7f51\u7edc\u539f\u56e0\u65e0\u6cd5\u8bbf\u95ee\u8be5\u7ad9\u70b9\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u3002","title":"\u4e3a\u4ec0\u4e48\u6bcf\u7bc7\u6587\u6863\u4e0b\u9762\u90fd\u6709\u201c\u8bc4\u8bba\u201d\u4e8c\u5b57\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bc4\u8bba\u533a\uff1f"},{"location":"FAQ/index.html#\u8d21\u732e\u65b9\u9762","text":"","title":"\u8d21\u732e\u65b9\u9762"},{"location":"FAQ/index.html#\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a-Bug--\u6709\u4e00\u4e2a\u529f\u80fd\u8bf7\u6c42\u6211\u8be5\u5982\u4f55\u8ba9\u5f00\u53d1\u56e2\u961f\u77e5\u9053","text":"\u4f60\u53ef\u4ee5 \u5f00\u542f\u4e00\u4e2a Issue \u6765\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u4e5f\u4f1a\u5728\u7b2c\u4e00\u65f6\u95f4\u56de\u590d\u4f60\u3002 \u8bf7\u63d0\u4f9b\u5173\u4e8e\u4f60 Issue \u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u5783\u573e Issue \u5c06\u88ab\u76f4\u63a5\u5173\u95ed\u3002","title":"\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a Bug / \u6709\u4e00\u4e2a\u529f\u80fd\u8bf7\u6c42\uff0c\u6211\u8be5\u5982\u4f55\u8ba9\u5f00\u53d1\u56e2\u961f\u77e5\u9053\uff1f"},{"location":"FAQ/index.html#\u6211\u81ea\u5df1\u505a\u51fa\u4e86\u4e00\u4e2a\u65b0\u529f\u80fd--\u4fee\u590d\u4e86\u4e00\u4e2abug\u6211\u600e\u4e48\u544a\u77e5BaiduSpider\u6210\u5458","text":"\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5728 GitHub \u4e0a\u63d0\u4ea4\u4e00\u4e2a Pull Request\uff0c\u6211\u4eec\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5ba1\u6838\u5e76\u56de\u590d\u4f60\u7684 PR\u3002 \u6b64\u5916\uff0c\u8bf7\u8be6\u7ec6\u63cf\u8ff0\u4f60\u7684 PR \u505a\u4e86\u54ea\u4e9b\u66f4\u6539\uff0c\u5b9e\u73b0\u4e86\u4ec0\u4e48\u529f\u80fd\u3002","title":"\u6211\u81ea\u5df1\u505a\u51fa\u4e86\u4e00\u4e2a\u65b0\u529f\u80fd / \u4fee\u590d\u4e86\u4e00\u4e2abug\uff0c\u6211\u600e\u4e48\u544a\u77e5BaiduSpider\u6210\u5458\uff1f"},{"location":"FAQ/index.html#\u6761\u4f8b\u65b9\u9762","text":"","title":"\u6761\u4f8b\u65b9\u9762"},{"location":"FAQ/index.html#BaiduSpider-\u53ef\u4ee5\u5546\u7528\u5417","text":"\u4e0d\u53ef\u4ee5\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u6839\u636e\u8bb8\u53ef\u8bc1\u89c4\u5b9a\uff0c\u4efb\u4f55\u4f7f\u7528 BaiduSpider \u7684\u9879\u76ee\u5fc5\u987b\u5f00\u6e90\uff0c\u4e0d\u5f97\u95ed\u6e90\u3002","title":"BaiduSpider \u53ef\u4ee5\u5546\u7528\u5417\uff1f"},{"location":"FAQ/index.html#\u6211\u53ef\u4ee5\u4f7f\u7528-BaiduSpider-\u722c\u53d6\u5927\u91cf\u6570\u636e\u5417","text":"\u4e0d\u53ef\u4ee5\u3002\u867d\u7136 BaiduSpider \u63d0\u4f9b\u8fd9\u79cd\u722c\u866b\uff0c\u4f46\u662f\u4e0d\u4ee3\u8868\u4f60\u5c31\u80fd\u591f\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\u3002BaiduSpider \u7684\u7528\u9014\u4ec5\u9650\u5b66\u4e60\u4e0e\u7814\u7a76\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider \u56e2\u961f\u4efb\u4f55\u6210\u5458\u4e0d\u627f\u62c5\u56e0\u6b64\u800c\u9020\u6210\u7684\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002","title":"\u6211\u53ef\u4ee5\u4f7f\u7528 BaiduSpider \u722c\u53d6\u5927\u91cf\u6570\u636e\u5417\uff1f"},{"location":"FAQ/index.html#\u6211\u53ef\u4ee5\u4e8c\u6b21\u5f00\u53d1-BaiduSpider-\u5417","text":"\u5f53\u7136\u53ef\u4ee5\u3002\u6211\u4eec\u975e\u5e38\u9f13\u52b1\u8fd9\u79cd\u884c\u4e3a\uff01\u4f46\u662f\uff0c\u5728\u60a8\u4e8c\u6b21\u5f00\u53d1 BaiduSpider \u7684\u540c\u65f6\uff0c\u8bf7\u9075\u5b88\u8bb8\u53ef\u8bc1\u89c4\u5b9a\uff0c\u4fdd\u6301\u9879\u76ee\u5f00\u6e90\u4e14\u4e0d\u53ef\u8fdb\u884c\u5546\u7528\u3002 BaiduSpider v0.1.5 \u4e4b\u524d\u7684\u7248\u672c\u5c1a\u672a\u6dfb\u52a0\u9519\u8bef\u5904\u7406\u3002\u5bf9\u4e8e v0.0.2 - v0.1.4 \u7248\u672c\uff0c\u6240\u6709\u9519\u8bef\u5c06\u4f1a\u76f4\u63a5\u5f39\u51fa\u800c\u975e\u53d1\u51fa\u8b66\u544a\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6216\u5176\u4ed6\u65b0\u529f\u80fd\uff0c\u8bf7\u5347\u7ea7BaiduSpider\u5230 \u6700\u65b0\u7a33\u5b9a\u7248\u672c \u3002 \u21a9 \u786e\u5207\u7684\u8bf4\uff0c\u5728 BaiduSpider v0.5 Preview \u7248\u672c\u4e4b\u524d\u7684 v0.x \u7248\u672c\u90fd\u6ca1\u6709\u8fd9\u4e00\u529f\u80fd\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4f7f\u7528\u5b57\u5178\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4e5f\u4e0d\u5fc5\u9000\u56de\u8fd9\u4e9b\u65e9\u671f\u7248\u672c\u3002\u6bcf\u4e2a\u8fd4\u56de\u7c7b\u7684 plain \u6210\u5458\u53d8\u91cf\u90fd\u662f\u8fd9\u4e2a\u7c7b\u7684\u5b57\u5178\u6216\u6570\u7ec4\u5f62\u5f0f\u3002\u8be6\u89c1 API\u6587\u6863 \u3002 \u21a9 \u867d\u7136BaiduSpider\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u4ec5\u4f9b\u5b66\u4e60\u4e0e\u7814\u7a76\u4f7f\u7528\u3002\u6b64\u5916\uff0c\u8fd9\u4e00\u529f\u80fd\u5e76\u4e0d\u4fdd\u8bc1\u80fd 100% \u6709\u6548\u3002 \u21a9","title":"\u6211\u53ef\u4ee5\u4e8c\u6b21\u5f00\u53d1 BaiduSpider \u5417\uff1f"},{"location":"api/index.html","text":"API \u53c2\u8003 \u2693\ufe0e \u8fd9\u90e8\u5206\u6587\u6863\u662f\u7531 mkdocstrings \u81ea\u52a8\u751f\u6210\u7684\uff0c\u76ee\u7684\u5728\u4e8e\u4ecb\u7ecd\u6bcf\u4e2a\u51fd\u6570 / \u7c7b\u7684\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u3002","title":"\u7b80\u4ecb"},{"location":"api/index.html#API-\u53c2\u8003","text":"\u8fd9\u90e8\u5206\u6587\u6863\u662f\u7531 mkdocstrings \u81ea\u52a8\u751f\u6210\u7684\uff0c\u76ee\u7684\u5728\u4e8e\u4ecb\u7ecd\u6bcf\u4e2a\u51fd\u6570 / \u7c7b\u7684\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u3002","title":"API \u53c2\u8003"},{"location":"api/baiduspider/__init__.html","text":"baiduspider.__init__ special \u2693\ufe0e BaiduSpider\uff0c\u4e00\u4e2a\u722c\u53d6\u767e\u5ea6\u7684\u5229\u5668. :Author: Sam Zhang :Licence: GPL_V3 :GitHub: https://github.com/BaiduSpider/BaiduSpider BaiduSpider \u2693\ufe0e \u722c\u53d6\u767e\u5ea6\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u652f\u6301\u767e\u5ea6\u641c\u7d22\uff0c\u767e\u5ea6\u56fe\u7247\uff0c\u767e\u5ea6\u77e5\u9053\uff0c\u767e\u5ea6\u89c6\u9891\uff0c\u767e\u5ea6\u8d44\u8baf\uff0c\u767e\u5ea6\u6587\u5e93\uff0c\u767e\u5ea6\u7ecf\u9a8c\u548c\u767e\u5ea6\u767e\u79d1\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea BaseSpider \u3002 BaiduSpider. search_web ( self : BaiduSpider , query : str , pn : int = 1 , exclude : list = [], time : Union [ tuple , str , None ] = None , proxies : dict = None ) -> WebResult : \u767e\u5ea6\u7f51\u9875\u641c\u7d22 BaiduSpider. search_pic ( self : BaiduSpider , query : str , pn : int = 1 , proxies : dict = None ) -> PicResult : \u767e\u5ea6\u56fe\u7247\u641c\u7d22 BaiduSpider. search_zhidao ( self : BaiduSpider , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : dict = None ) -> ZhidaoResult : \u767e\u5ea6\u77e5\u9053\u641c\u7d22 BaiduSpider. search_video ( self : BaiduSpider , query : str , pn : int = 1 , proxies : dict = None ) -> VideoResult : \u767e\u5ea6\u89c6\u9891\u641c\u7d22 BaiduSpider. search_news ( self : BaiduSpider , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : dict = None ) -> NewsResult : \u767e\u5ea6\u8d44\u8baf\u641c\u7d22 BaiduSpider. search_wenku ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : dict = None ) -> WenkuResult : \u767e\u5ea6\u6587\u5e93\u641c\u7d22 BaiduSpider. search_jingyan ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , proxies : dict = None ) -> JingyanResult : \u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22 BaiduSpider. search_baike ( self : BaiduSpider , query : str , proxies : dict = None ) : \u767e\u5ea6\u767e\u79d1\u641c\u7d22 __init__ ( self , cookie = None ) special \u2693\ufe0e \u521d\u59cb\u5316BaiduSpider. \u8bbe\u7f6eCookie\uff1a spider = BaiduSpider ( cookie = \"\u4f60\u7684cookie\" ) Cookie\u53ef\u4ee5\u88ab\u7528\u4e8e\u589e\u5f3a\u722c\u866b\u7684\u771f\u5b9e\u6027\uff0c\u5c3d\u53ef\u80fd\u4f7f\u767e\u5ea6\u51cf\u5c11\u5c01\u7981IP\u7684\u6700\u5927\u9650\u5236\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u4f60\u7684Cookie\uff0c\u8bf7\u6253\u5f00 https://www.baidu.com/s?wd=placeholder&pn=0 \uff0c\u5e76 \u6309F12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u7136\u540e\u5728\u5f00\u53d1\u8005\u5de5\u5177\u6700\u4e0a\u65b9\u7684\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u8fd9\u4e00\u9009\u9879\uff0c\u70b9\u51fb \u51fa\u73b0\u7684\u5217\u8868\u4e2d\u6700\u4e0a\u65b9\u7684\u4ee5 s?wd=placeholder \u5f00\u5934\u7684\u9009\u9879\uff0c\u5728\u51fa\u73b0\u7684\u8be6\u60c5\u4e2d\u627e\u5230 Request Headers \u4e00\u9879\uff0c\u7136\u540e\u5728\u5b83\u7684\u4e0b\u65b9\u627e\u5230 Cookie \uff0c\u5e76\u590d\u5236Cookie\u8fd9\u4e00\u9009\u9879\u5185\uff08\u4e0d\u5305\u62ec Cookie: \uff09\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\uff0c \u5e76\u5c06\u5b83\u7c98\u8d34\u5728\u4f60\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684Cookie\u3002 Parameters: Name Type Description Default cookie str \u6d4f\u89c8\u5668\u6293\u5305\u5f97\u5230\u7684cookie. Defaults to None. None Source code in baiduspider\\__init__.py def __init__ ( self , cookie : str = None ) -> None : \"\"\"\u521d\u59cb\u5316BaiduSpider. - \u8bbe\u7f6eCookie\uff1a ```python spider = BaiduSpider(cookie=\"\u4f60\u7684cookie\") ``` Cookie\u53ef\u4ee5\u88ab\u7528\u4e8e\u589e\u5f3a\u722c\u866b\u7684\u771f\u5b9e\u6027\uff0c\u5c3d\u53ef\u80fd\u4f7f\u767e\u5ea6\u51cf\u5c11\u5c01\u7981IP\u7684\u6700\u5927\u9650\u5236\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u4f60\u7684Cookie\uff0c\u8bf7\u6253\u5f00<https://www.baidu.com/s?wd=placeholder&pn=0>\uff0c\u5e76 \u6309F12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u7136\u540e\u5728\u5f00\u53d1\u8005\u5de5\u5177\u6700\u4e0a\u65b9\u7684\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u8fd9\u4e00\u9009\u9879\uff0c\u70b9\u51fb \u51fa\u73b0\u7684\u5217\u8868\u4e2d\u6700\u4e0a\u65b9\u7684\u4ee5`s?wd=placeholder`\u5f00\u5934\u7684\u9009\u9879\uff0c\u5728\u51fa\u73b0\u7684\u8be6\u60c5\u4e2d\u627e\u5230`Request Headers` \u4e00\u9879\uff0c\u7136\u540e\u5728\u5b83\u7684\u4e0b\u65b9\u627e\u5230`Cookie`\uff0c\u5e76\u590d\u5236Cookie\u8fd9\u4e00\u9009\u9879\u5185\uff08\u4e0d\u5305\u62ec`Cookie: `\uff09\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\uff0c \u5e76\u5c06\u5b83\u7c98\u8d34\u5728\u4f60\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684Cookie\u3002 Args: cookie (Union[str, None], optional): \u6d4f\u89c8\u5668\u6293\u5305\u5f97\u5230\u7684cookie. Defaults to None. \"\"\" super () . __init__ () # \u722c\u866b\u540d\u79f0\uff08\u4e0d\u662f\u8bf7\u6c42\u7684\uff0c\u53ea\u662f\u7528\u6765\u8868\u8bc6\uff09 self . spider_name = \"BaiduSpider\" # \u89e3\u6790Cookie if cookie is not None : if cookie . find ( \"__yjs_duid\" ) == - 1 : cookie += \"; __yjs_duid=1_\" + str ( hashlib . md5 () . hexdigest ()) + \"; \" else : _ = cookie . split ( \"__yjs_duid=\" ) __ = _ [ 1 ] . split ( \";\" , 1 )[ - 1 ] ___ = hashlib . md5 () cookie = _ [ 0 ] + \"__yjs_duid=1_\" + str ( ___ . hexdigest ()) + \"; \" + __ # \u8bbe\u7f6e\u8bf7\u6c42\u5934 self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\" , \"Referer\" : \"https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=2&ch=&tn=baiduhome_pg&bar=&wd=123&oq=123&rsv_pq=896f886f000184f4&rsv_t=fdd2CqgBgjaepxfhicpCfrqeWVSXu9DOQY5WyyWqQYmsKOC %2F l286S248elzxl%2BJhOKe2&rqlang=cn\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"Accept-Encoding\" : \"gzip, deflate, br\" , \"Accept-Language\" : \"en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\" , \"Sec-Fetch-Mode\" : \"navigate\" , \"Cookie\" : cookie , \"Connection\" : \"Keep-Alive\" , } self . parser = Parser () self . EMPTY = { \"results\" : [], \"pages\" : 0 } self . RESULTS_PER_PAGE = { \"web\" : 10 , \"pic\" : 20 , \"zhidao\" : 10 , \"news\" : 10 , \"jingyan\" : 10 , } search_baike ( self , query , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u767e\u79d1\u641c\u7d22\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a BaiduSpider () . search_baike ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : { [ 'title' : str , # \u767e\u79d1\u6807\u9898 'des' : str , # \u767e\u79d1\u7b80\u4ecb 'date' : str , # \u767e\u79d1\u6700\u540e\u66f4\u65b0\u65f6\u95f4 'url' : str # \u767e\u79d1\u94fe\u63a5 ], [ ... ], [ ... ], [ ... ] }, 'total' : int # \u641c\u7d22\u7ed3\u679c\u603b\u6570 } \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_baike ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd. required proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description BaikeResult dict: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u9875\u6570 Source code in baiduspider\\__init__.py def search_baike ( self , query : str , proxies : dict = None ) -> BaikeResult : \"\"\"\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u3002 - \u4f7f\u7528\u65b9\u6cd5\uff1a ```python BaiduSpider().search_baike('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': { [ 'title': str, # \u767e\u79d1\u6807\u9898 'des': str, # \u767e\u79d1\u7b80\u4ecb 'date': str, # \u767e\u79d1\u6700\u540e\u66f4\u65b0\u65f6\u95f4 'url': str # \u767e\u79d1\u94fe\u63a5 ], [ ... ], [ ... ], [ ... ] }, 'total': int # \u641c\u7d22\u7ed3\u679c\u603b\u6570 } ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_baike('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: dict: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u9875\u6570 \"\"\" error = None result = self . EMPTY try : url = \"https://baike.baidu.com/search?word= %s \" % quote ( query ) code = self . _get_response ( url , proxies ) result = self . parser . parse_baike ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return BaikeResult . _build_instance ( result [ \"results\" ], result [ \"total\" ]) search_jingyan ( self , query , pn = 1 , scope = 'all' , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u3002 \u4f8b\u5982\uff1a BaiduSpider () . search_jingyan ( '\u5173\u952e\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'title' : str , # \u7ecf\u9a8c\u6807\u9898 'url' : str , # \u7ecf\u9a8c\u94fe\u63a5 'des' : str , # \u7ecf\u9a8c\u7b80\u4ecb 'date' : str , # \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f 'category' : List [ str ], # \u7ecf\u9a8c\u5206\u7c7b 'votes' : int , # \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 'publisher' : { # dict, \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f 'name' : str , # \u7ecf\u9a8c\u53d1\u5e03\u8005\u7528\u6237\u540d 'url' : str # \u7ecf\u9a8c\u53d1\u5e03\u8005\u94fe\u63a5 }, 'is_original' : bool , # \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b 'is_outstanding' : bool # \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u9875\u6570 } \u5e26\u9875\u7801\u7684\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u7b5b\u9009\u7ecf\u9a8c\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e scope \u53c2\u6570\u6765\u8bbe\u5b9a\u7b5b\u9009\u8303\u56f4\u3002 scope \u53c2\u6570\u7684\u53ef\u9009\u503c\u4e3a\uff1a[\"all\", \"outstanding\", \"praise\", \"original\"]\u3002 \u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u5168\u90e8\u7ecf\u9a8c\u3001\u4f18\u79c0\u7ecf\u9a8c\u3001\u6700\u53d7\u597d\u8bc4\u548c\u539f\u521b\u7ecf\u9a8c\u3002\u4f8b\u5b50\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , scope = \"outstanding\" ) # \u4ec5\u663e\u793a\u4f18\u79c0\u7ecf\u9a8c \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 scope str \u7b5b\u9009\u8303\u56f4. Defaults to \"all\". 'all' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description JingyanResult JingyanResult: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u8ba1\u7684\u9875\u7801. Source code in baiduspider\\__init__.py def search_jingyan ( self , query : str , pn : int = 1 , scope : str = \"all\" , proxies : dict = None ) -> JingyanResult : \"\"\"\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u3002 - \u4f8b\u5982\uff1a ```python BaiduSpider().search_jingyan('\u5173\u952e\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'title': str, # \u7ecf\u9a8c\u6807\u9898 'url': str, # \u7ecf\u9a8c\u94fe\u63a5 'des': str, # \u7ecf\u9a8c\u7b80\u4ecb 'date': str, # \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f 'category': List[str], # \u7ecf\u9a8c\u5206\u7c7b 'votes': int, # \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 'publisher': { # dict, \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f 'name': str, # \u7ecf\u9a8c\u53d1\u5e03\u8005\u7528\u6237\u540d 'url': str # \u7ecf\u9a8c\u53d1\u5e03\u8005\u94fe\u63a5 }, 'is_original': bool, # \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b 'is_outstanding': bool # \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u9875\u6570 } ``` - \u5e26\u9875\u7801\u7684\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', pn=2) ``` - \u7b5b\u9009\u7ecf\u9a8c\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`scope`\u53c2\u6570\u6765\u8bbe\u5b9a\u7b5b\u9009\u8303\u56f4\u3002`scope`\u53c2\u6570\u7684\u53ef\u9009\u503c\u4e3a\uff1a[\"all\", \"outstanding\", \"praise\", \"original\"]\u3002 \u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u5168\u90e8\u7ecf\u9a8c\u3001\u4f18\u79c0\u7ecf\u9a8c\u3001\u6700\u53d7\u597d\u8bc4\u548c\u539f\u521b\u7ecf\u9a8c\u3002\u4f8b\u5b50\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', scope=\"outstanding\") # \u4ec5\u663e\u793a\u4f18\u79c0\u7ecf\u9a8c ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. scope (str, optional): \u7b5b\u9009\u8303\u56f4. Defaults to \"all\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: JingyanResult: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u8ba1\u7684\u9875\u7801. \"\"\" error = None result = self . EMPTY _ = [ \"all\" , \"outstanding\" , \"praise\" , \"original\" ] if _ . index ( scope ) > 0 : scope = _ . index ( scope ) else : scope = 0 try : url = \"https://jingyan.baidu.com/search?word= %s &pn= %d &lm= %d \" % ( quote ( query ), ( pn - 1 ) * 10 , scope , ) code = self . _get_response ( url , proxies ) result = self . parser . parse_jingyan ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"jingyan\" ]) return JingyanResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ]) search_news ( self , query , pn = 1 , sort_by = 'focus' , show = 'all' , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u3002 \u83b7\u53d6\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'author' : str , # \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 'date' : str , # \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 'des' : str , # \u8d44\u8baf\u7b80\u4ecb 'title' : str , # \u8d44\u8baf\u6807\u9898 'url' : str # \u8d44\u8baf\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u53d8\u5316\u800c\u53d8\u5316 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6392\u5e8f\u65b9\u5f0f\uff1a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\uff1a\u6309\u7126\u70b9\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\u548c\u6309\u65f6\u95f4\u6392\u5e8f\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e sort_by \u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\u3002 sort_by \u53c2\u6570\u53ea\u652f\u6301\u4e24\u79cd\u503c\uff1a focus \uff08\u6309\u7126\u70b9\u6392\u5e8f\uff0c\u9ed8\u8ba4\u503c\uff09\u548c time \uff08\u6309\u65f6\u95f4\u6392\u5e8f\uff09\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , sort_by = 'time' ) # \u6309\u65f6\u95f4\u6392\u5e8f \u7b5b\u9009\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e show \u53c2\u6570\u8bbe\u7f6e\u8981\u7b5b\u9009\u663e\u793a\u7684\u8d44\u8baf\u6765\u6e90\u3002\u76ee\u524d\u652f\u6301\u4e09\u79cd\u6765\u6e90\uff1a all \uff08\u5168\u90e8\u663e\u793a\uff0c\u9ed8\u8ba4\uff09\u3001 media \uff08\u5a92\u4f53\uff09 \u548c baijiahao \uff08\u767e\u5bb6\u53f7\uff09\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , show = 'media' ) # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\u7ed3\u679c \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u641c\u7d22query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 sort_by str \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f. Defaults to \"focus\". 'focus' show str \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f. Defaults to \"all\". 'all' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description NewsResult NewsResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c\u4e0e\u603b\u9875\u7801\u3002 Source code in baiduspider\\__init__.py def search_news ( self , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : dict = None , ) -> NewsResult : \"\"\"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u3002 - \u83b7\u53d6\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'author': str, # \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 'date': str, # \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 'des': str, # \u8d44\u8baf\u7b80\u4ecb 'title': str, # \u8d44\u8baf\u6807\u9898 'url': str # \u8d44\u8baf\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u53d8\u5316\u800c\u53d8\u5316 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', pn=2) ``` - \u6392\u5e8f\u65b9\u5f0f\uff1a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\uff1a\u6309\u7126\u70b9\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\u548c\u6309\u65f6\u95f4\u6392\u5e8f\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`sort_by`\u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\u3002`sort_by` \u53c2\u6570\u53ea\u652f\u6301\u4e24\u79cd\u503c\uff1a`focus`\uff08\u6309\u7126\u70b9\u6392\u5e8f\uff0c\u9ed8\u8ba4\u503c\uff09\u548c`time`\uff08\u6309\u65f6\u95f4\u6392\u5e8f\uff09\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', sort_by='time') # \u6309\u65f6\u95f4\u6392\u5e8f ``` - \u7b5b\u9009\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`show`\u53c2\u6570\u8bbe\u7f6e\u8981\u7b5b\u9009\u663e\u793a\u7684\u8d44\u8baf\u6765\u6e90\u3002\u76ee\u524d\u652f\u6301\u4e09\u79cd\u6765\u6e90\uff1a`all`\uff08\u5168\u90e8\u663e\u793a\uff0c\u9ed8\u8ba4\uff09\u3001`media`\uff08\u5a92\u4f53\uff09 \u548c`baijiahao`\uff08\u767e\u5bb6\u53f7\uff09\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', show='media') # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\u7ed3\u679c ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u641c\u7d22query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. sort_by (str, optional): \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f. Defaults to \"focus\". show (str, optional): \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f. Defaults to \"all\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: NewsResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c\u4e0e\u603b\u9875\u7801\u3002 \"\"\" error = None result = self . EMPTY try : if sort_by == \"time\" : sort_by = 4 else : sort_by = 1 if show == \"media\" : show = 1 elif show == \"baijiahao\" : show = 2 else : show = 0 url = ( \"https://www.baidu.com/s?tn=news&wd= %s &pn= %d &rtt= %d &medium= %d &cl=2\" % ( quote ( query ), ( pn - 1 ) * 10 , sort_by , show ) ) # \u6e90\u7801 code = self . _get_response ( url , proxies ) result = self . parser . parse_news ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"news\" ]) return NewsResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ]) search_pic ( self , query , pn = 1 , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u3002 \u5b9e\u4f8b\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'host' : str , # \u56fe\u7247\u6765\u6e90\u57df\u540d 'title' : str , # \u56fe\u7247\u6807\u9898 'url' : str , # \u56fe\u7247\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u603b\u8ba1\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684query required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description PicResult PicResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_pic ( self , query : str , pn : int = 1 , proxies : dict = None ) -> PicResult : \"\"\"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u3002 - \u5b9e\u4f8b\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'host': str, # \u56fe\u7247\u6765\u6e90\u57df\u540d 'title': str, # \u56fe\u7247\u6807\u9898 'url': str, # \u56fe\u7247\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u603b\u8ba1\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684query pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: PicResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY try : url = \"http://image.baidu.com/search/flip?tn=baiduimage&word= %s &pn= %d \" % ( quote ( query ), ( pn - 1 ) * 20 , ) content = self . _get_response ( url , proxies ) result = self . parser . parse_pic ( content ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"pic\" ]) return PicResult . _build_instance ( plain = result [ \"results\" ], pages = pages , total = result [ \"total\" ] ) search_video ( self , query , pn = 1 , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u89c6\u9891\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'img' : str , # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'time' : str , # \u89c6\u9891\u65f6\u957f 'title' : str , # \u89c6\u9891\u6807\u9898 'url' : str # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u56e0\u641c\u7d22\u9875\u6570\u6539\u53d8\u800c\u6539\u53d8 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description VideoResult VideoResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_video ( self , query : str , pn : int = 1 , proxies : dict = None ) -> VideoResult : \"\"\"\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'img': str, # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'time': str, # \u89c6\u9891\u65f6\u957f 'title': str, # \u89c6\u9891\u6807\u9898 'url': str # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u56e0\u641c\u7d22\u9875\u6570\u6539\u53d8\u800c\u6539\u53d8 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: VideoResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY try : url = ( \"https://www.baidu.com/sf/vsearch?pd=video&tn=vsearch&wd= %s &pn= %d &async=1\" % ( quote ( query ), ( pn - 1 ) * 10 ) ) # \u83b7\u53d6\u6e90\u7801 code = self . _get_response ( url , proxies ) result = self . parser . parse_video ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return VideoResult . _build_instance ( result [ \"results\" ]) search_web ( self , query , pn = 1 , exclude = [], time = None , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u3002 \u7b80\u5355\u641c\u7d22\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'result' : int , # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u6570, 'type' : 'total' # type\u7528\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u641c\u7d22\u7ed3\u679c }, { 'results' : [ str , # \u76f8\u5173\u641c\u7d22\u5efa\u8bae '...' , '...' , '...' , ... ], 'type' : 'related' }, { 'process' : str , # \u7b97\u6570\u8fc7\u7a0b 'result' : str , # \u8fd0\u7b97\u7ed3\u679c 'type' : 'calc' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6d89\u53ca\u8fd0\u7b97\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results' : [ { 'author' : str , # \u65b0\u95fb\u6765\u6e90 'time' : str , # \u65b0\u95fb\u53d1\u5e03\u65f6\u95f4 'title' : str , # \u65b0\u95fb\u6807\u9898 'url' : str , # \u65b0\u95fb\u94fe\u63a5 'des' : str , # \u65b0\u95fb\u7b80\u4ecb\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e3aNone }, { ... }, { ... }, { ... }, ... ], 'type' : 'news' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u65b0\u95fb\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results' : [ { 'cover' : str , # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'origin' : str , # \u89c6\u9891\u6765\u6e90 'length' : str , # \u89c6\u9891\u65f6\u957f 'title' : str , # \u89c6\u9891\u6807\u9898 'url' : str , # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'type' : 'video' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u89c6\u9891\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'cover' : str , # \u767e\u79d1\u5c01\u9762\u56fe\u7247/\u89c6\u9891\u94fe\u63a5 'cover-type' : str , # \u767e\u79d1\u5c01\u9762\u7c7b\u522b\uff0c\u56fe\u7247\u662fimage\uff0c\u89c6\u9891\u662fvideo 'des' : str , # \u767e\u79d1\u7b80\u4ecb 'title' : str , # \u767e\u79d1\u6807\u9898 'url' : str , # \u767e\u79d1\u94fe\u63a5 }, 'type' : 'baike' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u767e\u79d1\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'cover' : str , # \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'des' : str , # \u8d34\u5427\u7b80\u4ecb 'title' : str , # \u8d34\u5427\u6807\u9898 'url' : str , # \u8d34\u5427\u94fe\u63a5 'followers' : str , # \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a1\u4e07\uff09 'hot' : [{ # list, \u70ed\u95e8\u5e16\u5b50 'clicks' : str , # \u5e16\u5b50\u70b9\u51fb\u603b\u6570 'replies' : str , # \u5e16\u5b50\u56de\u590d\u603b\u6570 'title' : str , # \u5e16\u5b50\u6807\u9898 'url' : str , # \u5e16\u5b50\u94fe\u63a5 }], 'total' : str , # \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a17\u4e07\uff09' }, 'type' : 'tieba' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u8d34\u5427\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'blogs' : [{ # list, \u535a\u5ba2\u5217\u8868 'des' : str , # \u535a\u5ba2\u7b80\u4ecb\uff0c\u6ca1\u6709\u65f6\u4e3a`None` 'origin' : str , # \u535a\u5ba2\u6765\u6e90 'tags' : [ # list, \u535a\u5ba2\u6807\u7b7e str , # \u6807\u7b7e\u6587\u5b57 ], 'title' : str , # \u535a\u5ba2\u6807\u9898 'url' : str , # \u535a\u5ba2\u94fe\u63a5 }], 'title' : str , # \u535a\u5ba2\u641c\u7d22\u6807\u9898 'url' : str , # \u535a\u5ba2\u641c\u7d22\u94fe\u63a5 (https://kaifa.baidu.com) }, 'type' : 'blog' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u535a\u5ba2\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'title' : str , # \u4ed3\u5e93\u6807\u9898 'des' : str , # \u4ed3\u5e93\u7b80\u4ecb 'url' : str , # \u4ed3\u5e93\u94fe\u63a5 'star' : int , # \u4ed3\u5e93star\u6570 'fork' : int , # \u4ed3\u5e93fork\u6570 'watch' : int , # \u4ed3\u5e93watch\u6570 'license' : str , # \u4ed3\u5e93\u7248\u6743\u534f\u8bae 'lang' : str , # \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 'status' : str , # \u4ed3\u5e93\u72b6\u6001\u56fe\u8868\u94fe\u63a5 }, 'type' : 'gitee' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u4ee3\u7801\u4ed3\u5e93\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { { 'songs' : [{ # list, \u6b4c\u66f2\u4fe1\u606f 'album' : { # dict, \u6b4c\u66f2\u4e13\u8f91 'name' : str , # \u4e13\u8f91\u540d\u79f0 'url' : str , # \u4e13\u8f91\u94fe\u63a5 }, 'singer' : [{ # list, \u6b4c\u624b\u4fe1\u606f 'name' : str , # \u6b4c\u624b\u540d\u79f0 'url' : str , # \u6b4c\u624b\u94fe\u63a5 }], 'song' : { # dict, \u6b4c\u66f2\u4fe1\u606f 'copyright' : bool , # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 'duration' : datetime . time , # \u6b4c\u66f2\u65f6\u957f 'is_original' : bool , # \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 'labels' : List [ str ], # \u6b4c\u66f2\u6807\u7b7e 'name' : str , # \u6b4c\u66f2\u540d\u79f0 'other_sites: List[str], # \u6b4c\u66f2\u5728\u5176\u4ed6\u7f51\u7ad9\u53d1\u5e03\u7684\u94fe\u63a5 'poster' : str , # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 'pub_company' : str , # \u6b4c\u66f2\u53d1\u884c\u516c\u53f8\u540d\u79f0 'pub_date' : datetome . datetime , # \u6b4c\u66f2\u53d1\u884c\u65f6\u95f4 'site' : str , # \u6b4c\u66f2\u53d1\u5e03\u7f51\u7ad9\u540d\u79f0\uff08\u62fc\u97f3\uff09 'url' : str # \u6b4c\u66f2\u94fe\u63a5 } }], 'title' : str , # \u97f3\u4e50\u6807\u9898 'url' : str # \u97f3\u4e50\u94fe\u63a5 } }, 'type' : 'music' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u97f3\u4e50\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 } { 'des' : str , # \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb 'origin' : str , # \u641c\u7d22\u7ed3\u679c\u7684\u6765\u6e90\uff0c\u53ef\u80fd\u662f\u57df\u540d\uff0c\u4e5f\u53ef\u80fd\u662f\u540d\u79f0 'time' : str , # \u641c\u7d22\u7ed3\u679c\u7684\u53d1\u5e03\u65f6\u95f4 'title' : str , # \u641c\u7d22\u7ed3\u679c\u6807\u9898 'type' : 'result, # \u6b63\u7ecf\u7684\u641c\u7d22\u7ed3\u679c 'url' : str # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u7684\u53d8\u5316\u800c\u968f\u4e4b\u53d8\u5316 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6309\u9700\u89e3\u6790\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , exclude = [ '\u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868' ]) \u53ef\u9009\u503c\uff1a ['news', 'video', 'baike', 'tieba', 'blog', 'gitee', 'related', 'calc', 'music'] \uff0c \u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 \u5f53 exclude=['all'] \u65f6\uff0c\u5c06\u4ec5\u4fdd\u7559\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u548c\u641c\u7d22\u7ed3\u679c\u603b\u6570\u3002 \u5982\u679c all \u5728 exclude \u5217\u8868\u91cc\uff0c\u5219\u5c06\u5ffd\u7565\u5217\u8868\u4e2d\u7684\u5269\u4f59\u90e8\u4ef6\uff0c\u8fd4\u56de exclude=['all'] \u65f6\u7684\u7ed3\u679c\u3002 \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , time = ( \u5f00\u59cb\u65f6\u95f4 , \u7ed3\u675f\u65f6\u95f4 )) \u5176\u4e2d\uff0c\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u5747\u4e3adatetime.datetime\u7c7b\u578b\uff0c\u6216\u8005\u662f\u4f7f\u7528time.time()\u51fd\u6570\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002 time\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a ['day', 'week', 'month', 'year'] \u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001 \u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u5f53 time \u4e3a None \u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 exclude list \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Defaults to []. [] time Union[tuple, str] \u6309\u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. None proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WebResult WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_web ( self , query : str , pn : int = 1 , exclude : list = [], time : Union [ tuple , str , None ] = None , proxies : dict = None , ) -> WebResult : \"\"\"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u3002 - \u7b80\u5355\u641c\u7d22\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'result': int, # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u6570, 'type': 'total' # type\u7528\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u641c\u7d22\u7ed3\u679c }, { 'results': [ str, # \u76f8\u5173\u641c\u7d22\u5efa\u8bae '...', '...', '...', ... ], 'type': 'related' }, { 'process': str, # \u7b97\u6570\u8fc7\u7a0b 'result': str, # \u8fd0\u7b97\u7ed3\u679c 'type': 'calc' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6d89\u53ca\u8fd0\u7b97\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results': [ { 'author': str, # \u65b0\u95fb\u6765\u6e90 'time': str, # \u65b0\u95fb\u53d1\u5e03\u65f6\u95f4 'title': str, # \u65b0\u95fb\u6807\u9898 'url': str, # \u65b0\u95fb\u94fe\u63a5 'des': str, # \u65b0\u95fb\u7b80\u4ecb\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e3aNone }, { ... }, { ... }, { ... }, ... ], 'type': 'news' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u65b0\u95fb\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results': [ { 'cover': str, # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'origin': str, # \u89c6\u9891\u6765\u6e90 'length': str, # \u89c6\u9891\u65f6\u957f 'title': str, # \u89c6\u9891\u6807\u9898 'url': str, # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'type': 'video' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u89c6\u9891\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'cover': str, # \u767e\u79d1\u5c01\u9762\u56fe\u7247/\u89c6\u9891\u94fe\u63a5 'cover-type': str, # \u767e\u79d1\u5c01\u9762\u7c7b\u522b\uff0c\u56fe\u7247\u662fimage\uff0c\u89c6\u9891\u662fvideo 'des': str, # \u767e\u79d1\u7b80\u4ecb 'title': str, # \u767e\u79d1\u6807\u9898 'url': str, # \u767e\u79d1\u94fe\u63a5 }, 'type': 'baike' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u767e\u79d1\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'cover': str, # \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'des': str, # \u8d34\u5427\u7b80\u4ecb 'title': str, # \u8d34\u5427\u6807\u9898 'url': str, # \u8d34\u5427\u94fe\u63a5 'followers': str, # \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a1\u4e07\uff09 'hot': [{ # list, \u70ed\u95e8\u5e16\u5b50 'clicks': str, # \u5e16\u5b50\u70b9\u51fb\u603b\u6570 'replies': str, # \u5e16\u5b50\u56de\u590d\u603b\u6570 'title': str, # \u5e16\u5b50\u6807\u9898 'url': str, # \u5e16\u5b50\u94fe\u63a5 }], 'total': str, # \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a17\u4e07\uff09' }, 'type': 'tieba' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u8d34\u5427\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'blogs': [{ # list, \u535a\u5ba2\u5217\u8868 'des': str, # \u535a\u5ba2\u7b80\u4ecb\uff0c\u6ca1\u6709\u65f6\u4e3a`None` 'origin': str, # \u535a\u5ba2\u6765\u6e90 'tags': [ # list, \u535a\u5ba2\u6807\u7b7e str, # \u6807\u7b7e\u6587\u5b57 ], 'title': str, # \u535a\u5ba2\u6807\u9898 'url': str, # \u535a\u5ba2\u94fe\u63a5 }], 'title': str, # \u535a\u5ba2\u641c\u7d22\u6807\u9898 'url': str, # \u535a\u5ba2\u641c\u7d22\u94fe\u63a5 (https://kaifa.baidu.com) }, 'type': 'blog' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u535a\u5ba2\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'title': str, # \u4ed3\u5e93\u6807\u9898 'des': str, # \u4ed3\u5e93\u7b80\u4ecb 'url': str, # \u4ed3\u5e93\u94fe\u63a5 'star': int, # \u4ed3\u5e93star\u6570 'fork': int, # \u4ed3\u5e93fork\u6570 'watch': int, # \u4ed3\u5e93watch\u6570 'license': str, # \u4ed3\u5e93\u7248\u6743\u534f\u8bae 'lang': str, # \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 'status': str, # \u4ed3\u5e93\u72b6\u6001\u56fe\u8868\u94fe\u63a5 }, 'type': 'gitee' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u4ee3\u7801\u4ed3\u5e93\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { { 'songs': [{ # list, \u6b4c\u66f2\u4fe1\u606f 'album': { # dict, \u6b4c\u66f2\u4e13\u8f91 'name': str, # \u4e13\u8f91\u540d\u79f0 'url': str, # \u4e13\u8f91\u94fe\u63a5 }, 'singer': [{ # list, \u6b4c\u624b\u4fe1\u606f 'name': str, # \u6b4c\u624b\u540d\u79f0 'url': str, # \u6b4c\u624b\u94fe\u63a5 }], 'song': { # dict, \u6b4c\u66f2\u4fe1\u606f 'copyright': bool, # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 'duration': datetime.time, # \u6b4c\u66f2\u65f6\u957f 'is_original': bool, # \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 'labels': List[str], # \u6b4c\u66f2\u6807\u7b7e 'name': str, # \u6b4c\u66f2\u540d\u79f0 'other_sites: List[str], # \u6b4c\u66f2\u5728\u5176\u4ed6\u7f51\u7ad9\u53d1\u5e03\u7684\u94fe\u63a5 'poster': str, # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 'pub_company': str, # \u6b4c\u66f2\u53d1\u884c\u516c\u53f8\u540d\u79f0 'pub_date': datetome.datetime, # \u6b4c\u66f2\u53d1\u884c\u65f6\u95f4 'site': str, # \u6b4c\u66f2\u53d1\u5e03\u7f51\u7ad9\u540d\u79f0\uff08\u62fc\u97f3\uff09 'url': str # \u6b4c\u66f2\u94fe\u63a5 } }], 'title': str, # \u97f3\u4e50\u6807\u9898 'url': str # \u97f3\u4e50\u94fe\u63a5 } }, 'type': 'music' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u97f3\u4e50\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 } { 'des': str, # \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb 'origin': str, # \u641c\u7d22\u7ed3\u679c\u7684\u6765\u6e90\uff0c\u53ef\u80fd\u662f\u57df\u540d\uff0c\u4e5f\u53ef\u80fd\u662f\u540d\u79f0 'time': str, # \u641c\u7d22\u7ed3\u679c\u7684\u53d1\u5e03\u65f6\u95f4 'title': str, # \u641c\u7d22\u7ed3\u679c\u6807\u9898 'type': 'result, # \u6b63\u7ecf\u7684\u641c\u7d22\u7ed3\u679c 'url': str # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u7684\u53d8\u5316\u800c\u968f\u4e4b\u53d8\u5316 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', pn=2) ``` - \u6309\u9700\u89e3\u6790\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', exclude=['\u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868']) ``` \u53ef\u9009\u503c\uff1a`['news', 'video', 'baike', 'tieba', 'blog', 'gitee', 'related', 'calc', 'music']`\uff0c \u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 \u5f53`exclude=['all']`\u65f6\uff0c\u5c06\u4ec5\u4fdd\u7559\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u548c\u641c\u7d22\u7ed3\u679c\u603b\u6570\u3002 \u5982\u679c`all`\u5728`exclude`\u5217\u8868\u91cc\uff0c\u5219\u5c06\u5ffd\u7565\u5217\u8868\u4e2d\u7684\u5269\u4f59\u90e8\u4ef6\uff0c\u8fd4\u56de`exclude=['all']`\u65f6\u7684\u7ed3\u679c\u3002 - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', time=(\u5f00\u59cb\u65f6\u95f4, \u7ed3\u675f\u65f6\u95f4)) ``` \u5176\u4e2d\uff0c\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u5747\u4e3adatetime.datetime\u7c7b\u578b\uff0c\u6216\u8005\u662f\u4f7f\u7528time.time()\u51fd\u6570\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002 time\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a`['day', 'week', 'month', 'year']`\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001 \u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u5f53`time`\u4e3a`None`\u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. exclude (list, optional): \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Defaults to []. time (Union[tuple, str, None]): \u6309\u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY # \u6309\u9700\u89e3\u6790 if \"all\" in exclude : exclude = [ \"news\" , \"video\" , \"baike\" , \"tieba\" , \"blog\" , \"gitee\" , \"calc\" , \"related\" , \"music\" , ] # \u6309\u65f6\u95f4\u7b5b\u9009 if type ( time ) == str : to = datetime . datetime . now () from_ = datetime . datetime ( to . year , to . month , to . day , to . hour , to . minute , to . second , to . microsecond ) if time == \"day\" : from_ += datetime . timedelta ( days =- 1 ) elif time == \"week\" : from_ += datetime . timedelta ( days =- 7 ) elif time == \"month\" : from_ += datetime . timedelta ( days =- 31 ) elif time == \"year\" : from_ += datetime . timedelta ( days =- 365 ) elif type ( time ) == tuple or type ( time ) == list : from_ = time [ 0 ] to = time [ 1 ] else : to = from_ = None if type ( to ) == datetime . datetime and type ( from_ ) == datetime . datetime : FORMAT = \"%Y-%m- %d %H:%M:%S\" to = int ( time_lib . mktime ( time_lib . strptime ( to . strftime ( FORMAT ), FORMAT ))) from_ = int ( time_lib . mktime ( time_lib . strptime ( from_ . strftime ( FORMAT ), FORMAT )) ) try : text = quote ( query , \"utf-8\" ) url = \"https://www.baidu.com/s?wd= %s &pn= %d &inputT= %d \" % ( text , ( pn - 1 ) * 10 , random . randint ( 500 , 4000 ), ) if to is not None and from_ is not None : url += \"&gpc=\" + quote ( f \"stf= { from_ } , { to } |stftype=2\" ) # \u89e3\u6790Cookie cookie = self . headers [ \"Cookie\" ] if cookie is not None : if cookie . find ( \"__yjs_duid\" ) == - 1 : pass else : _ = cookie . split ( \"__yjs_duid=\" ) __ = _ [ 1 ] . split ( \";\" , 1 )[ - 1 ] ___ = hashlib . md5 () cookie = _ [ 0 ] + \"__yjs_duid=1_\" + str ( ___ . hexdigest ()) + __ self . headers [ \"Cookie\" ] = cookie content = self . _get_response ( url , proxies ) results = self . parser . parse_web ( content , exclude = exclude ) except Exception as err : error = err finally : self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) pages = self . _calc_pages ( results [ \"total\" ], self . RESULTS_PER_PAGE [ \"web\" ]) return WebResult . _build_instance ( plain = results [ \"results\" ], pages = pages , total = results [ \"total\" ] ) search_wenku ( self , query , pn = 1 , scope = 'all' , format = 'all' , time = 'all' , page_range = 'all' , sort_by = 'relation' , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u3002 \u8bf7\u6ce8\u610f\uff0c\u76ee\u524d\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u82e5\u62a5\u9519\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5148\u624b\u52a8\u6253\u5f00\u767e\u5ea6\u6587\u5e93\u641c\u7d22 \uff08 https://wenku.baidu.com/search?word=placeholder&lm=0&od=0&fr=top_home&ie=utf-8 \uff09 \u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1\u540e\u624d\u80fd\u6b63\u5e38\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'pub_date' : str , # \u6587\u6863\u53d1\u5e03\u65e5\u671f 'des' : str , # \u6587\u6863\u7b80\u4ecb 'downloads' : int , # \u6587\u6863\u4e0b\u8f7d\u91cf 'pages' : int , # \u6587\u6863\u9875\u6570 'title' : str , # \u6587\u6863\u6807\u9898 'type' : str , # \u6587\u6863\u683c\u5f0f\uff0c\u4e3a\u5168\u90e8\u5927\u5199\u5b57\u6bcd 'url' : str , # \u6587\u6863\u94fe\u63a5 'quality' : float , # \u6587\u6863\u8d28\u91cf\u5206 'uploader' : { # dict, \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f 'name' : str , # \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d 'url' : str # \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 }, 'is_vip' : bool # \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u7684\u9875\u6570 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u7b5b\u9009\u8303\u56f4\uff1a BaiduSpider\u652f\u6301\u4e94\u79cd\u7b5b\u9009\u8303\u56f4\uff1a\u5168\u90e8\u3001VIP\u4e13\u4eab\u3001VIP\u514d\u8d39\u3001\u514d\u8d39\u3001\u7cbe\u54c1\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 scope \u53c2\u6570\u6765\u5b9a\u4e49\u6b64\u6b21\u641c\u7d22 \u8303\u56f4\u3002 scope \u53c2\u6570\u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e0b\u5217\u4efb\u4e00\u4e00\u9879\uff1a['all', 'vip-only', 'vip-free', 'free', 'high-quality']\u3002 \u4ed6\u4eec\u7684\u542b\u4e49\u4e0e\u4e0a\u6587\u6240\u8ff0\u4e00\u81f4\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , scope = 'free' ) # \u4ec5\u663e\u793a\u514d\u8d39\u7684\u6587\u6863 \u82e5 scope \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u683c\u5f0f\u7b5b\u9009\uff1a BaiduSpider\u652f\u6301\u516d\u79cd\u683c\u5f0f\u7b5b\u9009\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e format \u53c2\u6570\u6765\u8bbe\u7f6e\u9700\u8981\u7b5b\u9009\u7684\u683c\u5f0f\u3002 format \u53c2\u6570\u53d6\u503c\u53ef\u4ee5\u662f\uff1a all \uff08\u5168\u90e8\uff09\u3001 doc \uff08DOC\u6587\u6863\uff09\u3001 ppt \uff08\u5e7b\u706f\u7247\u6587\u6863\uff09\u3001 txt \uff08\u7eaf\u6587\u672c\u6587\u6863\uff09\u3001 pdf \uff08PDF\u6587\u6863\uff09\u3001 xls \uff08Excel\u8868\u683c\u6587\u6863\uff09\u3002\u4f8b\u5982\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , format = 'ppt' ) # \u4ec5\u663e\u793a\u5e7b\u706f\u7247\u6587\u6863 \u82e5 format \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u767e\u5ea6\u6587\u79d1\u641c\u7d22\u7684\u6309\u65f6\u95f4\u7b5b\u9009\u3002 time \u53c2\u6570\u63a5\u53d7\u7684\u5408\u6cd5\u4f20\u53c2\u5982\u4e0b\uff1a['all', 'this-year', 'last-year', 'previous-years']\u3002\u4ed6\u4eec\u5206\u522b\u8868\u793a\u5168\u90e8\u3001\u4eca\u5e74\u3001\u53bb\u5e74\u548c\u524d\u5e74\u53ca\u4ee5\u524d\u3002\u793a\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , time = 'last-year' ) # \u4ec5\u663e\u793a\u53bb\u5e74\u4e0a\u4f20\u7684\u6587\u6863 \u82e5 time \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u6309\u9875\u6570\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u4f7f\u7528\u9875\u6570\u7b5b\u9009\u6587\u6863\uff0c\u53c2\u6570\u4e3a page_range \u3002 page_range \u53ef\u9009\u503c\u4e3a\uff1a['all', Tuple[start: int, end: int]]\u3002 \u5206\u522b\u8868\u793a\u5168\u90e8\u548cTuple[\u5f00\u59cb\u9875\u7801( int ), \u7ed3\u675f\u9875\u7801( int )]\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , page_range = ( 0 , 10 )) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a0 - 10\u9875\u7684\u6587\u6863 \u82e5 page_range \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\uff1a BaiduSpider\u63d0\u4f9b\u7531\u767e\u5ea6\u6587\u5e93\u5185\u7f6e\u7684\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e sort_by \u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\u6309\u76f8\u5173\u6027\u6392\u5e8f\u3002 sort_by \u53ef\u9009\u503c\u4e3a\uff1a ['relation', 'time', 'downloads', 'score']\uff0c\u5206\u522b\u8868\u793a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u6392\u5e8f\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , sort_by = 'downloads' ) # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f \u82e5 sort_by \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7684\u9875\u7801. Defaults to 1. 1 scope str \u6309\u8303\u56f4\u7b5b\u9009. Defaults to \"all\". 'all' format str \u6309\u683c\u5f0f\u7b5b\u9009. Defaults to \"all\". 'all' time str \u6309\u65f6\u95f4\u7b5b\u9009. Defaults to \"all\". 'all' page_range Union[Tuple[int], str] \u6309\u9875\u6570\u7b5b\u9009. Defaults to \"all\". 'all' sort_by str \u6392\u5e8f\u65b9\u5f0f. Defaults to \"relation\". 'relation' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WenkuResult WenkuResult: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u8ba1\u9875\u6570 Source code in baiduspider\\__init__.py def search_wenku ( self , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : dict = None , ) -> WenkuResult : \"\"\"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u3002 \u8bf7\u6ce8\u610f\uff0c\u76ee\u524d\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u82e5\u62a5\u9519\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5148\u624b\u52a8\u6253\u5f00\u767e\u5ea6\u6587\u5e93\u641c\u7d22 \uff08`https://wenku.baidu.com/search?word=placeholder&lm=0&od=0&fr=top_home&ie=utf-8`\uff09 \u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1\u540e\u624d\u80fd\u6b63\u5e38\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'pub_date': str, # \u6587\u6863\u53d1\u5e03\u65e5\u671f 'des': str, # \u6587\u6863\u7b80\u4ecb 'downloads': int, # \u6587\u6863\u4e0b\u8f7d\u91cf 'pages': int, # \u6587\u6863\u9875\u6570 'title': str, # \u6587\u6863\u6807\u9898 'type': str, # \u6587\u6863\u683c\u5f0f\uff0c\u4e3a\u5168\u90e8\u5927\u5199\u5b57\u6bcd 'url': str, # \u6587\u6863\u94fe\u63a5 'quality': float, # \u6587\u6863\u8d28\u91cf\u5206 'uploader': { # dict, \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f 'name': str, # \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d 'url': str # \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 }, 'is_vip': bool # \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u7684\u9875\u6570 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', pn=2) ``` - \u7b5b\u9009\u8303\u56f4\uff1a BaiduSpider\u652f\u6301\u4e94\u79cd\u7b5b\u9009\u8303\u56f4\uff1a\u5168\u90e8\u3001VIP\u4e13\u4eab\u3001VIP\u514d\u8d39\u3001\u514d\u8d39\u3001\u7cbe\u54c1\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528`scope`\u53c2\u6570\u6765\u5b9a\u4e49\u6b64\u6b21\u641c\u7d22 \u8303\u56f4\u3002`scope`\u53c2\u6570\u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e0b\u5217\u4efb\u4e00\u4e00\u9879\uff1a['all', 'vip-only', 'vip-free', 'free', 'high-quality']\u3002 \u4ed6\u4eec\u7684\u542b\u4e49\u4e0e\u4e0a\u6587\u6240\u8ff0\u4e00\u81f4\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', scope='free') # \u4ec5\u663e\u793a\u514d\u8d39\u7684\u6587\u6863 ``` \u82e5`scope`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u683c\u5f0f\u7b5b\u9009\uff1a BaiduSpider\u652f\u6301\u516d\u79cd\u683c\u5f0f\u7b5b\u9009\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`format`\u53c2\u6570\u6765\u8bbe\u7f6e\u9700\u8981\u7b5b\u9009\u7684\u683c\u5f0f\u3002`format`\u53c2\u6570\u53d6\u503c\u53ef\u4ee5\u662f\uff1a `all`\uff08\u5168\u90e8\uff09\u3001`doc`\uff08DOC\u6587\u6863\uff09\u3001`ppt`\uff08\u5e7b\u706f\u7247\u6587\u6863\uff09\u3001`txt`\uff08\u7eaf\u6587\u672c\u6587\u6863\uff09\u3001`pdf`\uff08PDF\u6587\u6863\uff09\u3001`xls` \uff08Excel\u8868\u683c\u6587\u6863\uff09\u3002\u4f8b\u5982\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', format='ppt') # \u4ec5\u663e\u793a\u5e7b\u706f\u7247\u6587\u6863 ``` \u82e5`format`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u767e\u5ea6\u6587\u79d1\u641c\u7d22\u7684\u6309\u65f6\u95f4\u7b5b\u9009\u3002`time`\u53c2\u6570\u63a5\u53d7\u7684\u5408\u6cd5\u4f20\u53c2\u5982\u4e0b\uff1a['all', 'this-year', 'last-year', 'previous-years']\u3002\u4ed6\u4eec\u5206\u522b\u8868\u793a\u5168\u90e8\u3001\u4eca\u5e74\u3001\u53bb\u5e74\u548c\u524d\u5e74\u53ca\u4ee5\u524d\u3002\u793a\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', time='last-year') # \u4ec5\u663e\u793a\u53bb\u5e74\u4e0a\u4f20\u7684\u6587\u6863 ``` \u82e5`time`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u6309\u9875\u6570\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u4f7f\u7528\u9875\u6570\u7b5b\u9009\u6587\u6863\uff0c\u53c2\u6570\u4e3a`page_range`\u3002`page_range`\u53ef\u9009\u503c\u4e3a\uff1a['all', Tuple[start: int, end: int]]\u3002 \u5206\u522b\u8868\u793a\u5168\u90e8\u548cTuple[\u5f00\u59cb\u9875\u7801(`int`), \u7ed3\u675f\u9875\u7801(`int`)]\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', page_range=(0, 10)) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a0 - 10\u9875\u7684\u6587\u6863 ``` \u82e5`page_range`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\uff1a BaiduSpider\u63d0\u4f9b\u7531\u767e\u5ea6\u6587\u5e93\u5185\u7f6e\u7684\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`sort_by`\u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\u6309\u76f8\u5173\u6027\u6392\u5e8f\u3002`sort_by`\u53ef\u9009\u503c\u4e3a\uff1a ['relation', 'time', 'downloads', 'score']\uff0c\u5206\u522b\u8868\u793a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u6392\u5e8f\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', sort_by='downloads') # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f ``` \u82e5`sort_by`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7684\u9875\u7801. Defaults to 1. scope (str, optional): \u6309\u8303\u56f4\u7b5b\u9009. Defaults to \"all\". format (str, optional): \u6309\u683c\u5f0f\u7b5b\u9009. Defaults to \"all\". time (str, optional): \u6309\u65f6\u95f4\u7b5b\u9009. Defaults to \"all\". page_range (Union[str, Tuple[int]]): \u6309\u9875\u6570\u7b5b\u9009. Defaults to \"all\". sort_by (str): \u6392\u5e8f\u65b9\u5f0f. Defaults to \"relation\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WenkuResult: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u8ba1\u9875\u6570 \"\"\" error = None result = self . EMPTY # \u8303\u56f4\u7b5b\u9009 _ = [ \"all\" , \"vip-only\" , \"vip\" , \"free\" , \"high-quality\" ] if _ . index ( scope ) > 0 : scope = _ . index ( scope ) else : scope = 0 # \u683c\u5f0f\u7b5b\u9009 _ = [ \"all\" , \"doc\" , \"pdf\" , \"ppt\" , \"xls\" , \"txt\" ] if _ . index ( format ) > 0 : format = _ . index ( format ) else : format = 0 # \u6309\u65f6\u95f4\u7b5b\u9009 _ = [ \"all\" , \"this-year\" , \"last-year\" , \"previous-years\" ] if _ . index ( time ) > 0 : time = _ . index ( time ) else : time = 0 # \u6309\u9875\u6570\u7b5b\u9009 if ( type ( page_range ) is tuple and len ( page_range ) == 2 and type ( page_range [ 0 ]) is int and type ( page_range [ 1 ]) is int ): pass else : page_range = - 1 # \u6392\u5e8f\u65b9\u5f0f _ = [ \"relation\" , \"time\" , \"downloads\" , \"score\" ] if _ . index ( sort_by ) > 0 : sort_by = _ . index ( sort_by ) else : sort_by = 0 try : url = ( \"https://wenku.baidu.com/gsearch/search/pcsearch?word= %s &pn= %d &fr=top_home&fd= %d &lm= %d &pt= %d &od= %d \" % ( quote ( query ), ( pn - 1 ) * 10 , scope , format , time , sort_by ) ) if page_range != - 1 : url += \"&pb= %d &pe= %d \" % ( page_range [ 0 ], page_range [ 1 ]) else : url += \"&pg=0\" code = self . _get_response ( url , proxies ) result = self . parser . parse_wenku ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return WenkuResult . _build_instance ( result [ \"results\" ], result [ \"pages\" ]) search_zhidao ( self , query , pn = 1 , time = None , proxies = None ) \u2693\ufe0e \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'count' : int , # \u56de\u7b54\u603b\u6570 'date' : str , # \u56de\u7b54\u53d1\u5e03\u65e5\u671f 'question' : str , # \u95ee\u9898\u7b80\u4ecb 'answer' : str , # \u56de\u7b54\u7b80\u4ecb 'agree' : int , # \u56de\u7b54\u8d5e\u540c\u6570 'answerer' : str , # \u56de\u7b54\u8005 'title' : str , # \u95ee\u9898\u6807\u9898 'url' : str # \u95ee\u9898\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , time = '\u65f6\u95f4\u8303\u56f4' ) \u5176\u4e2d\uff0ctime\u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a['week', 'month', 'year']\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001 \u4e00\u5e74\u5185\u3002\u5f53 time \u4e3a None \u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 time Optional[str] \u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. None proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description ZhidaoResult dict: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u9875\u7801 Source code in baiduspider\\__init__.py def search_zhidao ( self , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : dict = None , ) -> ZhidaoResult : \"\"\"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'count': int, # \u56de\u7b54\u603b\u6570 'date': str, # \u56de\u7b54\u53d1\u5e03\u65e5\u671f 'question': str, # \u95ee\u9898\u7b80\u4ecb 'answer': str, # \u56de\u7b54\u7b80\u4ecb 'agree': int, # \u56de\u7b54\u8d5e\u540c\u6570 'answerer': str, # \u56de\u7b54\u8005 'title': str, # \u95ee\u9898\u6807\u9898 'url': str # \u95ee\u9898\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', pn=2) ``` - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', time='\u65f6\u95f4\u8303\u56f4') ``` \u5176\u4e2d\uff0ctime\u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a['week', 'month', 'year']\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001 \u4e00\u5e74\u5185\u3002\u5f53`time`\u4e3a`None`\u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. time (Union[str, None], optional): \u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: dict: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u9875\u7801 \"\"\" error = None result = self . EMPTY _ = [ None , None , \"week\" , \"month\" , \"year\" ] if _ . index ( time ) > 0 : time = _ . index ( time ) else : time = 0 try : url = ( \"https://zhidao.baidu.com/search?lm=0&rn=10&fr=search&pn= %d &word= %s &date= %d \" % (( pn - 1 ) * 10 , quote ( query ), time ) ) code = self . _get_response ( url , proxies , \"gb2312\" ) # \u8f6c\u5316\u7f16\u7801 # source.encoding = \"gb2312\" # code = source.text result = self . parser . parse_zhidao ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"zhidao\" ]) return ZhidaoResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ])","title":"__init__.py"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__","text":"BaiduSpider\uff0c\u4e00\u4e2a\u722c\u53d6\u767e\u5ea6\u7684\u5229\u5668. :Author: Sam Zhang :Licence: GPL_V3 :GitHub: https://github.com/BaiduSpider/BaiduSpider","title":"__init__"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider","text":"\u722c\u53d6\u767e\u5ea6\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u652f\u6301\u767e\u5ea6\u641c\u7d22\uff0c\u767e\u5ea6\u56fe\u7247\uff0c\u767e\u5ea6\u77e5\u9053\uff0c\u767e\u5ea6\u89c6\u9891\uff0c\u767e\u5ea6\u8d44\u8baf\uff0c\u767e\u5ea6\u6587\u5e93\uff0c\u767e\u5ea6\u7ecf\u9a8c\u548c\u767e\u5ea6\u767e\u79d1\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea BaseSpider \u3002 BaiduSpider. search_web ( self : BaiduSpider , query : str , pn : int = 1 , exclude : list = [], time : Union [ tuple , str , None ] = None , proxies : dict = None ) -> WebResult : \u767e\u5ea6\u7f51\u9875\u641c\u7d22 BaiduSpider. search_pic ( self : BaiduSpider , query : str , pn : int = 1 , proxies : dict = None ) -> PicResult : \u767e\u5ea6\u56fe\u7247\u641c\u7d22 BaiduSpider. search_zhidao ( self : BaiduSpider , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : dict = None ) -> ZhidaoResult : \u767e\u5ea6\u77e5\u9053\u641c\u7d22 BaiduSpider. search_video ( self : BaiduSpider , query : str , pn : int = 1 , proxies : dict = None ) -> VideoResult : \u767e\u5ea6\u89c6\u9891\u641c\u7d22 BaiduSpider. search_news ( self : BaiduSpider , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : dict = None ) -> NewsResult : \u767e\u5ea6\u8d44\u8baf\u641c\u7d22 BaiduSpider. search_wenku ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : dict = None ) -> WenkuResult : \u767e\u5ea6\u6587\u5e93\u641c\u7d22 BaiduSpider. search_jingyan ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , proxies : dict = None ) -> JingyanResult : \u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22 BaiduSpider. search_baike ( self : BaiduSpider , query : str , proxies : dict = None ) : \u767e\u5ea6\u767e\u79d1\u641c\u7d22","title":"BaiduSpider"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.__init__","text":"\u521d\u59cb\u5316BaiduSpider. \u8bbe\u7f6eCookie\uff1a spider = BaiduSpider ( cookie = \"\u4f60\u7684cookie\" ) Cookie\u53ef\u4ee5\u88ab\u7528\u4e8e\u589e\u5f3a\u722c\u866b\u7684\u771f\u5b9e\u6027\uff0c\u5c3d\u53ef\u80fd\u4f7f\u767e\u5ea6\u51cf\u5c11\u5c01\u7981IP\u7684\u6700\u5927\u9650\u5236\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u4f60\u7684Cookie\uff0c\u8bf7\u6253\u5f00 https://www.baidu.com/s?wd=placeholder&pn=0 \uff0c\u5e76 \u6309F12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u7136\u540e\u5728\u5f00\u53d1\u8005\u5de5\u5177\u6700\u4e0a\u65b9\u7684\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u8fd9\u4e00\u9009\u9879\uff0c\u70b9\u51fb \u51fa\u73b0\u7684\u5217\u8868\u4e2d\u6700\u4e0a\u65b9\u7684\u4ee5 s?wd=placeholder \u5f00\u5934\u7684\u9009\u9879\uff0c\u5728\u51fa\u73b0\u7684\u8be6\u60c5\u4e2d\u627e\u5230 Request Headers \u4e00\u9879\uff0c\u7136\u540e\u5728\u5b83\u7684\u4e0b\u65b9\u627e\u5230 Cookie \uff0c\u5e76\u590d\u5236Cookie\u8fd9\u4e00\u9009\u9879\u5185\uff08\u4e0d\u5305\u62ec Cookie: \uff09\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\uff0c \u5e76\u5c06\u5b83\u7c98\u8d34\u5728\u4f60\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684Cookie\u3002 Parameters: Name Type Description Default cookie str \u6d4f\u89c8\u5668\u6293\u5305\u5f97\u5230\u7684cookie. Defaults to None. None Source code in baiduspider\\__init__.py def __init__ ( self , cookie : str = None ) -> None : \"\"\"\u521d\u59cb\u5316BaiduSpider. - \u8bbe\u7f6eCookie\uff1a ```python spider = BaiduSpider(cookie=\"\u4f60\u7684cookie\") ``` Cookie\u53ef\u4ee5\u88ab\u7528\u4e8e\u589e\u5f3a\u722c\u866b\u7684\u771f\u5b9e\u6027\uff0c\u5c3d\u53ef\u80fd\u4f7f\u767e\u5ea6\u51cf\u5c11\u5c01\u7981IP\u7684\u6700\u5927\u9650\u5236\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u4f60\u7684Cookie\uff0c\u8bf7\u6253\u5f00<https://www.baidu.com/s?wd=placeholder&pn=0>\uff0c\u5e76 \u6309F12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u7136\u540e\u5728\u5f00\u53d1\u8005\u5de5\u5177\u6700\u4e0a\u65b9\u7684\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u8fd9\u4e00\u9009\u9879\uff0c\u70b9\u51fb \u51fa\u73b0\u7684\u5217\u8868\u4e2d\u6700\u4e0a\u65b9\u7684\u4ee5`s?wd=placeholder`\u5f00\u5934\u7684\u9009\u9879\uff0c\u5728\u51fa\u73b0\u7684\u8be6\u60c5\u4e2d\u627e\u5230`Request Headers` \u4e00\u9879\uff0c\u7136\u540e\u5728\u5b83\u7684\u4e0b\u65b9\u627e\u5230`Cookie`\uff0c\u5e76\u590d\u5236Cookie\u8fd9\u4e00\u9009\u9879\u5185\uff08\u4e0d\u5305\u62ec`Cookie: `\uff09\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\uff0c \u5e76\u5c06\u5b83\u7c98\u8d34\u5728\u4f60\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684Cookie\u3002 Args: cookie (Union[str, None], optional): \u6d4f\u89c8\u5668\u6293\u5305\u5f97\u5230\u7684cookie. Defaults to None. \"\"\" super () . __init__ () # \u722c\u866b\u540d\u79f0\uff08\u4e0d\u662f\u8bf7\u6c42\u7684\uff0c\u53ea\u662f\u7528\u6765\u8868\u8bc6\uff09 self . spider_name = \"BaiduSpider\" # \u89e3\u6790Cookie if cookie is not None : if cookie . find ( \"__yjs_duid\" ) == - 1 : cookie += \"; __yjs_duid=1_\" + str ( hashlib . md5 () . hexdigest ()) + \"; \" else : _ = cookie . split ( \"__yjs_duid=\" ) __ = _ [ 1 ] . split ( \";\" , 1 )[ - 1 ] ___ = hashlib . md5 () cookie = _ [ 0 ] + \"__yjs_duid=1_\" + str ( ___ . hexdigest ()) + \"; \" + __ # \u8bbe\u7f6e\u8bf7\u6c42\u5934 self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\" , \"Referer\" : \"https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=2&ch=&tn=baiduhome_pg&bar=&wd=123&oq=123&rsv_pq=896f886f000184f4&rsv_t=fdd2CqgBgjaepxfhicpCfrqeWVSXu9DOQY5WyyWqQYmsKOC %2F l286S248elzxl%2BJhOKe2&rqlang=cn\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"Accept-Encoding\" : \"gzip, deflate, br\" , \"Accept-Language\" : \"en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\" , \"Sec-Fetch-Mode\" : \"navigate\" , \"Cookie\" : cookie , \"Connection\" : \"Keep-Alive\" , } self . parser = Parser () self . EMPTY = { \"results\" : [], \"pages\" : 0 } self . RESULTS_PER_PAGE = { \"web\" : 10 , \"pic\" : 20 , \"zhidao\" : 10 , \"news\" : 10 , \"jingyan\" : 10 , }","title":"__init__()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_baike","text":"\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a BaiduSpider () . search_baike ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : { [ 'title' : str , # \u767e\u79d1\u6807\u9898 'des' : str , # \u767e\u79d1\u7b80\u4ecb 'date' : str , # \u767e\u79d1\u6700\u540e\u66f4\u65b0\u65f6\u95f4 'url' : str # \u767e\u79d1\u94fe\u63a5 ], [ ... ], [ ... ], [ ... ] }, 'total' : int # \u641c\u7d22\u7ed3\u679c\u603b\u6570 } \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_baike ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd. required proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description BaikeResult dict: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u9875\u6570 Source code in baiduspider\\__init__.py def search_baike ( self , query : str , proxies : dict = None ) -> BaikeResult : \"\"\"\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u3002 - \u4f7f\u7528\u65b9\u6cd5\uff1a ```python BaiduSpider().search_baike('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': { [ 'title': str, # \u767e\u79d1\u6807\u9898 'des': str, # \u767e\u79d1\u7b80\u4ecb 'date': str, # \u767e\u79d1\u6700\u540e\u66f4\u65b0\u65f6\u95f4 'url': str # \u767e\u79d1\u94fe\u63a5 ], [ ... ], [ ... ], [ ... ] }, 'total': int # \u641c\u7d22\u7ed3\u679c\u603b\u6570 } ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_baike('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: dict: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u9875\u6570 \"\"\" error = None result = self . EMPTY try : url = \"https://baike.baidu.com/search?word= %s \" % quote ( query ) code = self . _get_response ( url , proxies ) result = self . parser . parse_baike ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return BaikeResult . _build_instance ( result [ \"results\" ], result [ \"total\" ])","title":"search_baike()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_jingyan","text":"\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u3002 \u4f8b\u5982\uff1a BaiduSpider () . search_jingyan ( '\u5173\u952e\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'title' : str , # \u7ecf\u9a8c\u6807\u9898 'url' : str , # \u7ecf\u9a8c\u94fe\u63a5 'des' : str , # \u7ecf\u9a8c\u7b80\u4ecb 'date' : str , # \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f 'category' : List [ str ], # \u7ecf\u9a8c\u5206\u7c7b 'votes' : int , # \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 'publisher' : { # dict, \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f 'name' : str , # \u7ecf\u9a8c\u53d1\u5e03\u8005\u7528\u6237\u540d 'url' : str # \u7ecf\u9a8c\u53d1\u5e03\u8005\u94fe\u63a5 }, 'is_original' : bool , # \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b 'is_outstanding' : bool # \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u9875\u6570 } \u5e26\u9875\u7801\u7684\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u7b5b\u9009\u7ecf\u9a8c\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e scope \u53c2\u6570\u6765\u8bbe\u5b9a\u7b5b\u9009\u8303\u56f4\u3002 scope \u53c2\u6570\u7684\u53ef\u9009\u503c\u4e3a\uff1a[\"all\", \"outstanding\", \"praise\", \"original\"]\u3002 \u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u5168\u90e8\u7ecf\u9a8c\u3001\u4f18\u79c0\u7ecf\u9a8c\u3001\u6700\u53d7\u597d\u8bc4\u548c\u539f\u521b\u7ecf\u9a8c\u3002\u4f8b\u5b50\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , scope = \"outstanding\" ) # \u4ec5\u663e\u793a\u4f18\u79c0\u7ecf\u9a8c \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_jingyan ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 scope str \u7b5b\u9009\u8303\u56f4. Defaults to \"all\". 'all' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description JingyanResult JingyanResult: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u8ba1\u7684\u9875\u7801. Source code in baiduspider\\__init__.py def search_jingyan ( self , query : str , pn : int = 1 , scope : str = \"all\" , proxies : dict = None ) -> JingyanResult : \"\"\"\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u3002 - \u4f8b\u5982\uff1a ```python BaiduSpider().search_jingyan('\u5173\u952e\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'title': str, # \u7ecf\u9a8c\u6807\u9898 'url': str, # \u7ecf\u9a8c\u94fe\u63a5 'des': str, # \u7ecf\u9a8c\u7b80\u4ecb 'date': str, # \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f 'category': List[str], # \u7ecf\u9a8c\u5206\u7c7b 'votes': int, # \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 'publisher': { # dict, \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f 'name': str, # \u7ecf\u9a8c\u53d1\u5e03\u8005\u7528\u6237\u540d 'url': str # \u7ecf\u9a8c\u53d1\u5e03\u8005\u94fe\u63a5 }, 'is_original': bool, # \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b 'is_outstanding': bool # \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u9875\u6570 } ``` - \u5e26\u9875\u7801\u7684\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', pn=2) ``` - \u7b5b\u9009\u7ecf\u9a8c\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`scope`\u53c2\u6570\u6765\u8bbe\u5b9a\u7b5b\u9009\u8303\u56f4\u3002`scope`\u53c2\u6570\u7684\u53ef\u9009\u503c\u4e3a\uff1a[\"all\", \"outstanding\", \"praise\", \"original\"]\u3002 \u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u5168\u90e8\u7ecf\u9a8c\u3001\u4f18\u79c0\u7ecf\u9a8c\u3001\u6700\u53d7\u597d\u8bc4\u548c\u539f\u521b\u7ecf\u9a8c\u3002\u4f8b\u5b50\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', scope=\"outstanding\") # \u4ec5\u663e\u793a\u4f18\u79c0\u7ecf\u9a8c ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_jingyan('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. scope (str, optional): \u7b5b\u9009\u8303\u56f4. Defaults to \"all\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: JingyanResult: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u8ba1\u7684\u9875\u7801. \"\"\" error = None result = self . EMPTY _ = [ \"all\" , \"outstanding\" , \"praise\" , \"original\" ] if _ . index ( scope ) > 0 : scope = _ . index ( scope ) else : scope = 0 try : url = \"https://jingyan.baidu.com/search?word= %s &pn= %d &lm= %d \" % ( quote ( query ), ( pn - 1 ) * 10 , scope , ) code = self . _get_response ( url , proxies ) result = self . parser . parse_jingyan ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"jingyan\" ]) return JingyanResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ])","title":"search_jingyan()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_news","text":"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u3002 \u83b7\u53d6\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'author' : str , # \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 'date' : str , # \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 'des' : str , # \u8d44\u8baf\u7b80\u4ecb 'title' : str , # \u8d44\u8baf\u6807\u9898 'url' : str # \u8d44\u8baf\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u53d8\u5316\u800c\u53d8\u5316 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6392\u5e8f\u65b9\u5f0f\uff1a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\uff1a\u6309\u7126\u70b9\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\u548c\u6309\u65f6\u95f4\u6392\u5e8f\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e sort_by \u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\u3002 sort_by \u53c2\u6570\u53ea\u652f\u6301\u4e24\u79cd\u503c\uff1a focus \uff08\u6309\u7126\u70b9\u6392\u5e8f\uff0c\u9ed8\u8ba4\u503c\uff09\u548c time \uff08\u6309\u65f6\u95f4\u6392\u5e8f\uff09\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , sort_by = 'time' ) # \u6309\u65f6\u95f4\u6392\u5e8f \u7b5b\u9009\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e show \u53c2\u6570\u8bbe\u7f6e\u8981\u7b5b\u9009\u663e\u793a\u7684\u8d44\u8baf\u6765\u6e90\u3002\u76ee\u524d\u652f\u6301\u4e09\u79cd\u6765\u6e90\uff1a all \uff08\u5168\u90e8\u663e\u793a\uff0c\u9ed8\u8ba4\uff09\u3001 media \uff08\u5a92\u4f53\uff09 \u548c baijiahao \uff08\u767e\u5bb6\u53f7\uff09\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , show = 'media' ) # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\u7ed3\u679c \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_news ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u641c\u7d22query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 sort_by str \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f. Defaults to \"focus\". 'focus' show str \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f. Defaults to \"all\". 'all' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description NewsResult NewsResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c\u4e0e\u603b\u9875\u7801\u3002 Source code in baiduspider\\__init__.py def search_news ( self , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : dict = None , ) -> NewsResult : \"\"\"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u3002 - \u83b7\u53d6\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'author': str, # \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 'date': str, # \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 'des': str, # \u8d44\u8baf\u7b80\u4ecb 'title': str, # \u8d44\u8baf\u6807\u9898 'url': str # \u8d44\u8baf\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u53d8\u5316\u800c\u53d8\u5316 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', pn=2) ``` - \u6392\u5e8f\u65b9\u5f0f\uff1a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\uff1a\u6309\u7126\u70b9\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\u548c\u6309\u65f6\u95f4\u6392\u5e8f\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`sort_by`\u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\u3002`sort_by` \u53c2\u6570\u53ea\u652f\u6301\u4e24\u79cd\u503c\uff1a`focus`\uff08\u6309\u7126\u70b9\u6392\u5e8f\uff0c\u9ed8\u8ba4\u503c\uff09\u548c`time`\uff08\u6309\u65f6\u95f4\u6392\u5e8f\uff09\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', sort_by='time') # \u6309\u65f6\u95f4\u6392\u5e8f ``` - \u7b5b\u9009\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`show`\u53c2\u6570\u8bbe\u7f6e\u8981\u7b5b\u9009\u663e\u793a\u7684\u8d44\u8baf\u6765\u6e90\u3002\u76ee\u524d\u652f\u6301\u4e09\u79cd\u6765\u6e90\uff1a`all`\uff08\u5168\u90e8\u663e\u793a\uff0c\u9ed8\u8ba4\uff09\u3001`media`\uff08\u5a92\u4f53\uff09 \u548c`baijiahao`\uff08\u767e\u5bb6\u53f7\uff09\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', show='media') # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\u7ed3\u679c ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_news('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u641c\u7d22query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. sort_by (str, optional): \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f. Defaults to \"focus\". show (str, optional): \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f. Defaults to \"all\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: NewsResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c\u4e0e\u603b\u9875\u7801\u3002 \"\"\" error = None result = self . EMPTY try : if sort_by == \"time\" : sort_by = 4 else : sort_by = 1 if show == \"media\" : show = 1 elif show == \"baijiahao\" : show = 2 else : show = 0 url = ( \"https://www.baidu.com/s?tn=news&wd= %s &pn= %d &rtt= %d &medium= %d &cl=2\" % ( quote ( query ), ( pn - 1 ) * 10 , sort_by , show ) ) # \u6e90\u7801 code = self . _get_response ( url , proxies ) result = self . parser . parse_news ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"news\" ]) return NewsResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ])","title":"search_news()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_pic","text":"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u3002 \u5b9e\u4f8b\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'host' : str , # \u56fe\u7247\u6765\u6e90\u57df\u540d 'title' : str , # \u56fe\u7247\u6807\u9898 'url' : str , # \u56fe\u7247\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u603b\u8ba1\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_pic ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684query required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description PicResult PicResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_pic ( self , query : str , pn : int = 1 , proxies : dict = None ) -> PicResult : \"\"\"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u3002 - \u5b9e\u4f8b\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'host': str, # \u56fe\u7247\u6765\u6e90\u57df\u540d 'title': str, # \u56fe\u7247\u6807\u9898 'url': str, # \u56fe\u7247\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u603b\u8ba1\u9875\u7801\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_pic('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684query pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: PicResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY try : url = \"http://image.baidu.com/search/flip?tn=baiduimage&word= %s &pn= %d \" % ( quote ( query ), ( pn - 1 ) * 20 , ) content = self . _get_response ( url , proxies ) result = self . parser . parse_pic ( content ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"pic\" ]) return PicResult . _build_instance ( plain = result [ \"results\" ], pages = pages , total = result [ \"total\" ] )","title":"search_pic()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_video","text":"\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'img' : str , # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'time' : str , # \u89c6\u9891\u65f6\u957f 'title' : str , # \u89c6\u9891\u6807\u9898 'url' : str # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u56e0\u641c\u7d22\u9875\u6570\u6539\u53d8\u800c\u6539\u53d8 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_video ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description VideoResult VideoResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_video ( self , query : str , pn : int = 1 , proxies : dict = None ) -> VideoResult : \"\"\"\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'img': str, # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'time': str, # \u89c6\u9891\u65f6\u957f 'title': str, # \u89c6\u9891\u6807\u9898 'url': str # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u56e0\u641c\u7d22\u9875\u6570\u6539\u53d8\u800c\u6539\u53d8 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_video('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: VideoResult: \u722c\u53d6\u7684\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY try : url = ( \"https://www.baidu.com/sf/vsearch?pd=video&tn=vsearch&wd= %s &pn= %d &async=1\" % ( quote ( query ), ( pn - 1 ) * 10 ) ) # \u83b7\u53d6\u6e90\u7801 code = self . _get_response ( url , proxies ) result = self . parser . parse_video ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return VideoResult . _build_instance ( result [ \"results\" ])","title":"search_video()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_web","text":"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u3002 \u7b80\u5355\u641c\u7d22\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'result' : int , # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u6570, 'type' : 'total' # type\u7528\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u641c\u7d22\u7ed3\u679c }, { 'results' : [ str , # \u76f8\u5173\u641c\u7d22\u5efa\u8bae '...' , '...' , '...' , ... ], 'type' : 'related' }, { 'process' : str , # \u7b97\u6570\u8fc7\u7a0b 'result' : str , # \u8fd0\u7b97\u7ed3\u679c 'type' : 'calc' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6d89\u53ca\u8fd0\u7b97\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results' : [ { 'author' : str , # \u65b0\u95fb\u6765\u6e90 'time' : str , # \u65b0\u95fb\u53d1\u5e03\u65f6\u95f4 'title' : str , # \u65b0\u95fb\u6807\u9898 'url' : str , # \u65b0\u95fb\u94fe\u63a5 'des' : str , # \u65b0\u95fb\u7b80\u4ecb\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e3aNone }, { ... }, { ... }, { ... }, ... ], 'type' : 'news' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u65b0\u95fb\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results' : [ { 'cover' : str , # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'origin' : str , # \u89c6\u9891\u6765\u6e90 'length' : str , # \u89c6\u9891\u65f6\u957f 'title' : str , # \u89c6\u9891\u6807\u9898 'url' : str , # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'type' : 'video' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u89c6\u9891\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'cover' : str , # \u767e\u79d1\u5c01\u9762\u56fe\u7247/\u89c6\u9891\u94fe\u63a5 'cover-type' : str , # \u767e\u79d1\u5c01\u9762\u7c7b\u522b\uff0c\u56fe\u7247\u662fimage\uff0c\u89c6\u9891\u662fvideo 'des' : str , # \u767e\u79d1\u7b80\u4ecb 'title' : str , # \u767e\u79d1\u6807\u9898 'url' : str , # \u767e\u79d1\u94fe\u63a5 }, 'type' : 'baike' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u767e\u79d1\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'cover' : str , # \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'des' : str , # \u8d34\u5427\u7b80\u4ecb 'title' : str , # \u8d34\u5427\u6807\u9898 'url' : str , # \u8d34\u5427\u94fe\u63a5 'followers' : str , # \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a1\u4e07\uff09 'hot' : [{ # list, \u70ed\u95e8\u5e16\u5b50 'clicks' : str , # \u5e16\u5b50\u70b9\u51fb\u603b\u6570 'replies' : str , # \u5e16\u5b50\u56de\u590d\u603b\u6570 'title' : str , # \u5e16\u5b50\u6807\u9898 'url' : str , # \u5e16\u5b50\u94fe\u63a5 }], 'total' : str , # \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a17\u4e07\uff09' }, 'type' : 'tieba' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u8d34\u5427\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'blogs' : [{ # list, \u535a\u5ba2\u5217\u8868 'des' : str , # \u535a\u5ba2\u7b80\u4ecb\uff0c\u6ca1\u6709\u65f6\u4e3a`None` 'origin' : str , # \u535a\u5ba2\u6765\u6e90 'tags' : [ # list, \u535a\u5ba2\u6807\u7b7e str , # \u6807\u7b7e\u6587\u5b57 ], 'title' : str , # \u535a\u5ba2\u6807\u9898 'url' : str , # \u535a\u5ba2\u94fe\u63a5 }], 'title' : str , # \u535a\u5ba2\u641c\u7d22\u6807\u9898 'url' : str , # \u535a\u5ba2\u641c\u7d22\u94fe\u63a5 (https://kaifa.baidu.com) }, 'type' : 'blog' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u535a\u5ba2\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { 'title' : str , # \u4ed3\u5e93\u6807\u9898 'des' : str , # \u4ed3\u5e93\u7b80\u4ecb 'url' : str , # \u4ed3\u5e93\u94fe\u63a5 'star' : int , # \u4ed3\u5e93star\u6570 'fork' : int , # \u4ed3\u5e93fork\u6570 'watch' : int , # \u4ed3\u5e93watch\u6570 'license' : str , # \u4ed3\u5e93\u7248\u6743\u534f\u8bae 'lang' : str , # \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 'status' : str , # \u4ed3\u5e93\u72b6\u6001\u56fe\u8868\u94fe\u63a5 }, 'type' : 'gitee' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u4ee3\u7801\u4ed3\u5e93\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result' : { { 'songs' : [{ # list, \u6b4c\u66f2\u4fe1\u606f 'album' : { # dict, \u6b4c\u66f2\u4e13\u8f91 'name' : str , # \u4e13\u8f91\u540d\u79f0 'url' : str , # \u4e13\u8f91\u94fe\u63a5 }, 'singer' : [{ # list, \u6b4c\u624b\u4fe1\u606f 'name' : str , # \u6b4c\u624b\u540d\u79f0 'url' : str , # \u6b4c\u624b\u94fe\u63a5 }], 'song' : { # dict, \u6b4c\u66f2\u4fe1\u606f 'copyright' : bool , # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 'duration' : datetime . time , # \u6b4c\u66f2\u65f6\u957f 'is_original' : bool , # \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 'labels' : List [ str ], # \u6b4c\u66f2\u6807\u7b7e 'name' : str , # \u6b4c\u66f2\u540d\u79f0 'other_sites: List[str], # \u6b4c\u66f2\u5728\u5176\u4ed6\u7f51\u7ad9\u53d1\u5e03\u7684\u94fe\u63a5 'poster' : str , # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 'pub_company' : str , # \u6b4c\u66f2\u53d1\u884c\u516c\u53f8\u540d\u79f0 'pub_date' : datetome . datetime , # \u6b4c\u66f2\u53d1\u884c\u65f6\u95f4 'site' : str , # \u6b4c\u66f2\u53d1\u5e03\u7f51\u7ad9\u540d\u79f0\uff08\u62fc\u97f3\uff09 'url' : str # \u6b4c\u66f2\u94fe\u63a5 } }], 'title' : str , # \u97f3\u4e50\u6807\u9898 'url' : str # \u97f3\u4e50\u94fe\u63a5 } }, 'type' : 'music' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u97f3\u4e50\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 } { 'des' : str , # \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb 'origin' : str , # \u641c\u7d22\u7ed3\u679c\u7684\u6765\u6e90\uff0c\u53ef\u80fd\u662f\u57df\u540d\uff0c\u4e5f\u53ef\u80fd\u662f\u540d\u79f0 'time' : str , # \u641c\u7d22\u7ed3\u679c\u7684\u53d1\u5e03\u65f6\u95f4 'title' : str , # \u641c\u7d22\u7ed3\u679c\u6807\u9898 'type' : 'result, # \u6b63\u7ecf\u7684\u641c\u7d22\u7ed3\u679c 'url' : str # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u7684\u53d8\u5316\u800c\u968f\u4e4b\u53d8\u5316 } \u5e26\u9875\u7801\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6309\u9700\u89e3\u6790\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , exclude = [ '\u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868' ]) \u53ef\u9009\u503c\uff1a ['news', 'video', 'baike', 'tieba', 'blog', 'gitee', 'related', 'calc', 'music'] \uff0c \u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 \u5f53 exclude=['all'] \u65f6\uff0c\u5c06\u4ec5\u4fdd\u7559\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u548c\u641c\u7d22\u7ed3\u679c\u603b\u6570\u3002 \u5982\u679c all \u5728 exclude \u5217\u8868\u91cc\uff0c\u5219\u5c06\u5ffd\u7565\u5217\u8868\u4e2d\u7684\u5269\u4f59\u90e8\u4ef6\uff0c\u8fd4\u56de exclude=['all'] \u65f6\u7684\u7ed3\u679c\u3002 \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , time = ( \u5f00\u59cb\u65f6\u95f4 , \u7ed3\u675f\u65f6\u95f4 )) \u5176\u4e2d\uff0c\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u5747\u4e3adatetime.datetime\u7c7b\u578b\uff0c\u6216\u8005\u662f\u4f7f\u7528time.time()\u51fd\u6570\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002 time\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a ['day', 'week', 'month', 'year'] \u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001 \u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u5f53 time \u4e3a None \u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_web ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 exclude list \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Defaults to []. [] time Union[tuple, str] \u6309\u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. None proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WebResult WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\__init__.py def search_web ( self , query : str , pn : int = 1 , exclude : list = [], time : Union [ tuple , str , None ] = None , proxies : dict = None , ) -> WebResult : \"\"\"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u3002 - \u7b80\u5355\u641c\u7d22\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'result': int, # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u6570, 'type': 'total' # type\u7528\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u641c\u7d22\u7ed3\u679c }, { 'results': [ str, # \u76f8\u5173\u641c\u7d22\u5efa\u8bae '...', '...', '...', ... ], 'type': 'related' }, { 'process': str, # \u7b97\u6570\u8fc7\u7a0b 'result': str, # \u8fd0\u7b97\u7ed3\u679c 'type': 'calc' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6d89\u53ca\u8fd0\u7b97\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results': [ { 'author': str, # \u65b0\u95fb\u6765\u6e90 'time': str, # \u65b0\u95fb\u53d1\u5e03\u65f6\u95f4 'title': str, # \u65b0\u95fb\u6807\u9898 'url': str, # \u65b0\u95fb\u94fe\u63a5 'des': str, # \u65b0\u95fb\u7b80\u4ecb\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e3aNone }, { ... }, { ... }, { ... }, ... ], 'type': 'news' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u65b0\u95fb\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'results': [ { 'cover': str, # \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'origin': str, # \u89c6\u9891\u6765\u6e90 'length': str, # \u89c6\u9891\u65f6\u957f 'title': str, # \u89c6\u9891\u6807\u9898 'url': str, # \u89c6\u9891\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'type': 'video' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u89c6\u9891\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'cover': str, # \u767e\u79d1\u5c01\u9762\u56fe\u7247/\u89c6\u9891\u94fe\u63a5 'cover-type': str, # \u767e\u79d1\u5c01\u9762\u7c7b\u522b\uff0c\u56fe\u7247\u662fimage\uff0c\u89c6\u9891\u662fvideo 'des': str, # \u767e\u79d1\u7b80\u4ecb 'title': str, # \u767e\u79d1\u6807\u9898 'url': str, # \u767e\u79d1\u94fe\u63a5 }, 'type': 'baike' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u767e\u79d1\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'cover': str, # \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 'des': str, # \u8d34\u5427\u7b80\u4ecb 'title': str, # \u8d34\u5427\u6807\u9898 'url': str, # \u8d34\u5427\u94fe\u63a5 'followers': str, # \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a1\u4e07\uff09 'hot': [{ # list, \u70ed\u95e8\u5e16\u5b50 'clicks': str, # \u5e16\u5b50\u70b9\u51fb\u603b\u6570 'replies': str, # \u5e16\u5b50\u56de\u590d\u603b\u6570 'title': str, # \u5e16\u5b50\u6807\u9898 'url': str, # \u5e16\u5b50\u94fe\u63a5 }], 'total': str, # \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff08\u53ef\u80fd\u6709\u6c49\u5b57\uff0c\u5982\uff1a17\u4e07\uff09' }, 'type': 'tieba' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u8d34\u5427\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'blogs': [{ # list, \u535a\u5ba2\u5217\u8868 'des': str, # \u535a\u5ba2\u7b80\u4ecb\uff0c\u6ca1\u6709\u65f6\u4e3a`None` 'origin': str, # \u535a\u5ba2\u6765\u6e90 'tags': [ # list, \u535a\u5ba2\u6807\u7b7e str, # \u6807\u7b7e\u6587\u5b57 ], 'title': str, # \u535a\u5ba2\u6807\u9898 'url': str, # \u535a\u5ba2\u94fe\u63a5 }], 'title': str, # \u535a\u5ba2\u641c\u7d22\u6807\u9898 'url': str, # \u535a\u5ba2\u641c\u7d22\u94fe\u63a5 (https://kaifa.baidu.com) }, 'type': 'blog' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u535a\u5ba2\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { 'title': str, # \u4ed3\u5e93\u6807\u9898 'des': str, # \u4ed3\u5e93\u7b80\u4ecb 'url': str, # \u4ed3\u5e93\u94fe\u63a5 'star': int, # \u4ed3\u5e93star\u6570 'fork': int, # \u4ed3\u5e93fork\u6570 'watch': int, # \u4ed3\u5e93watch\u6570 'license': str, # \u4ed3\u5e93\u7248\u6743\u534f\u8bae 'lang': str, # \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 'status': str, # \u4ed3\u5e93\u72b6\u6001\u56fe\u8868\u94fe\u63a5 }, 'type': 'gitee' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u4ee3\u7801\u4ed3\u5e93\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 }, { 'result': { { 'songs': [{ # list, \u6b4c\u66f2\u4fe1\u606f 'album': { # dict, \u6b4c\u66f2\u4e13\u8f91 'name': str, # \u4e13\u8f91\u540d\u79f0 'url': str, # \u4e13\u8f91\u94fe\u63a5 }, 'singer': [{ # list, \u6b4c\u624b\u4fe1\u606f 'name': str, # \u6b4c\u624b\u540d\u79f0 'url': str, # \u6b4c\u624b\u94fe\u63a5 }], 'song': { # dict, \u6b4c\u66f2\u4fe1\u606f 'copyright': bool, # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 'duration': datetime.time, # \u6b4c\u66f2\u65f6\u957f 'is_original': bool, # \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 'labels': List[str], # \u6b4c\u66f2\u6807\u7b7e 'name': str, # \u6b4c\u66f2\u540d\u79f0 'other_sites: List[str], # \u6b4c\u66f2\u5728\u5176\u4ed6\u7f51\u7ad9\u53d1\u5e03\u7684\u94fe\u63a5 'poster': str, # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 'pub_company': str, # \u6b4c\u66f2\u53d1\u884c\u516c\u53f8\u540d\u79f0 'pub_date': datetome.datetime, # \u6b4c\u66f2\u53d1\u884c\u65f6\u95f4 'site': str, # \u6b4c\u66f2\u53d1\u5e03\u7f51\u7ad9\u540d\u79f0\uff08\u62fc\u97f3\uff09 'url': str # \u6b4c\u66f2\u94fe\u63a5 } }], 'title': str, # \u97f3\u4e50\u6807\u9898 'url': str # \u97f3\u4e50\u94fe\u63a5 } }, 'type': 'music' # \u8fd9\u7c7b\u641c\u7d22\u7ed3\u679c\u4ec5\u4f1a\u5728\u641c\u7d22\u8bcd\u6709\u76f8\u5173\u97f3\u4e50\u65f6\u51fa\u73b0\uff0c\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u641c\u7d22\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\u7684 } { 'des': str, # \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb 'origin': str, # \u641c\u7d22\u7ed3\u679c\u7684\u6765\u6e90\uff0c\u53ef\u80fd\u662f\u57df\u540d\uff0c\u4e5f\u53ef\u80fd\u662f\u540d\u79f0 'time': str, # \u641c\u7d22\u7ed3\u679c\u7684\u53d1\u5e03\u65f6\u95f4 'title': str, # \u641c\u7d22\u7ed3\u679c\u6807\u9898 'type': 'result, # \u6b63\u7ecf\u7684\u641c\u7d22\u7ed3\u679c 'url': str # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f53\u524d\u9875\u6570\u7684\u53d8\u5316\u800c\u968f\u4e4b\u53d8\u5316 } ``` - \u5e26\u9875\u7801\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', pn=2) ``` - \u6309\u9700\u89e3\u6790\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', exclude=['\u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868']) ``` \u53ef\u9009\u503c\uff1a`['news', 'video', 'baike', 'tieba', 'blog', 'gitee', 'related', 'calc', 'music']`\uff0c \u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 \u5f53`exclude=['all']`\u65f6\uff0c\u5c06\u4ec5\u4fdd\u7559\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u548c\u641c\u7d22\u7ed3\u679c\u603b\u6570\u3002 \u5982\u679c`all`\u5728`exclude`\u5217\u8868\u91cc\uff0c\u5219\u5c06\u5ffd\u7565\u5217\u8868\u4e2d\u7684\u5269\u4f59\u90e8\u4ef6\uff0c\u8fd4\u56de`exclude=['all']`\u65f6\u7684\u7ed3\u679c\u3002 - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', time=(\u5f00\u59cb\u65f6\u95f4, \u7ed3\u675f\u65f6\u95f4)) ``` \u5176\u4e2d\uff0c\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u5747\u4e3adatetime.datetime\u7c7b\u578b\uff0c\u6216\u8005\u662f\u4f7f\u7528time.time()\u51fd\u6570\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002 time\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a`['day', 'week', 'month', 'year']`\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001 \u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u5f53`time`\u4e3a`None`\u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_web('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. exclude (list, optional): \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Defaults to []. time (Union[tuple, str, None]): \u6309\u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c \"\"\" error = None result = self . EMPTY # \u6309\u9700\u89e3\u6790 if \"all\" in exclude : exclude = [ \"news\" , \"video\" , \"baike\" , \"tieba\" , \"blog\" , \"gitee\" , \"calc\" , \"related\" , \"music\" , ] # \u6309\u65f6\u95f4\u7b5b\u9009 if type ( time ) == str : to = datetime . datetime . now () from_ = datetime . datetime ( to . year , to . month , to . day , to . hour , to . minute , to . second , to . microsecond ) if time == \"day\" : from_ += datetime . timedelta ( days =- 1 ) elif time == \"week\" : from_ += datetime . timedelta ( days =- 7 ) elif time == \"month\" : from_ += datetime . timedelta ( days =- 31 ) elif time == \"year\" : from_ += datetime . timedelta ( days =- 365 ) elif type ( time ) == tuple or type ( time ) == list : from_ = time [ 0 ] to = time [ 1 ] else : to = from_ = None if type ( to ) == datetime . datetime and type ( from_ ) == datetime . datetime : FORMAT = \"%Y-%m- %d %H:%M:%S\" to = int ( time_lib . mktime ( time_lib . strptime ( to . strftime ( FORMAT ), FORMAT ))) from_ = int ( time_lib . mktime ( time_lib . strptime ( from_ . strftime ( FORMAT ), FORMAT )) ) try : text = quote ( query , \"utf-8\" ) url = \"https://www.baidu.com/s?wd= %s &pn= %d &inputT= %d \" % ( text , ( pn - 1 ) * 10 , random . randint ( 500 , 4000 ), ) if to is not None and from_ is not None : url += \"&gpc=\" + quote ( f \"stf= { from_ } , { to } |stftype=2\" ) # \u89e3\u6790Cookie cookie = self . headers [ \"Cookie\" ] if cookie is not None : if cookie . find ( \"__yjs_duid\" ) == - 1 : pass else : _ = cookie . split ( \"__yjs_duid=\" ) __ = _ [ 1 ] . split ( \";\" , 1 )[ - 1 ] ___ = hashlib . md5 () cookie = _ [ 0 ] + \"__yjs_duid=1_\" + str ( ___ . hexdigest ()) + __ self . headers [ \"Cookie\" ] = cookie content = self . _get_response ( url , proxies ) results = self . parser . parse_web ( content , exclude = exclude ) except Exception as err : error = err finally : self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) pages = self . _calc_pages ( results [ \"total\" ], self . RESULTS_PER_PAGE [ \"web\" ]) return WebResult . _build_instance ( plain = results [ \"results\" ], pages = pages , total = results [ \"total\" ] )","title":"search_web()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_wenku","text":"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u3002 \u8bf7\u6ce8\u610f\uff0c\u76ee\u524d\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u82e5\u62a5\u9519\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5148\u624b\u52a8\u6253\u5f00\u767e\u5ea6\u6587\u5e93\u641c\u7d22 \uff08 https://wenku.baidu.com/search?word=placeholder&lm=0&od=0&fr=top_home&ie=utf-8 \uff09 \u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1\u540e\u624d\u80fd\u6b63\u5e38\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'pub_date' : str , # \u6587\u6863\u53d1\u5e03\u65e5\u671f 'des' : str , # \u6587\u6863\u7b80\u4ecb 'downloads' : int , # \u6587\u6863\u4e0b\u8f7d\u91cf 'pages' : int , # \u6587\u6863\u9875\u6570 'title' : str , # \u6587\u6863\u6807\u9898 'type' : str , # \u6587\u6863\u683c\u5f0f\uff0c\u4e3a\u5168\u90e8\u5927\u5199\u5b57\u6bcd 'url' : str , # \u6587\u6863\u94fe\u63a5 'quality' : float , # \u6587\u6863\u8d28\u91cf\u5206 'uploader' : { # dict, \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f 'name' : str , # \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d 'url' : str # \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 }, 'is_vip' : bool # \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u7684\u9875\u6570 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u7b5b\u9009\u8303\u56f4\uff1a BaiduSpider\u652f\u6301\u4e94\u79cd\u7b5b\u9009\u8303\u56f4\uff1a\u5168\u90e8\u3001VIP\u4e13\u4eab\u3001VIP\u514d\u8d39\u3001\u514d\u8d39\u3001\u7cbe\u54c1\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 scope \u53c2\u6570\u6765\u5b9a\u4e49\u6b64\u6b21\u641c\u7d22 \u8303\u56f4\u3002 scope \u53c2\u6570\u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e0b\u5217\u4efb\u4e00\u4e00\u9879\uff1a['all', 'vip-only', 'vip-free', 'free', 'high-quality']\u3002 \u4ed6\u4eec\u7684\u542b\u4e49\u4e0e\u4e0a\u6587\u6240\u8ff0\u4e00\u81f4\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , scope = 'free' ) # \u4ec5\u663e\u793a\u514d\u8d39\u7684\u6587\u6863 \u82e5 scope \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u683c\u5f0f\u7b5b\u9009\uff1a BaiduSpider\u652f\u6301\u516d\u79cd\u683c\u5f0f\u7b5b\u9009\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e format \u53c2\u6570\u6765\u8bbe\u7f6e\u9700\u8981\u7b5b\u9009\u7684\u683c\u5f0f\u3002 format \u53c2\u6570\u53d6\u503c\u53ef\u4ee5\u662f\uff1a all \uff08\u5168\u90e8\uff09\u3001 doc \uff08DOC\u6587\u6863\uff09\u3001 ppt \uff08\u5e7b\u706f\u7247\u6587\u6863\uff09\u3001 txt \uff08\u7eaf\u6587\u672c\u6587\u6863\uff09\u3001 pdf \uff08PDF\u6587\u6863\uff09\u3001 xls \uff08Excel\u8868\u683c\u6587\u6863\uff09\u3002\u4f8b\u5982\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , format = 'ppt' ) # \u4ec5\u663e\u793a\u5e7b\u706f\u7247\u6587\u6863 \u82e5 format \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u767e\u5ea6\u6587\u79d1\u641c\u7d22\u7684\u6309\u65f6\u95f4\u7b5b\u9009\u3002 time \u53c2\u6570\u63a5\u53d7\u7684\u5408\u6cd5\u4f20\u53c2\u5982\u4e0b\uff1a['all', 'this-year', 'last-year', 'previous-years']\u3002\u4ed6\u4eec\u5206\u522b\u8868\u793a\u5168\u90e8\u3001\u4eca\u5e74\u3001\u53bb\u5e74\u548c\u524d\u5e74\u53ca\u4ee5\u524d\u3002\u793a\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , time = 'last-year' ) # \u4ec5\u663e\u793a\u53bb\u5e74\u4e0a\u4f20\u7684\u6587\u6863 \u82e5 time \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u6309\u9875\u6570\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u4f7f\u7528\u9875\u6570\u7b5b\u9009\u6587\u6863\uff0c\u53c2\u6570\u4e3a page_range \u3002 page_range \u53ef\u9009\u503c\u4e3a\uff1a['all', Tuple[start: int, end: int]]\u3002 \u5206\u522b\u8868\u793a\u5168\u90e8\u548cTuple[\u5f00\u59cb\u9875\u7801( int ), \u7ed3\u675f\u9875\u7801( int )]\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , page_range = ( 0 , 10 )) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a0 - 10\u9875\u7684\u6587\u6863 \u82e5 page_range \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\uff1a BaiduSpider\u63d0\u4f9b\u7531\u767e\u5ea6\u6587\u5e93\u5185\u7f6e\u7684\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e sort_by \u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\u6309\u76f8\u5173\u6027\u6392\u5e8f\u3002 sort_by \u53ef\u9009\u503c\u4e3a\uff1a ['relation', 'time', 'downloads', 'score']\uff0c\u5206\u522b\u8868\u793a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u6392\u5e8f\u3002\u6837\u4f8b\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , sort_by = 'downloads' ) # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f \u82e5 sort_by \u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_wenku ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7684\u9875\u7801. Defaults to 1. 1 scope str \u6309\u8303\u56f4\u7b5b\u9009. Defaults to \"all\". 'all' format str \u6309\u683c\u5f0f\u7b5b\u9009. Defaults to \"all\". 'all' time str \u6309\u65f6\u95f4\u7b5b\u9009. Defaults to \"all\". 'all' page_range Union[Tuple[int], str] \u6309\u9875\u6570\u7b5b\u9009. Defaults to \"all\". 'all' sort_by str \u6392\u5e8f\u65b9\u5f0f. Defaults to \"relation\". 'relation' proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WenkuResult WenkuResult: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u8ba1\u9875\u6570 Source code in baiduspider\\__init__.py def search_wenku ( self , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : dict = None , ) -> WenkuResult : \"\"\"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u3002 \u8bf7\u6ce8\u610f\uff0c\u76ee\u524d\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u82e5\u62a5\u9519\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5148\u624b\u52a8\u6253\u5f00\u767e\u5ea6\u6587\u5e93\u641c\u7d22 \uff08`https://wenku.baidu.com/search?word=placeholder&lm=0&od=0&fr=top_home&ie=utf-8`\uff09 \u901a\u8fc7\u5b89\u5168\u9a8c\u8bc1\u540e\u624d\u80fd\u6b63\u5e38\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'pub_date': str, # \u6587\u6863\u53d1\u5e03\u65e5\u671f 'des': str, # \u6587\u6863\u7b80\u4ecb 'downloads': int, # \u6587\u6863\u4e0b\u8f7d\u91cf 'pages': int, # \u6587\u6863\u9875\u6570 'title': str, # \u6587\u6863\u6807\u9898 'type': str, # \u6587\u6863\u683c\u5f0f\uff0c\u4e3a\u5168\u90e8\u5927\u5199\u5b57\u6bcd 'url': str, # \u6587\u6863\u94fe\u63a5 'quality': float, # \u6587\u6863\u8d28\u91cf\u5206 'uploader': { # dict, \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f 'name': str, # \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d 'url': str # \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 }, 'is_vip': bool # \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u603b\u8ba1\u641c\u7d22\u7ed3\u679c\u7684\u9875\u6570 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', pn=2) ``` - \u7b5b\u9009\u8303\u56f4\uff1a BaiduSpider\u652f\u6301\u4e94\u79cd\u7b5b\u9009\u8303\u56f4\uff1a\u5168\u90e8\u3001VIP\u4e13\u4eab\u3001VIP\u514d\u8d39\u3001\u514d\u8d39\u3001\u7cbe\u54c1\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528`scope`\u53c2\u6570\u6765\u5b9a\u4e49\u6b64\u6b21\u641c\u7d22 \u8303\u56f4\u3002`scope`\u53c2\u6570\u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e0b\u5217\u4efb\u4e00\u4e00\u9879\uff1a['all', 'vip-only', 'vip-free', 'free', 'high-quality']\u3002 \u4ed6\u4eec\u7684\u542b\u4e49\u4e0e\u4e0a\u6587\u6240\u8ff0\u4e00\u81f4\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', scope='free') # \u4ec5\u663e\u793a\u514d\u8d39\u7684\u6587\u6863 ``` \u82e5`scope`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u683c\u5f0f\u7b5b\u9009\uff1a BaiduSpider\u652f\u6301\u516d\u79cd\u683c\u5f0f\u7b5b\u9009\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`format`\u53c2\u6570\u6765\u8bbe\u7f6e\u9700\u8981\u7b5b\u9009\u7684\u683c\u5f0f\u3002`format`\u53c2\u6570\u53d6\u503c\u53ef\u4ee5\u662f\uff1a `all`\uff08\u5168\u90e8\uff09\u3001`doc`\uff08DOC\u6587\u6863\uff09\u3001`ppt`\uff08\u5e7b\u706f\u7247\u6587\u6863\uff09\u3001`txt`\uff08\u7eaf\u6587\u672c\u6587\u6863\uff09\u3001`pdf`\uff08PDF\u6587\u6863\uff09\u3001`xls` \uff08Excel\u8868\u683c\u6587\u6863\uff09\u3002\u4f8b\u5982\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', format='ppt') # \u4ec5\u663e\u793a\u5e7b\u706f\u7247\u6587\u6863 ``` \u82e5`format`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u767e\u5ea6\u6587\u79d1\u641c\u7d22\u7684\u6309\u65f6\u95f4\u7b5b\u9009\u3002`time`\u53c2\u6570\u63a5\u53d7\u7684\u5408\u6cd5\u4f20\u53c2\u5982\u4e0b\uff1a['all', 'this-year', 'last-year', 'previous-years']\u3002\u4ed6\u4eec\u5206\u522b\u8868\u793a\u5168\u90e8\u3001\u4eca\u5e74\u3001\u53bb\u5e74\u548c\u524d\u5e74\u53ca\u4ee5\u524d\u3002\u793a\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', time='last-year') # \u4ec5\u663e\u793a\u53bb\u5e74\u4e0a\u4f20\u7684\u6587\u6863 ``` \u82e5`time`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u6309\u9875\u6570\u7b5b\u9009\uff1a BaiduSpider\u63d0\u4f9b\u4f7f\u7528\u9875\u6570\u7b5b\u9009\u6587\u6863\uff0c\u53c2\u6570\u4e3a`page_range`\u3002`page_range`\u53ef\u9009\u503c\u4e3a\uff1a['all', Tuple[start: int, end: int]]\u3002 \u5206\u522b\u8868\u793a\u5168\u90e8\u548cTuple[\u5f00\u59cb\u9875\u7801(`int`), \u7ed3\u675f\u9875\u7801(`int`)]\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', page_range=(0, 10)) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a0 - 10\u9875\u7684\u6587\u6863 ``` \u82e5`page_range`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\uff1a BaiduSpider\u63d0\u4f9b\u7531\u767e\u5ea6\u6587\u5e93\u5185\u7f6e\u7684\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`sort_by`\u53c2\u6570\u6765\u8bbe\u7f6e\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\u6309\u76f8\u5173\u6027\u6392\u5e8f\u3002`sort_by`\u53ef\u9009\u503c\u4e3a\uff1a ['relation', 'time', 'downloads', 'score']\uff0c\u5206\u522b\u8868\u793a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u6392\u5e8f\u3002\u6837\u4f8b\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', sort_by='downloads') # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f ``` \u82e5`sort_by`\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u5c06\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_wenku('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7684\u9875\u7801. Defaults to 1. scope (str, optional): \u6309\u8303\u56f4\u7b5b\u9009. Defaults to \"all\". format (str, optional): \u6309\u683c\u5f0f\u7b5b\u9009. Defaults to \"all\". time (str, optional): \u6309\u65f6\u95f4\u7b5b\u9009. Defaults to \"all\". page_range (Union[str, Tuple[int]]): \u6309\u9875\u6570\u7b5b\u9009. Defaults to \"all\". sort_by (str): \u6392\u5e8f\u65b9\u5f0f. Defaults to \"relation\". proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WenkuResult: \u641c\u7d22\u7ed3\u679c\u548c\u603b\u8ba1\u9875\u6570 \"\"\" error = None result = self . EMPTY # \u8303\u56f4\u7b5b\u9009 _ = [ \"all\" , \"vip-only\" , \"vip\" , \"free\" , \"high-quality\" ] if _ . index ( scope ) > 0 : scope = _ . index ( scope ) else : scope = 0 # \u683c\u5f0f\u7b5b\u9009 _ = [ \"all\" , \"doc\" , \"pdf\" , \"ppt\" , \"xls\" , \"txt\" ] if _ . index ( format ) > 0 : format = _ . index ( format ) else : format = 0 # \u6309\u65f6\u95f4\u7b5b\u9009 _ = [ \"all\" , \"this-year\" , \"last-year\" , \"previous-years\" ] if _ . index ( time ) > 0 : time = _ . index ( time ) else : time = 0 # \u6309\u9875\u6570\u7b5b\u9009 if ( type ( page_range ) is tuple and len ( page_range ) == 2 and type ( page_range [ 0 ]) is int and type ( page_range [ 1 ]) is int ): pass else : page_range = - 1 # \u6392\u5e8f\u65b9\u5f0f _ = [ \"relation\" , \"time\" , \"downloads\" , \"score\" ] if _ . index ( sort_by ) > 0 : sort_by = _ . index ( sort_by ) else : sort_by = 0 try : url = ( \"https://wenku.baidu.com/gsearch/search/pcsearch?word= %s &pn= %d &fr=top_home&fd= %d &lm= %d &pt= %d &od= %d \" % ( quote ( query ), ( pn - 1 ) * 10 , scope , format , time , sort_by ) ) if page_range != - 1 : url += \"&pb= %d &pe= %d \" % ( page_range [ 0 ], page_range [ 1 ]) else : url += \"&pg=0\" code = self . _get_response ( url , proxies ) result = self . parser . parse_wenku ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) return WenkuResult . _build_instance ( result [ \"results\" ], result [ \"pages\" ])","title":"search_wenku()"},{"location":"api/baiduspider/__init__.html#baiduspider.__init__.BaiduSpider.search_zhidao","text":"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u3002 \u666e\u901a\u641c\u7d22\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' ) plain \u8fd4\u56de\u503c\uff1a { 'results' : [ { 'count' : int , # \u56de\u7b54\u603b\u6570 'date' : str , # \u56de\u7b54\u53d1\u5e03\u65e5\u671f 'question' : str , # \u95ee\u9898\u7b80\u4ecb 'answer' : str , # \u56de\u7b54\u7b80\u4ecb 'agree' : int , # \u56de\u7b54\u8d5e\u540c\u6570 'answerer' : str , # \u56de\u7b54\u8005 'title' : str , # \u95ee\u9898\u6807\u9898 'url' : str # \u95ee\u9898\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages' : int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u6309\u65f6\u95f4\u7b5b\u9009\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , time = '\u65f6\u95f4\u8303\u56f4' ) \u5176\u4e2d\uff0ctime\u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a['week', 'month', 'year']\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001 \u4e00\u5e74\u5185\u3002\u5f53 time \u4e3a None \u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduSpider () . search_zhidao ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u641c\u7d22\u7684query required pn int \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. 1 time Optional[str] \u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. None proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description ZhidaoResult dict: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u9875\u7801 Source code in baiduspider\\__init__.py def search_zhidao ( self , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : dict = None , ) -> ZhidaoResult : \"\"\"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u3002 - \u666e\u901a\u641c\u7d22\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd') ``` `plain`\u8fd4\u56de\u503c\uff1a ```python { 'results': [ { 'count': int, # \u56de\u7b54\u603b\u6570 'date': str, # \u56de\u7b54\u53d1\u5e03\u65e5\u671f 'question': str, # \u95ee\u9898\u7b80\u4ecb 'answer': str, # \u56de\u7b54\u7b80\u4ecb 'agree': int, # \u56de\u7b54\u8d5e\u540c\u6570 'answerer': str, # \u56de\u7b54\u8005 'title': str, # \u95ee\u9898\u6807\u9898 'url': str # \u95ee\u9898\u94fe\u63a5 }, { ... }, { ... }, { ... }, ... ], 'pages': int # \u641c\u7d22\u7ed3\u679c\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u53d8\u5316 } ``` - \u5e26\u9875\u7801\u7684\u641c\u7d22\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', pn=2) ``` - \u6309\u65f6\u95f4\u7b5b\u9009\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', time='\u65f6\u95f4\u8303\u56f4') ``` \u5176\u4e2d\uff0ctime\u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a['week', 'month', 'year']\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001 \u4e00\u5e74\u5185\u3002\u5f53`time`\u4e3a`None`\u65f6\uff0cBaiduSpider\u5c06\u5c55\u793a\u5168\u90e8\u7ed3\u679c\uff0c\u5ffd\u7565\u7b5b\u9009\u3002 \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0cBaiduSpider\u4f1a\u5ffd\u7565\u6b64\u6b21\u7b5b\u9009\u3002 - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduSpider().search_zhidao('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u641c\u7d22\u7684query pn (int, optional): \u641c\u7d22\u7ed3\u679c\u7684\u9875\u7801. Defaults to 1. time (Union[str, None], optional): \u65f6\u95f4\u7b5b\u9009\u53c2\u6570. Defaults to None. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: dict: \u641c\u7d22\u7ed3\u679c\u4ee5\u53ca\u603b\u9875\u7801 \"\"\" error = None result = self . EMPTY _ = [ None , None , \"week\" , \"month\" , \"year\" ] if _ . index ( time ) > 0 : time = _ . index ( time ) else : time = 0 try : url = ( \"https://zhidao.baidu.com/search?lm=0&rn=10&fr=search&pn= %d &word= %s &date= %d \" % (( pn - 1 ) * 10 , quote ( query ), time ) ) code = self . _get_response ( url , proxies , \"gb2312\" ) # \u8f6c\u5316\u7f16\u7801 # source.encoding = \"gb2312\" # code = source.text result = self . parser . parse_zhidao ( code ) result = result if result is not None else self . EMPTY except Exception as err : error = err finally : if error : self . _handle_error ( error ) pages = self . _calc_pages ( result [ \"total\" ], self . RESULTS_PER_PAGE [ \"zhidao\" ]) return ZhidaoResult . _build_instance ( result [ \"results\" ], pages , result [ \"total\" ])","title":"search_zhidao()"},{"location":"api/baiduspider/_spider.html","text":"baiduspider._spider private \u2693\ufe0e BaseSpider \u2693\ufe0e __init__ ( self ) special \u2693\ufe0e \u6240\u6709\u722c\u866b\u7684\u57fa\u7c7b \u6b64\u7c7b\u5305\u62ec\u4e86\u5e38\u7528\u7684util\u548c\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff0c\u7ee7\u627f\u81ea object \u3002 Source code in baiduspider\\_spider.py def __init__ ( self ) -> None : \"\"\"\u6240\u6709\u722c\u866b\u7684\u57fa\u7c7b \u6b64\u7c7b\u5305\u62ec\u4e86\u5e38\u7528\u7684util\u548c\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff0c\u7ee7\u627f\u81ea`object`\u3002 \"\"\" super () . __init__ () self . spider_name = \"BaseSpider\" self . headers = {}","title":"_spider.py"},{"location":"api/baiduspider/_spider.html#baiduspider._spider","text":"","title":"_spider"},{"location":"api/baiduspider/_spider.html#baiduspider._spider.BaseSpider","text":"","title":"BaseSpider"},{"location":"api/baiduspider/_spider.html#baiduspider._spider.BaseSpider.__init__","text":"\u6240\u6709\u722c\u866b\u7684\u57fa\u7c7b \u6b64\u7c7b\u5305\u62ec\u4e86\u5e38\u7528\u7684util\u548c\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff0c\u7ee7\u627f\u81ea object \u3002 Source code in baiduspider\\_spider.py def __init__ ( self ) -> None : \"\"\"\u6240\u6709\u722c\u866b\u7684\u57fa\u7c7b \u6b64\u7c7b\u5305\u62ec\u4e86\u5e38\u7528\u7684util\u548c\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff0c\u7ee7\u627f\u81ea`object`\u3002 \"\"\" super () . __init__ () self . spider_name = \"BaseSpider\" self . headers = {}","title":"__init__()"},{"location":"api/baiduspider/util.html","text":"baiduspider.util \u2693\ufe0e handle_err ( func ) \u2693\ufe0e \u5904\u7406\u62a5\u9519 Source code in baiduspider\\util.py def handle_err ( func ): # pragma: no cover \"\"\"\u5904\u7406\u62a5\u9519\"\"\" @wraps ( func ) def wrapper ( * args , ** kwargs ): try : return func ( * args , ** kwargs ) except Exception as err : if bool ( int ( os . environ . get ( \"DEBUG\" , 0 ))): raise err func_name = ( func . __name__ . strip ( \"parse_\" ) . strip ( \"_block\" ) if \"block\" in func . __name__ else None ) if func_name is not None : print ( f \" \\033 [33mWARNING: An error occurred while parsing the { func_name } subcomponent of BaiduSpider. { inspect . stack ()[ 1 ][ 0 ] . f_code . co_name } , \" \"which is currently ignored. However, the rest of the parsing process is still being executed normally. \" \"This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment \" \"variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/\" \"BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \\033 [0m\" ) else : print ( f \" \\033 [33mWARNING: An error occurred while executing function BaiduSpider. { inspect . stack ()[ 1 ][ 0 ] . f_code . co_name } , \" \"which is currently ignored. However, the rest of the parsing process is still being executed normally. \" \"This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment \" \"variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/\" \"BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \\033 [0m\" ) return wrapper","title":"util.py"},{"location":"api/baiduspider/util.html#baiduspider.util","text":"","title":"util"},{"location":"api/baiduspider/util.html#baiduspider.util.handle_err","text":"\u5904\u7406\u62a5\u9519 Source code in baiduspider\\util.py def handle_err ( func ): # pragma: no cover \"\"\"\u5904\u7406\u62a5\u9519\"\"\" @wraps ( func ) def wrapper ( * args , ** kwargs ): try : return func ( * args , ** kwargs ) except Exception as err : if bool ( int ( os . environ . get ( \"DEBUG\" , 0 ))): raise err func_name = ( func . __name__ . strip ( \"parse_\" ) . strip ( \"_block\" ) if \"block\" in func . __name__ else None ) if func_name is not None : print ( f \" \\033 [33mWARNING: An error occurred while parsing the { func_name } subcomponent of BaiduSpider. { inspect . stack ()[ 1 ][ 0 ] . f_code . co_name } , \" \"which is currently ignored. However, the rest of the parsing process is still being executed normally. \" \"This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment \" \"variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/\" \"BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \\033 [0m\" ) else : print ( f \" \\033 [33mWARNING: An error occurred while executing function BaiduSpider. { inspect . stack ()[ 1 ][ 0 ] . f_code . co_name } , \" \"which is currently ignored. However, the rest of the parsing process is still being executed normally. \" \"This is most likely an inner parse failure of BaiduSpider. For more details, please set the environment \" \"variable `DEBUG` to `1` to see the error trace and open up a new issue at https://github.com/BaiduSpider/\" \"BaiduSpider/issues/new?assignees=&labels=bug%2C+help+wanted&template=bug_report.md&title=%5BBUG%5D. \\033 [0m\" ) return wrapper","title":"handle_err()"},{"location":"api/baiduspider/errors/__init__.html","text":"baiduspider.errors.__init__ special \u2693\ufe0e BaiduSpider\u81ea\u5b9a\u4e49\u9519\u8bef \u672c\u6587\u4ef6\u5b9a\u4e49\u4e86BaiduSpider\u7684\u81ea\u5b9a\u4e49\u9519\u8bef\uff0c\u5982 ParseError \uff0c UnknownError \u7b49\u3002 ParseError \u2693\ufe0e __init__ ( self , msg = '' , * args , ** kwargs ) special \u2693\ufe0e \u5206\u6790HTML\u7684\u81ea\u5b9a\u4e49\u9519\u8bef Parameters: Name Type Description Default msg str \u9519\u8bef\u4fe1\u606f. Defaults to ''. '' Source code in baiduspider\\errors\\__init__.py def __init__ ( self , msg : str = \"\" , * args , ** kwargs ) -> None : \"\"\"\u5206\u6790HTML\u7684\u81ea\u5b9a\u4e49\u9519\u8bef Args: msg (str, optional): \u9519\u8bef\u4fe1\u606f. Defaults to ''. \"\"\" super () . __init__ ( * args , ** kwargs ) self . msg = msg UnknownError \u2693\ufe0e __init__ ( self , msg = '' , * args , ** kwargs ) special \u2693\ufe0e \u672a\u77e5\u9519\u8bef Parameters: Name Type Description Default msg str \u9519\u8bef\u4fe1\u606f. Defaults to ''. '' Source code in baiduspider\\errors\\__init__.py def __init__ ( self , msg : str = \"\" , * args , ** kwargs ) -> None : \"\"\"\u672a\u77e5\u9519\u8bef Args: msg (str, optional): \u9519\u8bef\u4fe1\u606f. Defaults to ''. \"\"\" super () . __init__ ( * args , ** kwargs ) self . msg = msg","title":"__init__.py"},{"location":"api/baiduspider/errors/__init__.html#baiduspider.errors.__init__","text":"BaiduSpider\u81ea\u5b9a\u4e49\u9519\u8bef \u672c\u6587\u4ef6\u5b9a\u4e49\u4e86BaiduSpider\u7684\u81ea\u5b9a\u4e49\u9519\u8bef\uff0c\u5982 ParseError \uff0c UnknownError \u7b49\u3002","title":"__init__"},{"location":"api/baiduspider/errors/__init__.html#baiduspider.errors.__init__.ParseError","text":"","title":"ParseError"},{"location":"api/baiduspider/errors/__init__.html#baiduspider.errors.__init__.ParseError.__init__","text":"\u5206\u6790HTML\u7684\u81ea\u5b9a\u4e49\u9519\u8bef Parameters: Name Type Description Default msg str \u9519\u8bef\u4fe1\u606f. Defaults to ''. '' Source code in baiduspider\\errors\\__init__.py def __init__ ( self , msg : str = \"\" , * args , ** kwargs ) -> None : \"\"\"\u5206\u6790HTML\u7684\u81ea\u5b9a\u4e49\u9519\u8bef Args: msg (str, optional): \u9519\u8bef\u4fe1\u606f. Defaults to ''. \"\"\" super () . __init__ ( * args , ** kwargs ) self . msg = msg","title":"__init__()"},{"location":"api/baiduspider/errors/__init__.html#baiduspider.errors.__init__.UnknownError","text":"","title":"UnknownError"},{"location":"api/baiduspider/errors/__init__.html#baiduspider.errors.__init__.UnknownError.__init__","text":"\u672a\u77e5\u9519\u8bef Parameters: Name Type Description Default msg str \u9519\u8bef\u4fe1\u606f. Defaults to ''. '' Source code in baiduspider\\errors\\__init__.py def __init__ ( self , msg : str = \"\" , * args , ** kwargs ) -> None : \"\"\"\u672a\u77e5\u9519\u8bef Args: msg (str, optional): \u9519\u8bef\u4fe1\u606f. Defaults to ''. \"\"\" super () . __init__ ( * args , ** kwargs ) self . msg = msg","title":"__init__()"},{"location":"api/baiduspider/mobile/__init__.html","text":"baiduspider.mobile.__init__ special \u2693\ufe0e BaiduSpider\u79fb\u52a8\u7aef\u722c\u866b BaiduMobileSpider \u2693\ufe0e __init__ ( self ) special \u2693\ufe0e \u722c\u53d6\u767e\u5ea6\u79fb\u52a8\u7aef\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u4ec5\u652f\u6301\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u90e8\u5206\u5185\u5bb9\u722c\u53d6\uff0c\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea BaseSpider \u3002 BaiduMobileSpider. search_web(self: BaiduMobileSpider, query: str, pn: int = 1) -> WebResult : \u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22 Source code in baiduspider\\mobile\\__init__.py def __init__ ( self ) -> None : \"\"\"\u722c\u53d6\u767e\u5ea6\u79fb\u52a8\u7aef\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u4ec5\u652f\u6301\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u90e8\u5206\u5185\u5bb9\u722c\u53d6\uff0c\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea``BaseSpider``\u3002 BaiduMobileSpider.`search_web(self: BaiduMobileSpider, query: str, pn: int = 1) -> WebResult`: \u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22 \"\"\" super () . __init__ () # \u722c\u866b\u540d\u79f0\uff08\u4e0d\u662f\u8bf7\u6c42\u7684\uff0c\u53ea\u662f\u7528\u6765\u8868\u8bc6\uff09 self . spider_name = \"BaiduSpider\" # \u8bbe\u7f6e\u8bf7\u6c42\u5934 self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59\" , \"Referer\" : \"https://m.baidu.com\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"Accept-Encoding\" : \"gzip, deflate, br\" , \"Accept-Language\" : \"en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\" , } self . parser = MobileParser () self . EMPTY = { \"results\" : []} search_web ( self , query , pn = 1 , proxies = None ) \u2693\ufe0e \u641c\u7d22\u767e\u5ea6\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u3002 \u57fa\u672c\u4f7f\u7528\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' ) \u5e26\u9875\u7801\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WebResult WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\mobile\\__init__.py def search_web ( self , query : str , pn : int = 1 , proxies : dict = None ) -> WebResult : \"\"\"\u641c\u7d22\u767e\u5ea6\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u3002 - \u57fa\u672c\u4f7f\u7528\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd') ``` - \u5e26\u9875\u7801\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c \"\"\" error = None try : text = quote ( query , \"utf-8\" ) url = \"https://m.baidu.com/s?word= %s &pn= %d \" % ( text , (( pn - 1 ) * 10 )) content = self . _get_response ( url , proxies ) results = self . parser . parse_web ( content ) except Exception as err : error = err finally : self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) return WebResult . _build_instance ( results [ \"results\" ], query )","title":"__init__.py"},{"location":"api/baiduspider/mobile/__init__.html#baiduspider.mobile.__init__","text":"BaiduSpider\u79fb\u52a8\u7aef\u722c\u866b","title":"__init__"},{"location":"api/baiduspider/mobile/__init__.html#baiduspider.mobile.__init__.BaiduMobileSpider","text":"","title":"BaiduMobileSpider"},{"location":"api/baiduspider/mobile/__init__.html#baiduspider.mobile.__init__.BaiduMobileSpider.__init__","text":"\u722c\u53d6\u767e\u5ea6\u79fb\u52a8\u7aef\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u4ec5\u652f\u6301\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u90e8\u5206\u5185\u5bb9\u722c\u53d6\uff0c\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea BaseSpider \u3002 BaiduMobileSpider. search_web(self: BaiduMobileSpider, query: str, pn: int = 1) -> WebResult : \u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22 Source code in baiduspider\\mobile\\__init__.py def __init__ ( self ) -> None : \"\"\"\u722c\u53d6\u767e\u5ea6\u79fb\u52a8\u7aef\u7684\u641c\u7d22\u7ed3\u679c. \u672c\u7c7b\u7684\u6240\u6709\u6210\u5458\u65b9\u6cd5\u90fd\u9075\u5faa\u4e0b\u5217\u683c\u5f0f\uff1a { 'results': <\u4e00\u4e2a\u5217\u8868\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u5185\u90e8\u7684\u5b57\u5178\u4f1a\u56e0\u4e3a\u4e0d\u540c\u7684\u6210\u5458\u65b9\u6cd5\u800c\u6539\u53d8>, 'total': <\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u641c\u7d22\u7ed3\u679c\u7684\u6700\u5927\u9875\u6570\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u641c\u7d22\u7ed3\u679c\u9875\u7801\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u767e\u5ea6\u4e0d\u63d0\u4f9b\u603b\u5171\u7684\u641c\u7d22\u7ed3\u679c\u9875\u6570> } \u76ee\u524d\u4ec5\u652f\u6301\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u90e8\u5206\u5185\u5bb9\u722c\u53d6\uff0c\u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u65e0\u5e7f\u544a\u3002\u7ee7\u627f\u81ea``BaseSpider``\u3002 BaiduMobileSpider.`search_web(self: BaiduMobileSpider, query: str, pn: int = 1) -> WebResult`: \u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22 \"\"\" super () . __init__ () # \u722c\u866b\u540d\u79f0\uff08\u4e0d\u662f\u8bf7\u6c42\u7684\uff0c\u53ea\u662f\u7528\u6765\u8868\u8bc6\uff09 self . spider_name = \"BaiduSpider\" # \u8bbe\u7f6e\u8bf7\u6c42\u5934 self . headers = { \"User-Agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59\" , \"Referer\" : \"https://m.baidu.com\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" , \"Accept-Encoding\" : \"gzip, deflate, br\" , \"Accept-Language\" : \"en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\" , } self . parser = MobileParser () self . EMPTY = { \"results\" : []}","title":"__init__()"},{"location":"api/baiduspider/mobile/__init__.html#baiduspider.mobile.__init__.BaiduMobileSpider.search_web","text":"\u641c\u7d22\u767e\u5ea6\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u3002 \u57fa\u672c\u4f7f\u7528\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' ) \u5e26\u9875\u7801\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' , pn = 2 ) \u8bbe\u7f6e\u4ee3\u7406\uff1a BaiduMobileSpider () . search_web ( '\u641c\u7d22\u8bcd' , proxies = { \"http\" : \"http://xxx.xxx.xxx:xxxx\" , # HTTP\u4ee3\u7406 \"https\" : \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003 requests\u6587\u6863 \u3002 Parameters: Name Type Description Default query str \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. required pn int \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. 1 proxies dict \u4ee3\u7406\u914d\u7f6e. Defaults to None. None Returns: Type Description WebResult WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c Source code in baiduspider\\mobile\\__init__.py def search_web ( self , query : str , pn : int = 1 , proxies : dict = None ) -> WebResult : \"\"\"\u641c\u7d22\u767e\u5ea6\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u3002 - \u57fa\u672c\u4f7f\u7528\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd') ``` - \u5e26\u9875\u7801\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd', pn=2) ``` - \u8bbe\u7f6e\u4ee3\u7406\uff1a ```python BaiduMobileSpider().search_web('\u641c\u7d22\u8bcd', proxies={ \"http\": \"http://xxx.xxx.xxx:xxxx\", # HTTP\u4ee3\u7406 \"https\": \"https://xxx.xxx.xxx:xxxx\" # HTTPS\u4ee3\u7406 }) ``` \u8be6\u7ec6\u914d\u7f6e\u8bf7\u53c2\u8003[requests\u6587\u6863](https://docs.python-requests.org/zh_CN/latest/user/advanced.html?highlight=proxies#proxies)\u3002 Args: query (str): \u8981\u722c\u53d6\u7684\u641c\u7d22\u8bcd. pn (int, optional): \u722c\u53d6\u7684\u9875\u7801. Defaults to 1. proxies (Union[dict, None]): \u4ee3\u7406\u914d\u7f6e. Defaults to None. Returns: WebResult: \u722c\u53d6\u7684\u8fd4\u56de\u503c\u548c\u641c\u7d22\u7ed3\u679c \"\"\" error = None try : text = quote ( query , \"utf-8\" ) url = \"https://m.baidu.com/s?word= %s &pn= %d \" % ( text , (( pn - 1 ) * 10 )) content = self . _get_response ( url , proxies ) results = self . parser . parse_web ( content ) except Exception as err : error = err finally : self . _handle_error ( error , \"BaiduSpider\" , \"parse-web\" ) return WebResult . _build_instance ( results [ \"results\" ], query )","title":"search_web()"},{"location":"api/baiduspider/mobile/models/web.html","text":"baiduspider.mobile.models.web \u2693\ufe0e \u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 WebBaike \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 sections List[WebSection] \u641c\u7d22\u7ed3\u679c\u7ae0\u8282\u5217\u8868 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebKnowledge \u2693\ufe0e \u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebKnowledgeDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebKnowledgeDetail \u2693\ufe0e \u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb image str \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb image str \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebResult \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description video Union[WebVideo, None] \u89c6\u9891\u641c\u7d22\u7ed3\u679c short_video Union[WebShortVideo, None] \u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c baike Union[WebBaike, None] \u767e\u79d1\u641c\u7d22\u7ed3\u679c reyi Union[WebReyi, None] \u70ed\u8bae\u641c\u7d22\u7ed3\u679c knowledge Union[WebKnowledge, None] \u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c normal List[WebNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 video_normal List[WebVideoNormal] \u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u5217\u8868 query str \u641c\u7d22\u8bcd plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebReyi \u2693\ufe0e \u70ed\u8bae\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebReyiDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebReyiDetail \u2693\ufe0e \u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf comments int \u641c\u7d22\u7ed3\u679c\u8bc4\u8bba\u6570 des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb images List[str] \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u5217\u8868 likes int \u641c\u7d22\u7ed3\u679c\u559c\u6b22\u6570 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90\uff08\u4f5c\u8005\uff09 pub_time datetime.datetime \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u65f6\u95f4 site str \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u7ad9\u70b9 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebSection \u2693\ufe0e \u7ae0\u8282\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ae0\u8282\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description text str \u641c\u7d22\u7ed3\u679c\u6587\u5b57 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebShortVideo \u2693\ufe0e \u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebShortVideoDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebShortVideoDetail \u2693\ufe0e \u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf play_times int \u641c\u7d22\u7ed3\u679c\u64ad\u653e\u6b21\u6570 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideo \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebVideoDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 tags List[WebVideoTag] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideoDetail \u2693\ufe0e \u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf duration datetime.time \u641c\u7d22\u7ed3\u679c\u65f6\u957f labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 pub_time datetime.datetime \u641c\u7d22\u7ed3\u679c\u53d1\u8868\u65f6\u95f4 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 video_num int \u641c\u7d22\u7ed3\u679c\u201c\u5408\u96c6\u201d\u4e2d\u89c6\u9891\u6570\u91cf plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideoNormal \u2693\ufe0e \u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u94fe\u63a5 duration time \u641c\u7d22\u7ed3\u679c\u65f6\u957f info List[WebVideoNormalInfo] \u641c\u7d22\u7ed3\u679c\u4fe1\u606f\u5217\u8868 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90\uff08\u4f5c\u8005\uff09 labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 video_num int \u641c\u7d22\u7ed3\u679c\u89c6\u9891\u6570\u91cf plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideoNormalInfo \u2693\ufe0e \u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description data str \u641c\u7d22\u7ed3\u679c\u6570\u636e type str \u641c\u7d22\u7ed3\u679c\u7c7b\u578b plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideoTag \u2693\ufe0e \u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description text str \u6807\u7b7e\u6587\u5b57 url str \u6807\u7b7e\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"web.py"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web","text":"\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"web"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebBaike","text":"\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 sections List[WebSection] \u641c\u7d22\u7ed3\u679c\u7ae0\u8282\u5217\u8868 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebBaike"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebKnowledge","text":"\u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebKnowledgeDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebKnowledge"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebKnowledgeDetail","text":"\u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb image str \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebKnowledgeDetail"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb image str \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebNormal"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebResult","text":"\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description video Union[WebVideo, None] \u89c6\u9891\u641c\u7d22\u7ed3\u679c short_video Union[WebShortVideo, None] \u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c baike Union[WebBaike, None] \u767e\u79d1\u641c\u7d22\u7ed3\u679c reyi Union[WebReyi, None] \u70ed\u8bae\u641c\u7d22\u7ed3\u679c knowledge Union[WebKnowledge, None] \u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c normal List[WebNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 video_normal List[WebVideoNormal] \u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u5217\u8868 query str \u641c\u7d22\u8bcd plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebResult"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebReyi","text":"\u70ed\u8bae\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebReyiDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebReyi"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebReyiDetail","text":"\u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf comments int \u641c\u7d22\u7ed3\u679c\u8bc4\u8bba\u6570 des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb images List[str] \u641c\u7d22\u7ed3\u679c\u56fe\u7247\u5217\u8868 likes int \u641c\u7d22\u7ed3\u679c\u559c\u6b22\u6570 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90\uff08\u4f5c\u8005\uff09 pub_time datetime.datetime \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u65f6\u95f4 site str \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u7ad9\u70b9 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebReyiDetail"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebSection","text":"\u7ae0\u8282\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ae0\u8282\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description text str \u641c\u7d22\u7ed3\u679c\u6587\u5b57 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebSection"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebShortVideo","text":"\u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebShortVideoDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebShortVideo"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebShortVideoDetail","text":"\u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf play_times int \u641c\u7d22\u7ed3\u679c\u64ad\u653e\u6b21\u6570 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebShortVideoDetail"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebVideo","text":"\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WebVideoDetail] \u641c\u7d22\u7ed3\u679c\u8be6\u60c5\u5217\u8868 tags List[WebVideoTag] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideo"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebVideoDetail","text":"\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09 author_avatar str \u641c\u7d22\u7ed3\u679c\u4f5c\u8005\uff08\u6765\u6e90\uff09\u5934\u50cf duration datetime.time \u641c\u7d22\u7ed3\u679c\u65f6\u957f labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 pub_time datetime.datetime \u641c\u7d22\u7ed3\u679c\u53d1\u8868\u65f6\u95f4 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 video_num int \u641c\u7d22\u7ed3\u679c\u201c\u5408\u96c6\u201d\u4e2d\u89c6\u9891\u6570\u91cf plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideoDetail"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebVideoNormal","text":"\u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 poster str \u641c\u7d22\u7ed3\u679c\u6d77\u62a5\u94fe\u63a5 duration time \u641c\u7d22\u7ed3\u679c\u65f6\u957f info List[WebVideoNormalInfo] \u641c\u7d22\u7ed3\u679c\u4fe1\u606f\u5217\u8868 origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90\uff08\u4f5c\u8005\uff09 labels List[str] \u641c\u7d22\u7ed3\u679c\u6807\u7b7e\u5217\u8868 video_num int \u641c\u7d22\u7ed3\u679c\u89c6\u9891\u6570\u91cf plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideoNormal"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebVideoNormalInfo","text":"\u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description data str \u641c\u7d22\u7ed3\u679c\u6570\u636e type str \u641c\u7d22\u7ed3\u679c\u7c7b\u578b plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideoNormalInfo"},{"location":"api/baiduspider/mobile/models/web.html#baiduspider.mobile.models.web.WebVideoTag","text":"\u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description text str \u6807\u7b7e\u6587\u5b57 url str \u6807\u7b7e\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideoTag"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html","text":"baiduspider.mobile.models.typings.typings_web \u2693\ufe0e \u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 WebBaike \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebBaike \u7c7b\u3002 WebKnowledge \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebKnowledge \u7c7b\u3002 WebKnowledgeDetail \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebKnowledgeDetail \u7c7b\u3002 WebNormal \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebNormal \u7c7b\u3002 WebResult \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.Web \u7c7b\u3002 WebReyi \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u70ed\u8bae\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebReyi \u7c7b\u3002 WebReyiDetail \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebReyiDetail \u7c7b\u3002 WebSection \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u76ee\u5f55\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebSection \u7c7b\u3002 WebShortVideo \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebShortVideo \u7c7b\u3002 WebShortVideoDetail \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebShortVideoDetail \u7c7b\u3002 WebVideo \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideo \u7c7b\u3002 WebVideoDetail \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoDetail \u7c7b\u3002 WebVideoNormal \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoNormal \u7c7b\u3002 WebVideoNormalInfo \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoNormaInfo \u7c7b\u3002 WebVideoTag \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoTag \u7c7b\u3002","title":"typings_web.py"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web","text":"\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_web"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebBaike","text":"\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebBaike \u7c7b\u3002","title":"WebBaike"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebKnowledge","text":"\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebKnowledge \u7c7b\u3002","title":"WebKnowledge"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebKnowledgeDetail","text":"\u7f51\u9875\u641c\u7d22\u76f8\u5173\u77e5\u8bc6\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebKnowledgeDetail \u7c7b\u3002","title":"WebKnowledgeDetail"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebNormal","text":"\u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebNormal \u7c7b\u3002","title":"WebNormal"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebResult","text":"\u7f51\u9875\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.Web \u7c7b\u3002","title":"WebResult"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebReyi","text":"\u7f51\u9875\u641c\u7d22\u70ed\u8bae\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebReyi \u7c7b\u3002","title":"WebReyi"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebReyiDetail","text":"\u7f51\u9875\u641c\u7d22\u70ed\u8bae\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebReyiDetail \u7c7b\u3002","title":"WebReyiDetail"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebSection","text":"\u7f51\u9875\u641c\u7d22\u76ee\u5f55\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebSection \u7c7b\u3002","title":"WebSection"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebShortVideo","text":"\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebShortVideo \u7c7b\u3002","title":"WebShortVideo"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebShortVideoDetail","text":"\u7f51\u9875\u641c\u7d22\u77ed\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebShortVideoDetail \u7c7b\u3002","title":"WebShortVideoDetail"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebVideo","text":"\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideo \u7c7b\u3002","title":"WebVideo"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebVideoDetail","text":"\u7f51\u9875\u641c\u7d22\u89c6\u9891\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoDetail \u7c7b\u3002","title":"WebVideoDetail"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebVideoNormal","text":"\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoNormal \u7c7b\u3002","title":"WebVideoNormal"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebVideoNormalInfo","text":"\u7f51\u9875\u641c\u7d22\u666e\u901a\u89c6\u9891\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoNormaInfo \u7c7b\u3002","title":"WebVideoNormalInfo"},{"location":"api/baiduspider/mobile/models/typings/typings_web.html#baiduspider.mobile.models.typings.typings_web.WebVideoTag","text":"\u7f51\u9875\u641c\u7d22\u89c6\u9891\u6807\u7b7e\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.mobile.models.web.WebVideoTag \u7c7b\u3002","title":"WebVideoTag"},{"location":"api/baiduspider/mobile/parser/__init__.html","text":"baiduspider.mobile.parser.__init__ special \u2693\ufe0e MobileParser \u2693\ufe0e __init__ ( self ) special \u2693\ufe0e \u767e\u5ea6\u79fb\u52a8\u7aef\u641c\u7d22\u89e3\u6790\u5668 Source code in baiduspider\\mobile\\parser\\__init__.py def __init__ ( self ) -> None : \"\"\"\u767e\u5ea6\u79fb\u52a8\u7aef\u641c\u7d22\u89e3\u6790\u5668\"\"\" super () . __init__ () self . webSubParser = WebSubParser () self . WEB_NORMAL = \"1599\" self . WEB_VIDEO_NORMAL = \"1508\" self . WEB_VIDEO = \"4295\" self . WEB_SHORT_VIDEO = \"4660\" self . WEB_BAIKE = \"1547\" self . WEB_REYI = \"201\" self . WEB_KNOWLEDGE = \"28339\" parse_web ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\mobile\\parser\\__init__.py @handle_err def parse_web ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" soup = BeautifulSoup ( content , \"html.parser\" ) res_normal_container = soup . findAll ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_NORMAL ) res_normal = [] for res in res_normal_container : _ = res . find ( \"div\" , class_ = \"c-result-content\" ) . find ( \"article\" ) header = _ . find ( \"header\" ) # \u6807\u7b7e labels = [] # \u6807\u9898 title = header . find ( \"h3\" ) . find ( \"span\" , class_ = \"c-title-text\" ) . text # \u94fe\u63a5 try : url = _ [ \"rl-link-href\" ] except : url = header . find ( \"a\" )[ \"href\" ] __ = header . find ( \"h3\" ) . find ( \"span\" , class_ = \"c-text-public\" ) # \u201c\u5b98\u65b9\u201d\u6807\u7b7e if __ is not None : labels . append ( __ . text ) section = _ . find ( \"section\" ) . find ( \"section\" ) _ = section . find ( \"div\" , role = \"text\" ) # \uff08\u66f4\u65b0\uff09\u65e5\u671f try : date_ = _ . find ( \"span\" , class_ = \"c-color-gray\" ) . text date = date_ . replace ( \"\u5e74\" , \"-\" ) . replace ( \"\u6708\" , \"-\" ) . replace ( \"\u65e5\" , \"\" ) except : date = None __ = res . find ( \"section\" ) . find ( \"div\" , class_ = \"c-flexbox\" ) ___ = __ . find ( \"span\" , class_ = \"c-text-box\" ) # \u70ed\u5ea6\u6807\u7b7e if ___ is not None : labels . append ( ___ . text ) # \u7b80\u4ecb des = \"\" # \u53ef\u80fd\u6709\u591a\u4e2a`span`\u6807\u7b7e\uff0c\u9700\u8981\u4f9d\u6b21\u89e3\u6790 for s in _ . findAll ( \"div\" ): for t in s . findAll ( \"span\" ): try : if t . find ( \"span\" ) . text : continue except : pass try : if \"c-color-gray\" in t [ \"class\" ]: continue except : pass des += t . text des += \" \\n \" des = des . strip ( \" \\n \" ) # \u6765\u6e90\uff08\u4f5c\u8005\uff09 origin = __ . find ( \"span\" , class_ = \"c-footer-showurl\" ) if origin is not None : origin = origin . text else : origin = __ . find ( \"div\" , class_ = \"single-text\" ) if origin is not None : origin = origin . text _ = section . find ( \"a\" ) . find ( \"div\" , role = \"img\" ) # \u5c01\u9762\u56fe\u7247\u94fe\u63a5 if _ is not None and _ . find ( \"img\" ) is not None : try : img = _ . find ( \"img\" )[ \"data-lazy-src\" ] . replace ( \"&amp;\" , \"&\" ) except : img = _ . find ( \"img\" )[ \"src\" ] . replace ( \"&amp;\" , \"&\" ) else : img = None section_container = res . findAll ( \"a\" , class_ = \"c-slink\" ) sections = [] for section in section_container : text = section . text url = section [ \"href\" ] sections . append ({ \"text\" : text , \"url\" : url }) res_normal . append ( { \"title\" : title , \"url\" : url , \"labels\" : labels , \"date\" : date , \"des\" : des , \"origin\" : origin , \"img\" : img , \"sections\" : sections , \"type\" : \"result\" , } ) res_video_normal_container = soup . findAll ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_VIDEO_NORMAL ) res_video_normal = [] for res in res_video_normal_container : title = res . find ( \"span\" , class_ = \"c-title-text\" ) . text url = res . find ( \"article\" )[ \"rl-link-href\" ] . replace ( \"&amp;\" , \"&\" ) poster = res . find ( \"img\" , class_ = \"c-img-img\" )[ \"src\" ] duration = res . find ( \"div\" , class_ = \"c-img-info-br\" ) . text video_num = None if \"\u4e2a\" in duration : video_num = int ( duration . strip ( \"\u4e2a\u89c6\u9891\" )) duration = None info_container = res . findAll ( \"a\" , class_ = \"c-blocka\" )[ - 1 ] . findAll ( class_ = \"c-color\" ) info = [] for i in info_container : if i . text . startswith ( \"\u4f5c\u8005\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u4f5c\u8005\uff1a\" ) . strip (), \"type\" : \"author\" }) elif i . text . startswith ( \"\u7b80\u4ecb\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u7b80\u4ecb\uff1a\" ) . strip (), \"type\" : \"des\" }) elif i . text . startswith ( \"\u65f6\u95f4\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u65f6\u95f4\uff1a\" ) . strip (), \"type\" : \"time\" }) elif i . text . startswith ( \"\u64ad\u653e\uff1a\" ): info . append ( { \"data\" : self . _reformat_big_num ( i . text . strip ( \"\u64ad\u653e\uff1a\" ) . strip ( \"\u6b21\u64ad\u653e\" ) . strip () ), \"type\" : \"play_times\" , } ) else : info . append ({ \"data\" : i . text . strip (), \"type\" : \"unknown\" }) labels = [] _ = res . find ( \"div\" , class_ = \"c-img-radius-tl\" ) __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( self . _format ( __ . text )) _ = res . find ( \"div\" , class_ = \"c-source-new\" ) origin = _ . find ( \"div\" , class_ = \"single-text\" ) . text __ = res . find ( \"section\" ) . find ( \"div\" , class_ = \"c-flexbox\" ) ___ = __ . find ( \"span\" , class_ = \"c-text-box\" ) # \u70ed\u5ea6\u6807\u7b7e if ___ is not None : labels . append ( ___ . text ) res_video_normal . append ( { \"title\" : title , \"url\" : url , \"poster\" : poster , \"duration\" : duration , \"info\" : info , \"origin\" : origin , \"labels\" : labels , \"video_num\" : video_num , \"type\" : \"video_normal\" , } ) # \u9884\u5904\u7406\u89c6\u9891\u5b50\u5757 video = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_VIDEO ) video = self . webSubParser . parse_video_block ( video ) # \u9884\u5904\u7406\u77ed\u89c6\u9891\u5b50\u5757 short_video = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_SHORT_VIDEO ) short_video = self . webSubParser . parse_short_video_block ( short_video ) # \u9884\u5904\u7406\u767e\u79d1\u5b50\u5757 baike = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_BAIKE ) baike = self . webSubParser . parse_baike_block ( baike ) # \u9884\u5904\u7406\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 knowledge = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_KNOWLEDGE ) knowledge = self . webSubParser . parse_knowledge_block ( knowledge ) pre_results = [] # \u9884\u5904\u7406\u70ed\u8bae\u5b50\u5757 reyi = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_REYI ) reyi = self . webSubParser . parse_reyi_block ( reyi ) # \u52a0\u8f7d\u89c6\u9891\u5b50\u5757 if video : pre_results . append ( dict ( results = video [ \"results\" ], tags = video [ \"tags\" ], type = \"video\" ) ) # \u52a0\u8f7d\u77ed\u89c6\u9891\u5b50\u5757 if short_video : pre_results . append ( dict ( results = short_video [ \"results\" ], total = short_video [ \"total\" ], type = \"short_video\" , ) ) # \u52a0\u8f7d\u767e\u79d1\u5b50\u5757 if baike : pre_results . append ( dict ( result = baike [ \"result\" ], type = \"baike\" )) # \u52a0\u8f7d\u70ed\u8bae\u5b50\u5757 if reyi : pre_results . append ( dict ( results = reyi [ \"results\" ], url = reyi [ \"url\" ], total = reyi [ \"total\" ], type = \"reyi\" , ) ) # \u52a0\u8f7d\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 if knowledge : pre_results . append ( dict ( results = knowledge [ \"results\" ], title = knowledge [ \"title\" ], type = \"knowledge\" , ) ) results = pre_results results . extend ( res_normal ) results . extend ( res_video_normal ) return { \"results\" : results }","title":"__init__.py"},{"location":"api/baiduspider/mobile/parser/__init__.html#baiduspider.mobile.parser.__init__","text":"","title":"__init__"},{"location":"api/baiduspider/mobile/parser/__init__.html#baiduspider.mobile.parser.__init__.MobileParser","text":"","title":"MobileParser"},{"location":"api/baiduspider/mobile/parser/__init__.html#baiduspider.mobile.parser.__init__.MobileParser.__init__","text":"\u767e\u5ea6\u79fb\u52a8\u7aef\u641c\u7d22\u89e3\u6790\u5668 Source code in baiduspider\\mobile\\parser\\__init__.py def __init__ ( self ) -> None : \"\"\"\u767e\u5ea6\u79fb\u52a8\u7aef\u641c\u7d22\u89e3\u6790\u5668\"\"\" super () . __init__ () self . webSubParser = WebSubParser () self . WEB_NORMAL = \"1599\" self . WEB_VIDEO_NORMAL = \"1508\" self . WEB_VIDEO = \"4295\" self . WEB_SHORT_VIDEO = \"4660\" self . WEB_BAIKE = \"1547\" self . WEB_REYI = \"201\" self . WEB_KNOWLEDGE = \"28339\"","title":"__init__()"},{"location":"api/baiduspider/mobile/parser/__init__.html#baiduspider.mobile.parser.__init__.MobileParser.parse_web","text":"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\mobile\\parser\\__init__.py @handle_err def parse_web ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" soup = BeautifulSoup ( content , \"html.parser\" ) res_normal_container = soup . findAll ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_NORMAL ) res_normal = [] for res in res_normal_container : _ = res . find ( \"div\" , class_ = \"c-result-content\" ) . find ( \"article\" ) header = _ . find ( \"header\" ) # \u6807\u7b7e labels = [] # \u6807\u9898 title = header . find ( \"h3\" ) . find ( \"span\" , class_ = \"c-title-text\" ) . text # \u94fe\u63a5 try : url = _ [ \"rl-link-href\" ] except : url = header . find ( \"a\" )[ \"href\" ] __ = header . find ( \"h3\" ) . find ( \"span\" , class_ = \"c-text-public\" ) # \u201c\u5b98\u65b9\u201d\u6807\u7b7e if __ is not None : labels . append ( __ . text ) section = _ . find ( \"section\" ) . find ( \"section\" ) _ = section . find ( \"div\" , role = \"text\" ) # \uff08\u66f4\u65b0\uff09\u65e5\u671f try : date_ = _ . find ( \"span\" , class_ = \"c-color-gray\" ) . text date = date_ . replace ( \"\u5e74\" , \"-\" ) . replace ( \"\u6708\" , \"-\" ) . replace ( \"\u65e5\" , \"\" ) except : date = None __ = res . find ( \"section\" ) . find ( \"div\" , class_ = \"c-flexbox\" ) ___ = __ . find ( \"span\" , class_ = \"c-text-box\" ) # \u70ed\u5ea6\u6807\u7b7e if ___ is not None : labels . append ( ___ . text ) # \u7b80\u4ecb des = \"\" # \u53ef\u80fd\u6709\u591a\u4e2a`span`\u6807\u7b7e\uff0c\u9700\u8981\u4f9d\u6b21\u89e3\u6790 for s in _ . findAll ( \"div\" ): for t in s . findAll ( \"span\" ): try : if t . find ( \"span\" ) . text : continue except : pass try : if \"c-color-gray\" in t [ \"class\" ]: continue except : pass des += t . text des += \" \\n \" des = des . strip ( \" \\n \" ) # \u6765\u6e90\uff08\u4f5c\u8005\uff09 origin = __ . find ( \"span\" , class_ = \"c-footer-showurl\" ) if origin is not None : origin = origin . text else : origin = __ . find ( \"div\" , class_ = \"single-text\" ) if origin is not None : origin = origin . text _ = section . find ( \"a\" ) . find ( \"div\" , role = \"img\" ) # \u5c01\u9762\u56fe\u7247\u94fe\u63a5 if _ is not None and _ . find ( \"img\" ) is not None : try : img = _ . find ( \"img\" )[ \"data-lazy-src\" ] . replace ( \"&amp;\" , \"&\" ) except : img = _ . find ( \"img\" )[ \"src\" ] . replace ( \"&amp;\" , \"&\" ) else : img = None section_container = res . findAll ( \"a\" , class_ = \"c-slink\" ) sections = [] for section in section_container : text = section . text url = section [ \"href\" ] sections . append ({ \"text\" : text , \"url\" : url }) res_normal . append ( { \"title\" : title , \"url\" : url , \"labels\" : labels , \"date\" : date , \"des\" : des , \"origin\" : origin , \"img\" : img , \"sections\" : sections , \"type\" : \"result\" , } ) res_video_normal_container = soup . findAll ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_VIDEO_NORMAL ) res_video_normal = [] for res in res_video_normal_container : title = res . find ( \"span\" , class_ = \"c-title-text\" ) . text url = res . find ( \"article\" )[ \"rl-link-href\" ] . replace ( \"&amp;\" , \"&\" ) poster = res . find ( \"img\" , class_ = \"c-img-img\" )[ \"src\" ] duration = res . find ( \"div\" , class_ = \"c-img-info-br\" ) . text video_num = None if \"\u4e2a\" in duration : video_num = int ( duration . strip ( \"\u4e2a\u89c6\u9891\" )) duration = None info_container = res . findAll ( \"a\" , class_ = \"c-blocka\" )[ - 1 ] . findAll ( class_ = \"c-color\" ) info = [] for i in info_container : if i . text . startswith ( \"\u4f5c\u8005\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u4f5c\u8005\uff1a\" ) . strip (), \"type\" : \"author\" }) elif i . text . startswith ( \"\u7b80\u4ecb\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u7b80\u4ecb\uff1a\" ) . strip (), \"type\" : \"des\" }) elif i . text . startswith ( \"\u65f6\u95f4\uff1a\" ): info . append ({ \"data\" : i . text . strip ( \"\u65f6\u95f4\uff1a\" ) . strip (), \"type\" : \"time\" }) elif i . text . startswith ( \"\u64ad\u653e\uff1a\" ): info . append ( { \"data\" : self . _reformat_big_num ( i . text . strip ( \"\u64ad\u653e\uff1a\" ) . strip ( \"\u6b21\u64ad\u653e\" ) . strip () ), \"type\" : \"play_times\" , } ) else : info . append ({ \"data\" : i . text . strip (), \"type\" : \"unknown\" }) labels = [] _ = res . find ( \"div\" , class_ = \"c-img-radius-tl\" ) __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( self . _format ( __ . text )) _ = res . find ( \"div\" , class_ = \"c-source-new\" ) origin = _ . find ( \"div\" , class_ = \"single-text\" ) . text __ = res . find ( \"section\" ) . find ( \"div\" , class_ = \"c-flexbox\" ) ___ = __ . find ( \"span\" , class_ = \"c-text-box\" ) # \u70ed\u5ea6\u6807\u7b7e if ___ is not None : labels . append ( ___ . text ) res_video_normal . append ( { \"title\" : title , \"url\" : url , \"poster\" : poster , \"duration\" : duration , \"info\" : info , \"origin\" : origin , \"labels\" : labels , \"video_num\" : video_num , \"type\" : \"video_normal\" , } ) # \u9884\u5904\u7406\u89c6\u9891\u5b50\u5757 video = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_VIDEO ) video = self . webSubParser . parse_video_block ( video ) # \u9884\u5904\u7406\u77ed\u89c6\u9891\u5b50\u5757 short_video = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_SHORT_VIDEO ) short_video = self . webSubParser . parse_short_video_block ( short_video ) # \u9884\u5904\u7406\u767e\u79d1\u5b50\u5757 baike = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_BAIKE ) baike = self . webSubParser . parse_baike_block ( baike ) # \u9884\u5904\u7406\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 knowledge = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_KNOWLEDGE ) knowledge = self . webSubParser . parse_knowledge_block ( knowledge ) pre_results = [] # \u9884\u5904\u7406\u70ed\u8bae\u5b50\u5757 reyi = soup . find ( \"div\" , class_ = \"c-result\" , new_srcid = self . WEB_REYI ) reyi = self . webSubParser . parse_reyi_block ( reyi ) # \u52a0\u8f7d\u89c6\u9891\u5b50\u5757 if video : pre_results . append ( dict ( results = video [ \"results\" ], tags = video [ \"tags\" ], type = \"video\" ) ) # \u52a0\u8f7d\u77ed\u89c6\u9891\u5b50\u5757 if short_video : pre_results . append ( dict ( results = short_video [ \"results\" ], total = short_video [ \"total\" ], type = \"short_video\" , ) ) # \u52a0\u8f7d\u767e\u79d1\u5b50\u5757 if baike : pre_results . append ( dict ( result = baike [ \"result\" ], type = \"baike\" )) # \u52a0\u8f7d\u70ed\u8bae\u5b50\u5757 if reyi : pre_results . append ( dict ( results = reyi [ \"results\" ], url = reyi [ \"url\" ], total = reyi [ \"total\" ], type = \"reyi\" , ) ) # \u52a0\u8f7d\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 if knowledge : pre_results . append ( dict ( results = knowledge [ \"results\" ], title = knowledge [ \"title\" ], type = \"knowledge\" , ) ) results = pre_results results . extend ( res_normal ) results . extend ( res_video_normal ) return { \"results\" : results }","title":"parse_web()"},{"location":"api/baiduspider/mobile/parser/subparser.html","text":"baiduspider.mobile.parser.subparser \u2693\ufe0e WebSubParser \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u5b50\u89e3\u6790\u6a21\u5757\u3002 \u6b64\u6a21\u5757\u4e3a BaiduSpider.mobile.search_web \u51fd\u6570\u7684\u5b50\u6a21\u5757\uff0c\u7528\u4e8e\u89e3\u6790\u7f51\u9875\u641c\u7d22\u5b50\u6a21\u5757\u7684HTML\u4ee3\u7801 \u5e76\u8fd4\u56dePython\u5b57\u5178\u3002 parse_baike_block ( self , baike ) \u2693\ufe0e \u89e3\u6790\u767e\u79d1\u5b50\u5757 Parameters: Name Type Description Default baike BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_baike_block ( self , baike : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Args: baike (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if baike is None : return [] b_url = json . loads ( baike [ \"data-log\" ])[ \"mu\" ] baike = baike . find ( \"article\" ) title = baike . find ( \"h3\" , class_ = \"c-title\" ) . text baike = baike . find ( \"section\" ) try : poster = baike . find ( \"img\" , class_ = \"c-img-img\" )[ \"src\" ] except : poster = None des = baike . find ( \"div\" , class_ = \"c-abstract\" ) . text section_container = baike . findAll ( \"a\" , class_ = \"c-slink\" ) sections = [] for section in section_container : text = section . text url = section [ \"href\" ] sections . append ({ \"text\" : text , \"url\" : url }) _ = baike . find ( \"div\" , class_ = \"c-source\" ) origin = _ . find ( \"span\" , class_ = \"c-color-source\" ) . text label_container = _ . findAll ( \"span\" , class_ = \"c-label-radius\" ) labels = [ l . text for l in label_container ] result = { \"title\" : title , \"poster\" : poster , \"des\" : des , \"sections\" : sections , \"origin\" : origin , \"labels\" : labels , \"url\" : b_url , } return { \"result\" : result } parse_knowledge_block ( self , knowledge ) \u2693\ufe0e \u89e3\u6790\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 Parameters: Name Type Description Default knowledge BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u76f8\u5173\u77e5\u8bc6\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_knowledge_block ( self , knowledge : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 Args: knowledge (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u76f8\u5173\u77e5\u8bc6\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" from pprint import pprint if knowledge is None : return [] knowledge = knowledge . find ( \"article\" ) k_title = knowledge . find ( \"header\" ) . find ( \"h3\" ) . text knowledge_container = knowledge . findAll ( \"div\" , class_ = \"c-scroll-item\" ) results = [] for kl in knowledge_container : url = kl . find ( \"a\" )[ \"href\" ] . replace ( \"&amp;\" , \"&\" ) image = kl . find ( \"img\" )[ \"data-lazy-src\" ] title = kl . find ( \"div\" , class_ = \"c-color-link\" ) . text try : des = kl . find ( \"div\" , class_ = \"c-color-gray\" ) . text if not des . strip (): des = None except AttributeError : des = None results . append ({ \"url\" : url , \"image\" : image , \"title\" : title , \"des\" : des }) return { \"results\" : results , \"title\" : k_title } parse_reyi_block ( self , reyi ) \u2693\ufe0e \u89e3\u6790\u70ed\u8bae\u5b50\u5757 Parameters: Name Type Description Default reyi BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u70ed\u8bae\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_reyi_block ( self , reyi : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u70ed\u8bae\u5b50\u5757 Args: reyi (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u70ed\u8bae\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if reyi is None : return [] reyi = reyi . find ( \"section\" ) r_url = reyi . find ( \"a\" , class_ = \"c-blocka\" )[ \"href\" ] r_total = self . _reformat_big_num ( reyi . find ( \"a\" , class_ = \"middle\" ) . text . strip ( \"\u6761 \\ue734 \" ), \"\u5168\u90e8\" ) post_container = reyi . findAll ( \"div\" , class_ = \"tts-b-item\" ) posts = [] for post in post_container : _ = post . find ( \"div\" , role = \"text\" ) author_avatar = _ . find ( \"img\" )[ \"src\" ] __ = _ . find ( \"div\" , class_ = \"c-line-clamp1\" ) . findAll ( \"span\" ) author = __ [ 0 ] . text site = __ [ 1 ] . text pub_time = __ [ - 1 ] . text _ = post . find ( \"div\" , role = \"option\" ) des = _ . find ( \"p\" , class_ = \"text-container\" ) . text . replace ( \" \\ue60b \" , \"\" ) __ = _ . findAll ( \"img\" , class_ = \"c-img-img\" ) images = [] for img in __ : try : images . append ( img [ \"data-lazy-src\" ]) except : pass try : origin = _ . find ( \"div\" , class_ = \"origin-content-new\" ) . text except : origin = None ___ = post . findAll ( \"i\" , class_ = [ \"c-icon\" , \"c-gap-inner-right-small\" ]) __ = [] for t in ___ : for c in t [ \"class\" ]: if \"zk-icon-size\" in c : __ . append ( t ) break __ = __ [ 1 :] try : comments = int ( __ [ 0 ] . find_next_sibling ( \"span\" ) . text . strip ()) except : comments = 0 try : likes = int ( __ [ 1 ] . find_next_sibling ( \"span\" ) . text . strip ()) except : likes = 0 posts . append ( { \"author_avatar\" : author_avatar , \"author\" : author , \"site\" : site , \"pub_time\" : pub_time , \"des\" : des , \"images\" : images , \"origin\" : origin , \"comments\" : comments , \"likes\" : likes , } ) return { \"results\" : posts , \"url\" : r_url , \"total\" : r_total } parse_short_video_block ( self , short_video ) \u2693\ufe0e \u89e3\u6790\u77ed\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default short_video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u77ed\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_short_video_block ( self , short_video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u77ed\u89c6\u9891\u5b50\u5757 Args: short_video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u77ed\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if short_video is None : return [] s_total = self . _reformat_big_num ( short_video . find ( \"div\" , class_ = \"middle\" ) . find ( \"span\" , class_ = \"text\" ) . text . strip ( \"\u6761 \\ue734 \" ), \"\u5168\u90e8\" , ) s_url = short_video . find ( \"article\" )[ \"rl-link-href\" ] short_video = short_video . find ( \"section\" ) short_video_container = short_video . findAll ( \"div\" , class_ = \"vid-pocket-item\" ) results = [] for vid in short_video_container : poster = vid . find ( \"img\" )[ \"data-lazy-src\" ] url = vid . parent . parent [ \"href\" ] _ = vid . find ( \"div\" , class_ = \"c-color-white\" ) try : author_avatar = _ . find ( \"img\" )[ \"src\" ] except : author_avatar = None author = _ . find ( \"span\" , class_ = \"c-color-white\" ) . text play_times = _ . findAll ( \"span\" )[ - 1 ] . text if play_times is not None and \"\u6b21\u64ad\u653e\" in play_times : delta = 1 if \"\u4e07\" in play_times : delta = 10000 elif \"\u4ebf\" in play_times : delta = 100000000 play_times = int ( float ( play_times . replace ( \"\u6b21\u64ad\u653e\" , \"\" ) . replace ( \"\u4e07\" , \"\" ) . replace ( \"\u4ebf\" , \"\" ) ) * delta ) else : play_times = None title = vid . find ( \"div\" , class_ = \"c-gap-bottom-small\" ) . text results . append ( { \"title\" : title , \"poster\" : poster , \"url\" : url , \"author_avatar\" : author_avatar , \"author\" : author , \"play_times\" : play_times , } ) return { \"results\" : results , \"total\" : s_total , \"url\" : s_url } parse_video_block ( self , video ) \u2693\ufe0e \u89e3\u6790\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_video_block ( self , video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Args: video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if video is None : return [] video = video . find ( \"article\" ) tags_container = ( video . find ( \"section\" ) . find ( \"div\" , class_ = \"c-tags-scroll-wrapper\" ) . findAll ( \"li\" ) ) v_url = video [ \"rl-link-href\" ] results = [] tags = [] for tag in tags_container : text = self . _format ( tag . text ) url = tag . find ( \"a\" )[ \"href\" ] tags . append ({ \"text\" : text , \"url\" : url }) vid_container = video . findAll ( \"div\" , class_ = \"c-span\" ) for vid in vid_container : vid = vid . find ( \"div\" , class_ = \"c-touchable-feedback-content\" ) url = vid . find ( \"a\" )[ \"href\" ] _ = vid . find ( \"div\" , class_ = \"c-img\" ) poster = _ . find ( \"img\" )[ \"src\" ] labels = [] __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( self . _format ( __ . text )) duration = None video_num = None __ = _ . find ( \"div\" , class_ = \"c-img-info-br\" ) if \"\u89c6\u9891\" in __ . text : video_num = int ( self . _format ( __ . text . strip ( \"\u4e2a\u89c6\u9891\" ))) elif \":\" in __ . text : duration = __ . text title = self . _format ( vid . find ( \"div\" , role = \"text\" ) . text ) _ = vid . findAll ( \"div\" , class_ = \"c-line-clamp1\" )[ - 1 ] try : author_avatar = _ . find ( \"img\" )[ \"src\" ] __ = _ . findAll ( \"span\" ) author = self . _format ( __ [ 0 ] . text ) if len ( __ ) > 1 and \"vid-scroll-pubtime\" in __ [ 1 ][ \"class\" ][ 0 ]: pub_time = self . _format ( __ [ 1 ] . text ) else : pub_time = None __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( __ . text ) except : author_avatar = None author = None pub_time = None results . append ( { \"poster\" : poster , \"labels\" : labels , \"duration\" : duration , \"video_num\" : video_num , \"title\" : title , \"author_avatar\" : author_avatar , \"author\" : author , \"pub_time\" : pub_time , \"url\" : url , } ) return { \"results\" : results , \"tags\" : tags , \"url\" : v_url }","title":"subparser.py"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser","text":"","title":"subparser"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser","text":"\u7f51\u9875\u641c\u7d22\u5b50\u89e3\u6790\u6a21\u5757\u3002 \u6b64\u6a21\u5757\u4e3a BaiduSpider.mobile.search_web \u51fd\u6570\u7684\u5b50\u6a21\u5757\uff0c\u7528\u4e8e\u89e3\u6790\u7f51\u9875\u641c\u7d22\u5b50\u6a21\u5757\u7684HTML\u4ee3\u7801 \u5e76\u8fd4\u56dePython\u5b57\u5178\u3002","title":"WebSubParser"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser.parse_baike_block","text":"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Parameters: Name Type Description Default baike BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_baike_block ( self , baike : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Args: baike (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if baike is None : return [] b_url = json . loads ( baike [ \"data-log\" ])[ \"mu\" ] baike = baike . find ( \"article\" ) title = baike . find ( \"h3\" , class_ = \"c-title\" ) . text baike = baike . find ( \"section\" ) try : poster = baike . find ( \"img\" , class_ = \"c-img-img\" )[ \"src\" ] except : poster = None des = baike . find ( \"div\" , class_ = \"c-abstract\" ) . text section_container = baike . findAll ( \"a\" , class_ = \"c-slink\" ) sections = [] for section in section_container : text = section . text url = section [ \"href\" ] sections . append ({ \"text\" : text , \"url\" : url }) _ = baike . find ( \"div\" , class_ = \"c-source\" ) origin = _ . find ( \"span\" , class_ = \"c-color-source\" ) . text label_container = _ . findAll ( \"span\" , class_ = \"c-label-radius\" ) labels = [ l . text for l in label_container ] result = { \"title\" : title , \"poster\" : poster , \"des\" : des , \"sections\" : sections , \"origin\" : origin , \"labels\" : labels , \"url\" : b_url , } return { \"result\" : result }","title":"parse_baike_block()"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser.parse_knowledge_block","text":"\u89e3\u6790\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 Parameters: Name Type Description Default knowledge BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u76f8\u5173\u77e5\u8bc6\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_knowledge_block ( self , knowledge : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u76f8\u5173\u77e5\u8bc6\u5b50\u5757 Args: knowledge (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u76f8\u5173\u77e5\u8bc6\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" from pprint import pprint if knowledge is None : return [] knowledge = knowledge . find ( \"article\" ) k_title = knowledge . find ( \"header\" ) . find ( \"h3\" ) . text knowledge_container = knowledge . findAll ( \"div\" , class_ = \"c-scroll-item\" ) results = [] for kl in knowledge_container : url = kl . find ( \"a\" )[ \"href\" ] . replace ( \"&amp;\" , \"&\" ) image = kl . find ( \"img\" )[ \"data-lazy-src\" ] title = kl . find ( \"div\" , class_ = \"c-color-link\" ) . text try : des = kl . find ( \"div\" , class_ = \"c-color-gray\" ) . text if not des . strip (): des = None except AttributeError : des = None results . append ({ \"url\" : url , \"image\" : image , \"title\" : title , \"des\" : des }) return { \"results\" : results , \"title\" : k_title }","title":"parse_knowledge_block()"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser.parse_reyi_block","text":"\u89e3\u6790\u70ed\u8bae\u5b50\u5757 Parameters: Name Type Description Default reyi BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u70ed\u8bae\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_reyi_block ( self , reyi : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u70ed\u8bae\u5b50\u5757 Args: reyi (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u70ed\u8bae\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if reyi is None : return [] reyi = reyi . find ( \"section\" ) r_url = reyi . find ( \"a\" , class_ = \"c-blocka\" )[ \"href\" ] r_total = self . _reformat_big_num ( reyi . find ( \"a\" , class_ = \"middle\" ) . text . strip ( \"\u6761 \\ue734 \" ), \"\u5168\u90e8\" ) post_container = reyi . findAll ( \"div\" , class_ = \"tts-b-item\" ) posts = [] for post in post_container : _ = post . find ( \"div\" , role = \"text\" ) author_avatar = _ . find ( \"img\" )[ \"src\" ] __ = _ . find ( \"div\" , class_ = \"c-line-clamp1\" ) . findAll ( \"span\" ) author = __ [ 0 ] . text site = __ [ 1 ] . text pub_time = __ [ - 1 ] . text _ = post . find ( \"div\" , role = \"option\" ) des = _ . find ( \"p\" , class_ = \"text-container\" ) . text . replace ( \" \\ue60b \" , \"\" ) __ = _ . findAll ( \"img\" , class_ = \"c-img-img\" ) images = [] for img in __ : try : images . append ( img [ \"data-lazy-src\" ]) except : pass try : origin = _ . find ( \"div\" , class_ = \"origin-content-new\" ) . text except : origin = None ___ = post . findAll ( \"i\" , class_ = [ \"c-icon\" , \"c-gap-inner-right-small\" ]) __ = [] for t in ___ : for c in t [ \"class\" ]: if \"zk-icon-size\" in c : __ . append ( t ) break __ = __ [ 1 :] try : comments = int ( __ [ 0 ] . find_next_sibling ( \"span\" ) . text . strip ()) except : comments = 0 try : likes = int ( __ [ 1 ] . find_next_sibling ( \"span\" ) . text . strip ()) except : likes = 0 posts . append ( { \"author_avatar\" : author_avatar , \"author\" : author , \"site\" : site , \"pub_time\" : pub_time , \"des\" : des , \"images\" : images , \"origin\" : origin , \"comments\" : comments , \"likes\" : likes , } ) return { \"results\" : posts , \"url\" : r_url , \"total\" : r_total }","title":"parse_reyi_block()"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser.parse_short_video_block","text":"\u89e3\u6790\u77ed\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default short_video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u77ed\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_short_video_block ( self , short_video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u77ed\u89c6\u9891\u5b50\u5757 Args: short_video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u77ed\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if short_video is None : return [] s_total = self . _reformat_big_num ( short_video . find ( \"div\" , class_ = \"middle\" ) . find ( \"span\" , class_ = \"text\" ) . text . strip ( \"\u6761 \\ue734 \" ), \"\u5168\u90e8\" , ) s_url = short_video . find ( \"article\" )[ \"rl-link-href\" ] short_video = short_video . find ( \"section\" ) short_video_container = short_video . findAll ( \"div\" , class_ = \"vid-pocket-item\" ) results = [] for vid in short_video_container : poster = vid . find ( \"img\" )[ \"data-lazy-src\" ] url = vid . parent . parent [ \"href\" ] _ = vid . find ( \"div\" , class_ = \"c-color-white\" ) try : author_avatar = _ . find ( \"img\" )[ \"src\" ] except : author_avatar = None author = _ . find ( \"span\" , class_ = \"c-color-white\" ) . text play_times = _ . findAll ( \"span\" )[ - 1 ] . text if play_times is not None and \"\u6b21\u64ad\u653e\" in play_times : delta = 1 if \"\u4e07\" in play_times : delta = 10000 elif \"\u4ebf\" in play_times : delta = 100000000 play_times = int ( float ( play_times . replace ( \"\u6b21\u64ad\u653e\" , \"\" ) . replace ( \"\u4e07\" , \"\" ) . replace ( \"\u4ebf\" , \"\" ) ) * delta ) else : play_times = None title = vid . find ( \"div\" , class_ = \"c-gap-bottom-small\" ) . text results . append ( { \"title\" : title , \"poster\" : poster , \"url\" : url , \"author_avatar\" : author_avatar , \"author\" : author , \"play_times\" : play_times , } ) return { \"results\" : results , \"total\" : s_total , \"url\" : s_url }","title":"parse_short_video_block()"},{"location":"api/baiduspider/mobile/parser/subparser.html#baiduspider.mobile.parser.subparser.WebSubParser.parse_video_block","text":"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\mobile\\parser\\subparser.py @handle_err def parse_video_block ( self , video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Args: video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if video is None : return [] video = video . find ( \"article\" ) tags_container = ( video . find ( \"section\" ) . find ( \"div\" , class_ = \"c-tags-scroll-wrapper\" ) . findAll ( \"li\" ) ) v_url = video [ \"rl-link-href\" ] results = [] tags = [] for tag in tags_container : text = self . _format ( tag . text ) url = tag . find ( \"a\" )[ \"href\" ] tags . append ({ \"text\" : text , \"url\" : url }) vid_container = video . findAll ( \"div\" , class_ = \"c-span\" ) for vid in vid_container : vid = vid . find ( \"div\" , class_ = \"c-touchable-feedback-content\" ) url = vid . find ( \"a\" )[ \"href\" ] _ = vid . find ( \"div\" , class_ = \"c-img\" ) poster = _ . find ( \"img\" )[ \"src\" ] labels = [] __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( self . _format ( __ . text )) duration = None video_num = None __ = _ . find ( \"div\" , class_ = \"c-img-info-br\" ) if \"\u89c6\u9891\" in __ . text : video_num = int ( self . _format ( __ . text . strip ( \"\u4e2a\u89c6\u9891\" ))) elif \":\" in __ . text : duration = __ . text title = self . _format ( vid . find ( \"div\" , role = \"text\" ) . text ) _ = vid . findAll ( \"div\" , class_ = \"c-line-clamp1\" )[ - 1 ] try : author_avatar = _ . find ( \"img\" )[ \"src\" ] __ = _ . findAll ( \"span\" ) author = self . _format ( __ [ 0 ] . text ) if len ( __ ) > 1 and \"vid-scroll-pubtime\" in __ [ 1 ][ \"class\" ][ 0 ]: pub_time = self . _format ( __ [ 1 ] . text ) else : pub_time = None __ = _ . find ( \"span\" , class_ = \"c-label-radius\" ) if __ is not None : labels . append ( __ . text ) except : author_avatar = None author = None pub_time = None results . append ( { \"poster\" : poster , \"labels\" : labels , \"duration\" : duration , \"video_num\" : video_num , \"title\" : title , \"author_avatar\" : author_avatar , \"author\" : author , \"pub_time\" : pub_time , \"url\" : url , } ) return { \"results\" : results , \"tags\" : tags , \"url\" : v_url }","title":"parse_video_block()"},{"location":"api/baiduspider/models/__init__.html","text":"baiduspider.models.__init__ special \u2693\ufe0e get_attr ( d , t ) \u2693\ufe0e \u83b7\u53d6\u5b57\u5178 d \u4e0b\u7684 t Source code in baiduspider\\models\\__init__.py def get_attr ( d : dict , t : str ): \"\"\"\u83b7\u53d6\u5b57\u5178`d`\u4e0b\u7684`t`\"\"\" try : return d [ t ] except : return None","title":"__init__.py"},{"location":"api/baiduspider/models/__init__.html#baiduspider.models.__init__","text":"","title":"__init__"},{"location":"api/baiduspider/models/__init__.html#baiduspider.models.__init__.get_attr","text":"\u83b7\u53d6\u5b57\u5178 d \u4e0b\u7684 t Source code in baiduspider\\models\\__init__.py def get_attr ( d : dict , t : str ): \"\"\"\u83b7\u53d6\u5b57\u5178`d`\u4e0b\u7684`t`\"\"\" try : return d [ t ] except : return None","title":"get_attr()"},{"location":"api/baiduspider/models/baike.html","text":"baiduspider.models.baike \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u767e\u79d1\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 BaikeNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description upd_date datetime.datetime | None \u767e\u79d1\u66f4\u65b0\u65f6\u95f4 des str \u767e\u79d1\u7b80\u4ecb title str \u767e\u79d1\u6807\u9898 url str \u767e\u79d1\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 BaikeResult \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[BaikeNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"baike.py"},{"location":"api/baiduspider/models/baike.html#baiduspider.models.baike","text":"\u767e\u79d1\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u767e\u79d1\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"baike"},{"location":"api/baiduspider/models/baike.html#baiduspider.models.baike.BaikeNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description upd_date datetime.datetime | None \u767e\u79d1\u66f4\u65b0\u65f6\u95f4 des str \u767e\u79d1\u7b80\u4ecb title str \u767e\u79d1\u6807\u9898 url str \u767e\u79d1\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"BaikeNormal"},{"location":"api/baiduspider/models/baike.html#baiduspider.models.baike.BaikeResult","text":"\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[BaikeNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"BaikeResult"},{"location":"api/baiduspider/models/jingyan.html","text":"baiduspider.models.jingyan \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u7ecf\u9a8c\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 JingyanNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u7ecf\u9a8c\u6807\u9898 url str \u7ecf\u9a8c\u94fe\u63a5 des str \u7ecf\u9a8c\u7b80\u4ecb pub_date datetime.datetime \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f category List[str] \u7ecf\u9a8c\u5206\u7c7b votes int \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 publisher JingyanPublisher \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f is_original bool \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b is_outstanding bool \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 JingyanPublisher \u2693\ufe0e \u7ecf\u9a8c\u53d1\u5e03\u8005\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u7ecf\u9a8c\u53d1\u5e03\u8005\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u7ecf\u9a8c\u4e0a\u4f20\u8005\u7528\u6237\u540d url str \u7ecf\u9a8c\u4e0a\u4f20\u8005\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 JingyanResult \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[JingyanNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"jingyan.py"},{"location":"api/baiduspider/models/jingyan.html#baiduspider.models.jingyan","text":"\u7ecf\u9a8c\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u7ecf\u9a8c\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"jingyan"},{"location":"api/baiduspider/models/jingyan.html#baiduspider.models.jingyan.JingyanNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u7ecf\u9a8c\u6807\u9898 url str \u7ecf\u9a8c\u94fe\u63a5 des str \u7ecf\u9a8c\u7b80\u4ecb pub_date datetime.datetime \u7ecf\u9a8c\u53d1\u5e03\u65e5\u671f category List[str] \u7ecf\u9a8c\u5206\u7c7b votes int \u7ecf\u9a8c\u7684\u652f\u6301\u7968\u6570 publisher JingyanPublisher \u7ecf\u9a8c\u53d1\u5e03\u8005\u4fe1\u606f is_original bool \u7ecf\u9a8c\u662f\u5426\u4e3a\u539f\u521b is_outstanding bool \u7ecf\u9a8c\u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"JingyanNormal"},{"location":"api/baiduspider/models/jingyan.html#baiduspider.models.jingyan.JingyanPublisher","text":"\u7ecf\u9a8c\u53d1\u5e03\u8005\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u7ecf\u9a8c\u53d1\u5e03\u8005\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u7ecf\u9a8c\u4e0a\u4f20\u8005\u7528\u6237\u540d url str \u7ecf\u9a8c\u4e0a\u4f20\u8005\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"JingyanPublisher"},{"location":"api/baiduspider/models/jingyan.html#baiduspider.models.jingyan.JingyanResult","text":"\u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[JingyanNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"JingyanResult"},{"location":"api/baiduspider/models/news.html","text":"baiduspider.models.news \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u8d44\u8baf\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 NewsNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u8d44\u8baf\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 date datetime.datetime | None \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 des str \u8d44\u8baf\u7b80\u4ecb title str \u8d44\u8baf\u6807\u9898 url str \u8d44\u8baf\u94fe\u63a5 cover str \u8d44\u8baf\u5c01\u9762\u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 NewsResult \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[NewsNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"news.py"},{"location":"api/baiduspider/models/news.html#baiduspider.models.news","text":"\u8d44\u8baf\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u8d44\u8baf\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"news"},{"location":"api/baiduspider/models/news.html#baiduspider.models.news.NewsNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u8d44\u8baf\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u8d44\u8baf\u6765\u6e90\uff08\u4f5c\u8005\uff09 date datetime.datetime | None \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 des str \u8d44\u8baf\u7b80\u4ecb title str \u8d44\u8baf\u6807\u9898 url str \u8d44\u8baf\u94fe\u63a5 cover str \u8d44\u8baf\u5c01\u9762\u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"NewsNormal"},{"location":"api/baiduspider/models/news.html#baiduspider.models.news.NewsResult","text":"\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[NewsNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"NewsResult"},{"location":"api/baiduspider/models/pic.html","text":"baiduspider.models.pic \u2693\ufe0e \u56fe\u7247\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u56fe\u7247\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 PicNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u56fe\u7247\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description host str \u56fe\u7247\u6765\u6e90\u57df\u540d title str \u56fe\u7247\u6807\u9898 url str \u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 PicResult \u2693\ufe0e \u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u56fe\u7247\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[PicNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"pic.py"},{"location":"api/baiduspider/models/pic.html#baiduspider.models.pic","text":"\u56fe\u7247\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u56fe\u7247\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"pic"},{"location":"api/baiduspider/models/pic.html#baiduspider.models.pic.PicNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u56fe\u7247\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description host str \u56fe\u7247\u6765\u6e90\u57df\u540d title str \u56fe\u7247\u6807\u9898 url str \u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"PicNormal"},{"location":"api/baiduspider/models/pic.html#baiduspider.models.pic.PicResult","text":"\u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u56fe\u7247\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[PicNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"PicResult"},{"location":"api/baiduspider/models/video.html","text":"baiduspider.models.video \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u89c6\u9891\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 VideoNormal \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u89c6\u9891\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u89c6\u9891\u7b80\u4ecb img str \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 origin str | None \u89c6\u9891\u6765\u6e90\uff08\u4f5c\u8005\uff09 pub_time datetime.datetime \u89c6\u9891\u53d1\u5e03\u65f6\u95f4 length datetime.time \u89c6\u9891\u65f6\u957f title str \u89c6\u9891\u6807\u9898 url str \u89c6\u9891\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 VideoResult \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[VideoNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 is_last bool \u5f53\u524d\u9875\u6570\u662f\u5426\u4e3a\u6700\u540e\u4e00\u9875 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"video.py"},{"location":"api/baiduspider/models/video.html#baiduspider.models.video","text":"\u89c6\u9891\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u89c6\u9891\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"video"},{"location":"api/baiduspider/models/video.html#baiduspider.models.video.VideoNormal","text":"\u89c6\u9891\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u89c6\u9891\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u89c6\u9891\u7b80\u4ecb img str \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 origin str | None \u89c6\u9891\u6765\u6e90\uff08\u4f5c\u8005\uff09 pub_time datetime.datetime \u89c6\u9891\u53d1\u5e03\u65f6\u95f4 length datetime.time \u89c6\u9891\u65f6\u957f title str \u89c6\u9891\u6807\u9898 url str \u89c6\u9891\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"VideoNormal"},{"location":"api/baiduspider/models/video.html#baiduspider.models.video.VideoResult","text":"\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[VideoNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 is_last bool \u5f53\u524d\u9875\u6570\u662f\u5426\u4e3a\u6700\u540e\u4e00\u9875 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"VideoResult"},{"location":"api/baiduspider/models/web.html","text":"baiduspider.models.web \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 WebBaike \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u767e\u79d1\u5c01\u9762\u56fe\u7247\uff08\u89c6\u9891\uff09\u94fe\u63a5 cover_type str \u767e\u79d1\u5c01\u9762\u7c7b\u578b\uff0c\u56fe\u7247\u65f6\u4e3a\"image\"\uff0c\u89c6\u9891\u65f6\u4e3a\"video\" des str \u767e\u79d1\u7b80\u4ecb title str \u767e\u79d1\u6807\u9898 url str \u767e\u79d1\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebBlog \u2693\ufe0e \u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u94fe\u63a5 blogs List[WebBlogDetail] \u535a\u5ba2\u8be6\u60c5\u5217\u8868 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebBlogDetail \u2693\ufe0e \u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u535a\u5ba2\u6807\u9898 url str \u535a\u5ba2\u94fe\u63a5 des str \u535a\u5ba2\u7b80\u4ecb origin str \u535a\u5ba2\u6765\u6e90\uff08\u4f5c\u8005\uff09 tags List[str] \u535a\u5ba2\u6807\u7b7e plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebCalc \u2693\ufe0e \u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description process str \u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5982\uff1a12 + 21 result str \u8ba1\u7b97\u7ed3\u679c\uff0c\u7531\u4e8e\u53ef\u80fd\u662f 1e6 \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a str plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebGitee \u2693\ufe0e Gitee\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22Gitee\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u4ed3\u5e93\u6807\u9898 des str \u4ed3\u5e93\u7b80\u4ecb url str \u4ed3\u5e93\u94fe\u63a5 star int \u4ed3\u5e93star\u6570 fork int \u4ed3\u5e93fork\u6570 watch int \u4ed3\u5e93watch\u6570 license str \u4ed3\u5e93\u4f7f\u7528\u7684\u5f00\u6e90\u534f\u8bae lang str \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 status str \u4ed3\u5e93\u72b6\u6001\uff08\u7801\u4e91\u6307\u6570\uff09\u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebMusic \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description songs List[WebMusicSongs] \u6b4c\u66f2\u4fe1\u606f title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebMusicAlbum \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u4e13\u8f91\u540d\u79f0 url str \u4e13\u8f91\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebMusicSinger \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u6b4c\u624b\u540d\u79f0 url str \u6b4c\u624b\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebMusicSong \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description copyright bool \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743\u9650\u5236 duration datetime.time \u6b4c\u66f2\u65f6\u957f is_original bool \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 labels List[str] \u6b4c\u66f2\u6807\u7b7e name str \u6b4c\u66f2\u540d\u79f0 other_sites List[str] \u6b4c\u66f2\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5 poster str \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 pub_company str | None \u6b4c\u66f2\u53d1\u5e03\u516c\u53f8 pub_date datetime.datetime | None \u6b4c\u66f2\u53d1\u5e03\u65e5\u671f site str \u6b4c\u66f2\u53d1\u5e03\u7ad9\u70b9\uff08\u62fc\u97f3\uff09 url str \u6b4c\u66f2\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebMusicSongs \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description album WebMusicAlbum \u6b4c\u66f2\u4e13\u8f91 singers List[WebMusicSinger] \u6b4c\u66f2\u6b4c\u624b song WebMusicSong \u6b4c\u66f2\u4fe1\u606f plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebNews \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u8d44\u8baf\u4f5c\u8005\uff08\u6765\u6e90\uff09 time datetime \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 url str \u8d44\u8baf\u94fe\u63a5 des str \u8d44\u8baf\u7b80\u4ecb plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 time datetime \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u65f6\u95f4 snapshot str \u641c\u7d22\u7ed3\u679c\u5feb\u7167\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebResult \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description normal List[WebNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 related List[str] \u76f8\u5173\u641c\u7d22\u7ed3\u679c\u5217\u8868 calc WebCalc | None \u8ba1\u7b97\u641c\u7d22\u7ed3\u679c news List[WebNews] \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u5217\u8868 video List[WebVideo] \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u5217\u8868 baike WebBaike | None \u767e\u79d1\u641c\u7d22\u7ed3\u679c tieba WebTieba | None \u8d34\u5427\u641c\u7d22\u7ed3\u679c blog WebBlog | None \u535a\u5ba2\u641c\u7d22\u7ed3\u679c gitee WebGitee | None \u7801\u4e91\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c music WebMusic | None \u97f3\u4e50\u641c\u7d22\u7ed3\u679c pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868 WebTieba \u2693\ufe0e \u8d34\u5427\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d34\u5427\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 des str \u8d34\u5427\u7b80\u4ecb title str \u8d34\u5427\u6807\u9898 followers str \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str total str \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str hot List[WebTiebaHot] \u8d34\u5427\u70ed\u95e8\u5e16\u5b50 url str \u8d34\u5427\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebTiebaHot \u2693\ufe0e \u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description clicks str \u5e16\u5b50\u70b9\u51fb\u6b21\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str replies str \u5e16\u5b50\u56de\u590d\u6b21\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str title str \u5e16\u5b50\u6807\u9898 url str \u5e16\u5b50\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WebVideo \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 origin str \u89c6\u9891\u6765\u6e90 length str \u89c6\u9891\u65f6\u957f title str \u89c6\u9891\u6807\u9898 url str \u89c6\u9891\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"web.py"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web","text":"\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"web"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebBaike","text":"\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u767e\u79d1\u5c01\u9762\u56fe\u7247\uff08\u89c6\u9891\uff09\u94fe\u63a5 cover_type str \u767e\u79d1\u5c01\u9762\u7c7b\u578b\uff0c\u56fe\u7247\u65f6\u4e3a\"image\"\uff0c\u89c6\u9891\u65f6\u4e3a\"video\" des str \u767e\u79d1\u7b80\u4ecb title str \u767e\u79d1\u6807\u9898 url str \u767e\u79d1\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebBaike"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebBlog","text":"\u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u94fe\u63a5 blogs List[WebBlogDetail] \u535a\u5ba2\u8be6\u60c5\u5217\u8868 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebBlog"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebBlogDetail","text":"\u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u535a\u5ba2\u6807\u9898 url str \u535a\u5ba2\u94fe\u63a5 des str \u535a\u5ba2\u7b80\u4ecb origin str \u535a\u5ba2\u6765\u6e90\uff08\u4f5c\u8005\uff09 tags List[str] \u535a\u5ba2\u6807\u7b7e plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebBlogDetail"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebCalc","text":"\u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description process str \u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5982\uff1a12 + 21 result str \u8ba1\u7b97\u7ed3\u679c\uff0c\u7531\u4e8e\u53ef\u80fd\u662f 1e6 \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a str plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebCalc"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebGitee","text":"Gitee\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22Gitee\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description title str \u4ed3\u5e93\u6807\u9898 des str \u4ed3\u5e93\u7b80\u4ecb url str \u4ed3\u5e93\u94fe\u63a5 star int \u4ed3\u5e93star\u6570 fork int \u4ed3\u5e93fork\u6570 watch int \u4ed3\u5e93watch\u6570 license str \u4ed3\u5e93\u4f7f\u7528\u7684\u5f00\u6e90\u534f\u8bae lang str \u4ed3\u5e93\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 status str \u4ed3\u5e93\u72b6\u6001\uff08\u7801\u4e91\u6307\u6570\uff09\u56fe\u7247\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebGitee"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebMusic","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description songs List[WebMusicSongs] \u6b4c\u66f2\u4fe1\u606f title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebMusic"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebMusicAlbum","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u4e13\u8f91\u540d\u79f0 url str \u4e13\u8f91\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebMusicAlbum"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebMusicSinger","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u6b4c\u624b\u540d\u79f0 url str \u6b4c\u624b\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebMusicSinger"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebMusicSong","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description copyright bool \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743\u9650\u5236 duration datetime.time \u6b4c\u66f2\u65f6\u957f is_original bool \u6b4c\u66f2\u662f\u5426\u4e3a\u539f\u5531 labels List[str] \u6b4c\u66f2\u6807\u7b7e name str \u6b4c\u66f2\u540d\u79f0 other_sites List[str] \u6b4c\u66f2\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5 poster str \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 pub_company str | None \u6b4c\u66f2\u53d1\u5e03\u516c\u53f8 pub_date datetime.datetime | None \u6b4c\u66f2\u53d1\u5e03\u65e5\u671f site str \u6b4c\u66f2\u53d1\u5e03\u7ad9\u70b9\uff08\u62fc\u97f3\uff09 url str \u6b4c\u66f2\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebMusicSong"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebMusicSongs","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description album WebMusicAlbum \u6b4c\u66f2\u4e13\u8f91 singers List[WebMusicSinger] \u6b4c\u66f2\u6b4c\u624b song WebMusicSong \u6b4c\u66f2\u4fe1\u606f plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebMusicSongs"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebNews","text":"\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description author str \u8d44\u8baf\u4f5c\u8005\uff08\u6765\u6e90\uff09 time datetime \u8d44\u8baf\u53d1\u5e03\u65f6\u95f4 url str \u8d44\u8baf\u94fe\u63a5 des str \u8d44\u8baf\u7b80\u4ecb plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebNews"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description des str \u641c\u7d22\u7ed3\u679c\u7b80\u4ecb origin str \u641c\u7d22\u7ed3\u679c\u6765\u6e90 title str \u641c\u7d22\u7ed3\u679c\u6807\u9898 url str \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 time datetime \u641c\u7d22\u7ed3\u679c\u53d1\u5e03\u65f6\u95f4 snapshot str \u641c\u7d22\u7ed3\u679c\u5feb\u7167\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebNormal"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebResult","text":"\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description normal List[WebNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 related List[str] \u76f8\u5173\u641c\u7d22\u7ed3\u679c\u5217\u8868 calc WebCalc | None \u8ba1\u7b97\u641c\u7d22\u7ed3\u679c news List[WebNews] \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u5217\u8868 video List[WebVideo] \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u5217\u8868 baike WebBaike | None \u767e\u79d1\u641c\u7d22\u7ed3\u679c tieba WebTieba | None \u8d34\u5427\u641c\u7d22\u7ed3\u679c blog WebBlog | None \u535a\u5ba2\u641c\u7d22\u7ed3\u679c gitee WebGitee | None \u7801\u4e91\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c music WebMusic | None \u97f3\u4e50\u641c\u7d22\u7ed3\u679c pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"WebResult"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebTieba","text":"\u8d34\u5427\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d34\u5427\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u8d34\u5427\u5c01\u9762\u56fe\u7247\u94fe\u63a5 des str \u8d34\u5427\u7b80\u4ecb title str \u8d34\u5427\u6807\u9898 followers str \u8d34\u5427\u5173\u6ce8\u4eba\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str total str \u8d34\u5427\u603b\u5e16\u5b50\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str hot List[WebTiebaHot] \u8d34\u5427\u70ed\u95e8\u5e16\u5b50 url str \u8d34\u5427\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebTieba"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebTiebaHot","text":"\u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description clicks str \u5e16\u5b50\u70b9\u51fb\u6b21\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str replies str \u5e16\u5b50\u56de\u590d\u6b21\u6570\uff0c\u53ef\u80fd\u4f1a\u6709\u5f62\u5982 1\u4e07 \u7684\u7ed3\u679c\uff0c\u6545\u7c7b\u578b\u4e3a str title str \u5e16\u5b50\u6807\u9898 url str \u5e16\u5b50\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebTiebaHot"},{"location":"api/baiduspider/models/web.html#baiduspider.models.web.WebVideo","text":"\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description cover str \u89c6\u9891\u5c01\u9762\u56fe\u7247\u94fe\u63a5 origin str \u89c6\u9891\u6765\u6e90 length str \u89c6\u9891\u65f6\u957f title str \u89c6\u9891\u6807\u9898 url str \u89c6\u9891\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WebVideo"},{"location":"api/baiduspider/models/wenku.html","text":"baiduspider.models.wenku \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u6587\u5e93\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 WenkuNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description pub_date datetime.datetime \u6587\u6863\u53d1\u5e03\u65e5\u671f des str \u6587\u6863\u7b80\u4ecb downloads int \u6587\u6863\u4e0b\u8f7d\u91cf pages int \u6587\u6863\u9875\u6570 title str \u6587\u6863\u6807\u9898 type str \u6587\u6863\u683c\u5f0f\uff0c\u5168\u90e8\u4e3a\u5927\u5199\u5b57\u6bcd url str \u6587\u6863\u94fe\u63a5 quality float \u6587\u6863\u8d28\u91cf\u5206 uploader WenkuUploader \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f is_vip bool \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 WenkuResult \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WenkuNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868 WenkuUploader \u2693\ufe0e \u6587\u6863\u4e0a\u4f20\u8005\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u6587\u6863\u4e0a\u4f20\u8005\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d url str \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"wenku.py"},{"location":"api/baiduspider/models/wenku.html#baiduspider.models.wenku","text":"\u6587\u5e93\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u6587\u5e93\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"wenku"},{"location":"api/baiduspider/models/wenku.html#baiduspider.models.wenku.WenkuNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description pub_date datetime.datetime \u6587\u6863\u53d1\u5e03\u65e5\u671f des str \u6587\u6863\u7b80\u4ecb downloads int \u6587\u6863\u4e0b\u8f7d\u91cf pages int \u6587\u6863\u9875\u6570 title str \u6587\u6863\u6807\u9898 type str \u6587\u6863\u683c\u5f0f\uff0c\u5168\u90e8\u4e3a\u5927\u5199\u5b57\u6bcd url str \u6587\u6863\u94fe\u63a5 quality float \u6587\u6863\u8d28\u91cf\u5206 uploader WenkuUploader \u6587\u6863\u4e0a\u4f20\u8005\u4fe1\u606f is_vip bool \u8be5\u6587\u6863\u662f\u5426\u9700\u8981VIP\u6743\u9650\u4e0b\u8f7d plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WenkuNormal"},{"location":"api/baiduspider/models/wenku.html#baiduspider.models.wenku.WenkuResult","text":"\u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[WenkuNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"WenkuResult"},{"location":"api/baiduspider/models/wenku.html#baiduspider.models.wenku.WenkuUploader","text":"\u6587\u6863\u4e0a\u4f20\u8005\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u6587\u5e93\u641c\u7d22\u6587\u6863\u4e0a\u4f20\u8005\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description name str \u6587\u6863\u4e0a\u4f20\u8005\u7528\u6237\u540d url str \u6587\u6863\u4e0a\u4f20\u8005\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"WenkuUploader"},{"location":"api/baiduspider/models/zhidao.html","text":"baiduspider.models.zhidao \u2693\ufe0e \u77e5\u9053\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u77e5\u9053\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 ZhidaoNormal \u2693\ufe0e \u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u77e5\u9053\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description agree int \u56de\u7b54\u8d5e\u540c\u6570 answer str | None \u56de\u7b54\u7b80\u4ecb answerer str \u56de\u7b54\u8005 count int | None \u56de\u7b54\u603b\u6570 date datetime.datetime \u56de\u7b54\u53d1\u5e03\u65e5\u671f title str \u95ee\u9898\u6807\u9898 question str | None \u95ee\u9898\u7b80\u4ecb url str \u95ee\u9898\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178 ZhidaoResult \u2693\ufe0e \u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u77e5\u9053\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[ZhidaoNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"zhidao.py"},{"location":"api/baiduspider/models/zhidao.html#baiduspider.models.zhidao","text":"\u77e5\u9053\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u6a21\u5757 \u6b64\u6587\u4ef6\u5b9a\u4e49\u7684\u6240\u6709\u73b0\u6709\u7684\u77e5\u9053\u641c\u7d22\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"zhidao"},{"location":"api/baiduspider/models/zhidao.html#baiduspider.models.zhidao.ZhidaoNormal","text":"\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u77e5\u9053\u641c\u7d22\u57fa\u672c\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description agree int \u56de\u7b54\u8d5e\u540c\u6570 answer str | None \u56de\u7b54\u7b80\u4ecb answerer str \u56de\u7b54\u8005 count int | None \u56de\u7b54\u603b\u6570 date datetime.datetime \u56de\u7b54\u53d1\u5e03\u65e5\u671f title str \u95ee\u9898\u6807\u9898 question str | None \u95ee\u9898\u7b80\u4ecb url str \u95ee\u9898\u94fe\u63a5 plain dict \u6e90\u641c\u7d22\u7ed3\u679c\u5b57\u5178","title":"ZhidaoNormal"},{"location":"api/baiduspider/models/zhidao.html#baiduspider.models.zhidao.ZhidaoResult","text":"\u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u77e5\u9053\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description results List[ZhidaoNormal] \u666e\u901a\u641c\u7d22\u7ed3\u679c\u5217\u8868 pages int \u641c\u7d22\u7ed3\u679c\u9875\u6570 total int \u641c\u7d22\u7ed3\u679c\u603b\u6570 plain list \u6e90\u641c\u7d22\u7ed3\u679c\u5217\u8868","title":"ZhidaoResult"},{"location":"api/baiduspider/models/typings/typings_baike.html","text":"baiduspider.models.typings.typings_baike \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u767e\u79d1\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 BaikeNormal \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.baike.BaikeNormal \u7c7b\u3002 BaikeResult \u2693\ufe0e \u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.baike.BaikeResult \u7c7b\u3002","title":"typings_baike.py"},{"location":"api/baiduspider/models/typings/typings_baike.html#baiduspider.models.typings.typings_baike","text":"\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u767e\u79d1\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_baike"},{"location":"api/baiduspider/models/typings/typings_baike.html#baiduspider.models.typings.typings_baike.BaikeNormal","text":"\u767e\u79d1\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.baike.BaikeNormal \u7c7b\u3002","title":"BaikeNormal"},{"location":"api/baiduspider/models/typings/typings_baike.html#baiduspider.models.typings.typings_baike.BaikeResult","text":"\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.baike.BaikeResult \u7c7b\u3002","title":"BaikeResult"},{"location":"api/baiduspider/models/typings/typings_jingyan.html","text":"baiduspider.models.typings.typings_jingyan \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7ecf\u9a8c\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 JingyanNormal \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanNormal \u7c7b\u3002 JingyanPublisher \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u6587\u6863\u53d1\u5e03\u8005\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanPublisher \u7c7b\u3002 JingyanResult \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanResult \u7c7b\u3002","title":"typings_jingyan.py"},{"location":"api/baiduspider/models/typings/typings_jingyan.html#baiduspider.models.typings.typings_jingyan","text":"\u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7ecf\u9a8c\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_jingyan"},{"location":"api/baiduspider/models/typings/typings_jingyan.html#baiduspider.models.typings.typings_jingyan.JingyanNormal","text":"\u7ecf\u9a8c\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanNormal \u7c7b\u3002","title":"JingyanNormal"},{"location":"api/baiduspider/models/typings/typings_jingyan.html#baiduspider.models.typings.typings_jingyan.JingyanPublisher","text":"\u7ecf\u9a8c\u641c\u7d22\u6587\u6863\u53d1\u5e03\u8005\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanPublisher \u7c7b\u3002","title":"JingyanPublisher"},{"location":"api/baiduspider/models/typings/typings_jingyan.html#baiduspider.models.typings.typings_jingyan.JingyanResult","text":"\u7ecf\u9a8c\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.jingyan.JingyanResult \u7c7b\u3002","title":"JingyanResult"},{"location":"api/baiduspider/models/typings/typings_news.html","text":"baiduspider.models.typings.typings_news \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u8d44\u8baf\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 NewsNormal \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.news.NewsNormal \u7c7b\u3002 NewsResult \u2693\ufe0e \u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.news.NewsResult \u7c7b\u3002","title":"typings_news.py"},{"location":"api/baiduspider/models/typings/typings_news.html#baiduspider.models.typings.typings_news","text":"\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u8d44\u8baf\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_news"},{"location":"api/baiduspider/models/typings/typings_news.html#baiduspider.models.typings.typings_news.NewsNormal","text":"\u8d44\u8baf\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.news.NewsNormal \u7c7b\u3002","title":"NewsNormal"},{"location":"api/baiduspider/models/typings/typings_news.html#baiduspider.models.typings.typings_news.NewsResult","text":"\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.news.NewsResult \u7c7b\u3002","title":"NewsResult"},{"location":"api/baiduspider/models/typings/typings_pic.html","text":"baiduspider.models.typings.typings_pic \u2693\ufe0e \u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u56fe\u7247\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 PicNormal \u2693\ufe0e \u56fe\u7247\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.pic.PicNormal \u7c7b\u3002 PicResult \u2693\ufe0e \u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.pic.PicResult \u7c7b\u3002","title":"typings_pic.py"},{"location":"api/baiduspider/models/typings/typings_pic.html#baiduspider.models.typings.typings_pic","text":"\u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u56fe\u7247\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_pic"},{"location":"api/baiduspider/models/typings/typings_pic.html#baiduspider.models.typings.typings_pic.PicNormal","text":"\u56fe\u7247\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.pic.PicNormal \u7c7b\u3002","title":"PicNormal"},{"location":"api/baiduspider/models/typings/typings_pic.html#baiduspider.models.typings.typings_pic.PicResult","text":"\u56fe\u7247\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.pic.PicResult \u7c7b\u3002","title":"PicResult"},{"location":"api/baiduspider/models/typings/typings_video.html","text":"baiduspider.models.typings.typings_video \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u89c6\u9891\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 VideoNormal \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.video.VideoNormal \u7c7b\u3002 VideoResult \u2693\ufe0e \u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.video.VideoResult \u7c7b\u3002","title":"typings_video.py"},{"location":"api/baiduspider/models/typings/typings_video.html#baiduspider.models.typings.typings_video","text":"\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u89c6\u9891\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_video"},{"location":"api/baiduspider/models/typings/typings_video.html#baiduspider.models.typings.typings_video.VideoNormal","text":"\u89c6\u9891\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.video.VideoNormal \u7c7b\u3002","title":"VideoNormal"},{"location":"api/baiduspider/models/typings/typings_video.html#baiduspider.models.typings.typings_video.VideoResult","text":"\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.video.VideoResult \u7c7b\u3002","title":"VideoResult"},{"location":"api/baiduspider/models/typings/typings_web.html","text":"baiduspider.models.typings.typings_web \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7f51\u9875\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 WebBaike \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBaike \u7c7b\u3002 WebBlog \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBlog \u7c7b\u3002 WebBlogDetail \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBlogDetail \u7c7b\u3002 WebCalc \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebCalc \u7c7b\u3002 WebGitee \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u7801\u4e91\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebGitee \u7c7b\u3002 WebMusic \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusic \u7c7b\u3002 WebMusicAlbum \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicAlbum \u7c7b\u3002 WebMusicSinger \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSinger \u7c7b\u3002 WebMusicSong \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSong \u7c7b\u3002 WebMusicSongs \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSongs \u7c7b\u3002 WebNews \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebNews \u7c7b\u3002 WebNormal \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebNormal \u7c7b\u3002 WebResult \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebResult \u7c7b\u3002 WebTieba \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u8d34\u5427\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebTieba \u7c7b\u3002 WebTiebaHot \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebTiebaHot \u7c7b\u3002 WebVideo \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebVideo \u7c7b\u3002","title":"typings_web.py"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web","text":"\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7f51\u9875\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_web"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebBaike","text":"\u7f51\u9875\u641c\u7d22\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBaike \u7c7b\u3002","title":"WebBaike"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebBlog","text":"\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBlog \u7c7b\u3002","title":"WebBlog"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebBlogDetail","text":"\u7f51\u9875\u641c\u7d22\u535a\u5ba2\u8be6\u60c5\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebBlogDetail \u7c7b\u3002","title":"WebBlogDetail"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebCalc","text":"\u7f51\u9875\u641c\u7d22\u8ba1\u7b97\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebCalc \u7c7b\u3002","title":"WebCalc"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebGitee","text":"\u7f51\u9875\u641c\u7d22\u7801\u4e91\u4ed3\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebGitee \u7c7b\u3002","title":"WebGitee"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebMusic","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusic \u7c7b\u3002","title":"WebMusic"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebMusicAlbum","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4e13\u8f91\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicAlbum \u7c7b\u3002","title":"WebMusicAlbum"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebMusicSinger","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u6b4c\u624b\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSinger \u7c7b\u3002","title":"WebMusicSinger"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebMusicSong","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u4fe1\u606f\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSong \u7c7b\u3002","title":"WebMusicSong"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebMusicSongs","text":"\u7f51\u9875\u641c\u7d22\u97f3\u4e50\u6b4c\u66f2\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebMusicSongs \u7c7b\u3002","title":"WebMusicSongs"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebNews","text":"\u7f51\u9875\u641c\u7d22\u8d44\u8baf\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebNews \u7c7b\u3002","title":"WebNews"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebNormal","text":"\u7f51\u9875\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebNormal \u7c7b\u3002","title":"WebNormal"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebResult","text":"\u7f51\u9875\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebResult \u7c7b\u3002","title":"WebResult"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebTieba","text":"\u7f51\u9875\u641c\u7d22\u8d34\u5427\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebTieba \u7c7b\u3002","title":"WebTieba"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebTiebaHot","text":"\u7f51\u9875\u641c\u7d22\u8d34\u5427\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebTiebaHot \u7c7b\u3002","title":"WebTiebaHot"},{"location":"api/baiduspider/models/typings/typings_web.html#baiduspider.models.typings.typings_web.WebVideo","text":"\u7f51\u9875\u641c\u7d22\u89c6\u9891\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.web.WebVideo \u7c7b\u3002","title":"WebVideo"},{"location":"api/baiduspider/models/typings/typings_wenku.html","text":"baiduspider.models.typings.typings_wenku \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u6587\u5e93\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 WenkuNormal \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuNormal \u7c7b\u3002 WenkuResult \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuResult \u7c7b\u3002 WenkuUploader \u2693\ufe0e \u6587\u5e93\u641c\u7d22\u6587\u6863\u4e0a\u4f20\u8005\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuUploader \u7c7b\u3002","title":"typings_wenku.py"},{"location":"api/baiduspider/models/typings/typings_wenku.html#baiduspider.models.typings.typings_wenku","text":"\u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u6587\u5e93\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_wenku"},{"location":"api/baiduspider/models/typings/typings_wenku.html#baiduspider.models.typings.typings_wenku.WenkuNormal","text":"\u6587\u5e93\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuNormal \u7c7b\u3002","title":"WenkuNormal"},{"location":"api/baiduspider/models/typings/typings_wenku.html#baiduspider.models.typings.typings_wenku.WenkuResult","text":"\u6587\u5e93\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuResult \u7c7b\u3002","title":"WenkuResult"},{"location":"api/baiduspider/models/typings/typings_wenku.html#baiduspider.models.typings.typings_wenku.WenkuUploader","text":"\u6587\u5e93\u641c\u7d22\u6587\u6863\u4e0a\u4f20\u8005\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.wenku.WenkuUploader \u7c7b\u3002","title":"WenkuUploader"},{"location":"api/baiduspider/models/typings/typings_zhidao.html","text":"baiduspider.models.typings.typings_zhidao \u2693\ufe0e \u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u77e5\u9053\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 ZhidaoNormal \u2693\ufe0e \u77e5\u9053\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.zhidao.ZhidaoNormal \u7c7b\u3002 ZhidaoResult \u2693\ufe0e \u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.zhidao.ZhidaoResult \u7c7b\u3002","title":"typings_zhidao.py"},{"location":"api/baiduspider/models/typings/typings_zhidao.html#baiduspider.models.typings.typings_zhidao","text":"\u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u77e5\u9053\u641c\u7d22\u5185\u6240\u6709\u6a21\u5757\u7684\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"typings_zhidao"},{"location":"api/baiduspider/models/typings/typings_zhidao.html#baiduspider.models.typings.typings_zhidao.ZhidaoNormal","text":"\u77e5\u9053\u641c\u7d22\u666e\u901a\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.zhidao.ZhidaoNormal \u7c7b\u3002","title":"ZhidaoNormal"},{"location":"api/baiduspider/models/typings/typings_zhidao.html#baiduspider.models.typings.typings_zhidao.ZhidaoResult","text":"\u77e5\u9053\u641c\u7d22\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.models.zhidao.ZhidaoResult \u7c7b\u3002","title":"ZhidaoResult"},{"location":"api/baiduspider/parser/__init__.html","text":"baiduspider.parser.__init__ special \u2693\ufe0e Parser \u2693\ufe0e __init__ ( self ) special \u2693\ufe0e \u767e\u5ea6\u641c\u7d22\u89e3\u6790\u5668 Source code in baiduspider\\parser\\__init__.py def __init__ ( self ) -> None : \"\"\"\u767e\u5ea6\u641c\u7d22\u89e3\u6790\u5668\"\"\" super () . __init__ () self . webSubParser = WebSubParser () parse_baike ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u767e\u79d1\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_baike ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u767e\u79d1\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" code = self . _minify ( content ) # \u521b\u5efaBeautifulSoup\u5bf9\u8c61 soup = ( BeautifulSoup ( code , \"html.parser\" ) . find ( \"div\" , class_ = \"body-wrapper\" ) . find ( \"div\" , class_ = \"searchResult\" ) ) # \u83b7\u53d6\u767e\u79d1\u603b\u6570 total = int ( soup . find ( \"div\" , class_ = \"result-count\" ) . text . strip ( \"\u767e\u5ea6\u767e\u79d1\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u8bcd\u6761\u7ea6\" ) . strip ( \"\u4e2a\" ) ) # \u83b7\u53d6\u6240\u6709\u7ed3\u679c container = soup . findAll ( \"dd\" ) results = [] for res in container : # \u94fe\u63a5 url = \"https://baike.baidu.com\" + self . _format ( res . find ( \"a\" , class_ = \"result-title\" )[ \"href\" ] ) # \u6807\u9898 title = self . _format ( res . find ( \"a\" , class_ = \"result-title\" ) . text ) # \u7b80\u4ecb des = self . _format ( res . find ( \"p\" , class_ = \"result-summary\" ) . text ) # \u66f4\u65b0\u65e5\u671f upd_date = self . _format ( res . find ( \"span\" , class_ = \"result-date\" ) . text ) # \u751f\u6210\u7ed3\u679c results . append ( { \"title\" : title , \"des\" : des , \"upd_date\" : upd_date , \"url\" : url } ) return { \"results\" : results , \"total\" : total } parse_jingyan ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_jingyan ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" # \u6700\u5c0f\u5316\u4ee3\u7801 code = self . _minify ( content ) bs = BeautifulSoup ( code , \"html.parser\" ) total = int ( bs . find ( \"div\" , class_ = \"result-num\" ) . text . split ( \"\u7ea6\" , 1 )[ - 1 ] . split ( \"\u4e2a\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u52a0\u8f7d\u641c\u7d22\u7ed3\u679c data = bs . find ( \"div\" , class_ = \"search-list\" ) . findAll ( \"dl\" ) results = [] for res in data : # \u6807\u9898 title = self . _format ( res . find ( \"dt\" ) . find ( \"a\" ) . text ) # \u94fe\u63a5 url = \"https://jingyan.baidu.com/\" + res . find ( \"dt\" ) . find ( \"a\" )[ \"href\" ] # \u7b80\u4ecb des = self . _format ( res . find ( \"dd\" ) . find ( \"div\" , class_ = \"summary\" ) . find ( \"span\" , class_ = \"abstract\" ) . text ) # \u83b7\u53d6\u53d1\u5e03\u65e5\u671f\u548c\u5206\u7c7b\uff0c\u4f4d\u4e8e`<span class=\"cate\"/>`\u4e2d _ = res . find ( \"dd\" ) . find ( \"div\" , class_ = \"summary\" ) . find ( \"span\" , class_ = \"cate\" ) tmp = self . _format ( _ . text ) . split ( \"-\" ) # \u53d1\u5e03\u65e5\u671f pub_date = self . _format ( tmp [ 1 ]) . replace ( \"/\" , \"-\" ) # \u5206\u7c7b category = self . _format ( tmp [ - 1 ]) . strip ( \"\u5206\u7c7b\uff1a\" ) . split ( \">\" ) # \u53d1\u5e03\u8005 publisher = { \"name\" : self . _format ( _ . find ( \"a\" ) . text ), \"url\" : \"https://jingyan.baidu.com\" + _ . find ( \"a\" )[ \"href\" ], } # \u652f\u6301\u7968\u6570 votes = int ( self . _format ( res . find ( \"dt\" ) . find ( \"span\" , class_ = \"succ-times\" ) . text ) . strip ( \"\u5f97\u7968\" ) ) # \u662f\u5426\u4e3a\u539f\u521b\u7ecf\u9a8c try : res . find ( \"span\" , class_ = \"i-original\" ) . text original = True except : original = False # \u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c try : res . find ( \"span\" , class_ = \"i-good-exp\" ) . text outstanding = True except : outstanding = False # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"des\" : des , \"pub_date\" : pub_date , \"category\" : category , \"votes\" : votes , \"publisher\" : publisher , \"is_original\" : original , \"is_outstanding\" : outstanding , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c\u5230\u96c6\u5408\u4e2d # \u83b7\u53d6\u5206\u9875 # pages_ = bs.find(\"div\", class_=\"pager-wrap\").findAll(\"a\", class_=\"pg-btn\") # if not pages_: # return {\"results\": results, \"pages\": 1} # if \"\u4e0b\u4e00\u9875\" in pages_[-1].text: # pages_ = pages_[:-1] # pages = int(self._format(pages_[-1].text)) return { \"results\" : results , \"total\" : total } parse_news ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u8d44\u8baf\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_news ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u8d44\u8baf\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( self . _format ( content ), \"html.parser\" ) # \u641c\u7d22\u7ed3\u679c\u603b\u6570 total = int ( bs . find ( \"div\" , id = \"wrapper_wrapper\" ) . find ( \"span\" , class_ = \"nums\" ) . text . split ( \"\u8d44\u8baf\" , 1 )[ - 1 ] . split ( \"\u7bc7\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u641c\u7d22\u7ed3\u679c\u5bb9\u5668 data = ( bs . find ( \"div\" , id = \"content_left\" ) . findAll ( \"div\" )[ 1 ] . findAll ( \"div\" , class_ = \"result-op\" ) ) results = [] for res in data : # \u6807\u9898 title = self . _format ( res . find ( \"h3\" ) . find ( \"a\" ) . text ) # \u94fe\u63a5 url = res . find ( \"h3\" ) . find ( \"a\" )[ \"href\" ] # \u7b80\u4ecb des = ( res . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"span\" , class_ = \"c-color-text\" ) . text ) _ = res . find ( \"div\" , class_ = \"c-span-last\" ) # \u4f5c\u8005 author = _ . find ( \"span\" , class_ = \"c-gap-right\" ) . text # \u53d1\u5e03\u65e5\u671f try : date = _ . find ( \"span\" , class_ = \"c-color-gray2\" ) . text except AttributeError : date = None # \u5c01\u9762\u56fe\u7247 try : cover = res . find ( \"div\" , class_ = \"c-img-radius-large\" ) . find ( \"img\" )[ \"src\" ] except : cover = None # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"author\" : author , \"date\" : date , \"des\" : des , \"url\" : url , \"cover\" : cover , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u6240\u6709\u9875\u6570 # pages_ = bs.find(\"div\", id=\"page\").findAll(\"a\") # # \u8fc7\u6ee4\u9875\u7801 # if \"< \u4e0a\u4e00\u9875\" in pages_[0].text: # pages_ = pages_[1:] # if \"\u4e0b\u4e00\u9875 >\" in pages_[-1].text: # pages_ = pages_[:-1] return { \"results\" : results , \"total\" : total } parse_pic ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u56fe\u7247\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py @handle_err def parse_pic ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u56fe\u7247\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" # \u4eceJavaScript\u4e2d\u52a0\u8f7d\u6570\u636e # \u56e0\u4e3aJavaScript\u5f88\u50cfJSON\uff08JavaScript Object Notation\uff09\uff0c\u6240\u4ee5\u76f4\u63a5\u7528json\u52a0\u8f7d\u5c31\u884c\u4e86 # \u8fd8\u6709\u8981\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u628a\u51fd\u6570\u548c\u65e0\u7528\u7684\u62ec\u53f7\u8fc7\u6ee4\u6389 error = None try : data = json . loads ( content . split ( \"flip.setData('imgData', \" )[ 1 ] . split ( \"flip.setData(\" )[ 0 ] . split ( \"]);\" )[ 0 ] . replace ( \");\" , \"\" ) . replace ( \"< \\\\ /strong>\" , \"</strong>\" ) . replace ( \" \\\\ '\" , \"'\" ) . replace ( ' \\\\ \"' , \"'\" ), strict = False , ) except Exception as err : error = err if type ( err ) in [ IndexError , AttributeError ]: raise ParseError ( \"Invalid HTML content.\" ) finally : if error : raise ParseError ( str ( error )) soup = BeautifulSoup ( content , \"html.parser\" ) total = int ( soup . find ( \"div\" , id = \"resultInfo\" ) . text . split ( \"\u7ea6\" )[ - 1 ] . split ( \"\u5f20\" )[ 0 ] . replace ( \",\" , \"\" ) ) results = [] for _ in data [ \"data\" ][: - 1 ]: if _ : # \u6807\u9898 title = str ( _ [ \"fromPageTitle\" ]) . encode ( \"utf-8\" ) . decode ( \"utf-8\" ) # \u53bb\u9664\u6807\u9898\u91cc\u7684HTML title = unescape ( self . _remove_html ( title )) # \u94fe\u63a5 url = _ [ \"objURL\" ] # \u6765\u6e90\u57df\u540d host = _ [ \"fromURLHost\" ] # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"host\" : host } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u5206\u9875 # bs = BeautifulSoup(content, \"html.parser\") # pages_ = bs.find(\"div\", id=\"page\").findAll(\"span\", class_=\"pc\") # pages = [] # for _ in pages_: # pages.append(int(_.text)) return { \"results\" : results , # \u53d6\u6700\u5927\u9875\u7801 # \"pages\": max(pages), \"total\" : total , } parse_video ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u89c6\u9891\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_video ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u89c6\u9891\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( content , \"html.parser\" ) # \u9501\u5b9a\u7ed3\u679cdiv data = bs . findAll ( \"div\" , class_ = \"video_short\" ) if len ( data ) == 0 : return { \"results\" : None } results = [] for res in data : __ = res . find ( \"div\" , class_ = \"video_small_intro\" ) _ = __ . find ( \"a\" ) # \u6807\u9898 title = self . _format ( _ . text ) # \u94fe\u63a5 url = _ [ \"href\" ] # \u5c01\u9762\u56fe\u7247\u94fe\u63a5 img = res . find ( \"img\" , class_ = \"border-radius\" )[ \"src\" ] . rsplit ( \"?\" , 1 )[ 0 ] # \u65f6\u957f length_ = res . find ( \"span\" , class_ = \"video_play_timer\" ) . text _ = [ int ( i ) for i in length_ . split ( \":\" )] if len ( _ ) < 3 : length_ = time ( minute = _ [ 0 ], second = _ [ 1 ]) else : length_ = time ( _ [ 0 ], _ [ 1 ], _ [ 2 ]) # \u7b80\u4ecb try : des = __ . find ( \"div\" , class_ = \"c-color-text\" ) . text except AttributeError : des = None # \u6765\u6e90 try : origin = self . _format ( __ . find ( \"span\" , class_ = \"wetSource\" ) . text ) . strip ( \"\u6765\u6e90\uff1a\" ) except AttributeError : origin = None # \u53d1\u5e03\u65f6\u95f4 pub_time : str = __ . findAll ( \"span\" , class_ = \"c-font-normal\" )[ - 1 ] . text . strip ( \"\u53d1\u5e03\u65f6\u95f4\uff1a\" ) try : __ = [ int ( i ) for i in pub_time . split ( \"-\" )] except ValueError : __ = self . _convert_time ( pub_time , True ) pub_time = datetime ( __ [ 0 ], __ [ 1 ], __ [ 2 ]) # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"img\" : img , \"length\" : length_ , \"des\" : des , \"origin\" : origin , \"pub_time\" : pub_time , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c return { \"results\" : results } parse_web ( self , content , exclude ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801. required exclude list \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_web ( self , content : str , exclude : list ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801. exclude (list): \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" soup = BeautifulSoup ( content , \"html.parser\" ) if soup . find ( \"div\" , id = \"content_left\" ) is None : return { \"results\" : [], \"pages\" : 0 , \"total\" : 0 } # \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\u603b\u6570 tmp1 = soup . findAll ( \"div\" , class_ = \"result-molecule\" ) idx_ = 0 ele = None while ele is None and idx_ < len ( tmp1 ): tmp = tmp1 [ idx_ ] . findAll ( \"span\" ) found = False for t in tmp : if \"\u767e\u5ea6\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u7ed3\u679c\" in t . text : ele = t found = True break if found : break idx_ += 1 num = int ( str ( ele . text ) . strip ( \"\u767e\u5ea6\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u7ed3\u679c\" ) . strip ( \"\u7ea6\" ) . strip ( \"\u4e2a\" ) . replace ( \",\" , \"\" ) ) # \u5b9a\u4e49\u9884\u7ed3\u679c\uff08\u8fd0\u7b97\u4ee5\u53ca\u76f8\u5173\u641c\u7d22\uff09 pre_results = [] # \u9884\u5904\u7406\u65b0\u95fb if \"news\" not in exclude : news = soup . find ( \"div\" , class_ = \"result-op\" , srcid = \"19\" ) news_detail = self . webSubParser . parse_news_block ( news ) # \u9884\u5904\u7406\u77ed\u89c6\u9891 if \"video\" not in exclude : video = soup . find ( \"div\" , class_ = \"op-short-video-pc\" ) video_results = self . webSubParser . parse_video_block ( video ) # \u9884\u5904\u7406\u8fd0\u7b97 if \"calc\" not in exclude : calc = soup . find ( \"div\" , class_ = \"op_new_cal_screen\" ) # \u9884\u5904\u7406\u76f8\u5173\u641c\u7d22 if \"related\" not in exclude : try : _related = soup . findAll ( \"table\" )[ - 1 ] . findAll ( \"td\" ) except AttributeError : _related = [] related = [] # \u4e00\u4e2a\u4e00\u4e2aappend\u76f8\u5173\u641c\u7d22 for _ in _related : if _ . text : related . append ( self . _format ( _ . text )) # \u9884\u5904\u7406\u767e\u79d1 if \"baike\" not in exclude : baike = soup . find ( \"div\" , class_ = \"c-container\" , tpl = \"bk_polysemy\" ) baike = self . webSubParser . parse_baike_block ( baike ) # \u9884\u5904\u7406\u8d34\u5427 if \"tieba\" not in exclude : tieba = BeautifulSoup ( content , \"html.parser\" ) . find ( \"div\" , srcid = \"10\" ) tieba = self . webSubParser . parse_tieba_block ( tieba ) if \"music\" not in exclude : music = BeautifulSoup ( content , \"html.parser\" ) . find ( \"div\" , class_ = \"result-op\" , tpl = \"yl_music_song\" ) music = self . webSubParser . parse_music_block ( music ) # \u9884\u5904\u7406\u535a\u5ba2 article_tags = BeautifulSoup ( content , \"html.parser\" ) . findAll ( \"article\" ) if \"blog\" not in exclude : blog = None for tmp in article_tags : if tmp [ \"class\" ][ - 1 ] . startswith ( \"open-source-software-blog\" ): blog = tmp break blog = self . webSubParser . parse_blog_block ( blog ) # \u9884\u5904\u7406\u7801\u4e91 if \"gitee\" not in exclude : gitee = None for tmp in article_tags : if tmp [ \"class\" ][ - 1 ] . startswith ( \"osc-gitee\" ): gitee = tmp break gitee = self . webSubParser . parse_gitee_block ( gitee ) # \u52a0\u8f7d\u8d34\u5427 if \"tieba\" not in exclude and tieba : pre_results . append ( dict ( type = \"tieba\" , result = tieba )) # \u52a0\u8f7d\u535a\u5ba2 if \"blog\" not in exclude and blog : pre_results . append ( dict ( type = \"blog\" , result = blog )) # \u52a0\u8f7d\u7801\u4e91 if \"gitee\" not in exclude and gitee : pre_results . append ( dict ( type = \"gitee\" , result = gitee )) # \u52a0\u8f7d\u641c\u7d22\u7ed3\u679c\u603b\u6570 # \u5df2\u7ecf\u79fb\u52a8\u5230\u6839\u5b57\u5178\u4e2d # if num != 0: # pre_results.append(dict(type=\"total\", result=num)) # \u52a0\u8f7d\u8fd0\u7b97 if \"calc\" not in exclude and calc : pre_results . append ( dict ( type = \"calc\" , process = str ( calc . find ( \"p\" , class_ = \"op_new_val_screen_process\" ) . find ( \"span\" ) . text ), result = str ( calc . find ( \"p\" , class_ = \"op_new_val_screen_result\" ) . find ( \"span\" ) . text ), ) ) # \u52a0\u8f7d\u76f8\u5173\u641c\u7d22 if \"related\" not in exclude and related : pre_results . append ( dict ( type = \"related\" , results = related )) # \u52a0\u8f7d\u8d44\u8baf if \"news\" not in exclude and news_detail : pre_results . append ( dict ( type = \"news\" , results = news_detail )) # \u52a0\u8f7d\u77ed\u89c6\u9891 if \"video\" not in exclude and video_results : pre_results . append ( dict ( type = \"video\" , results = video_results )) # \u52a0\u8f7d\u767e\u79d1 if \"baike\" not in exclude and baike : pre_results . append ( dict ( type = \"baike\" , result = baike )) # \u52a0\u8f7d\u97f3\u4e50 if \"music\" not in exclude and music : pre_results . append ( dict ( type = \"music\" , result = music )) # \u9884\u5904\u7406\u6e90\u7801 soup = BeautifulSoup ( content , \"html.parser\" ) results = soup . findAll ( \"div\" , class_ = \"result\" ) res = [] for result in results : des = None try : result [ \"tpl\" ] except : continue soup = BeautifulSoup ( self . _minify ( str ( result )), \"html.parser\" ) # \u94fe\u63a5 href = soup . find ( \"a\" ) . get ( \"href\" ) . strip () # \u6807\u9898 title = self . _format ( str ( soup . find ( \"a\" ) . text )) # \u65f6\u95f4 try : time = self . _format ( soup . findAll ( \"div\" , class_ = \"c-abstract\" )[ 0 ] . find ( \"span\" , class_ = \"newTimeFactor_before_abs\" ) . text ) except ( AttributeError , IndexError ): time = None try : # \u7b80\u4ecb des = soup . find_all ( \"div\" , class_ = \"c-abstract\" )[ 0 ] . text soup = BeautifulSoup ( str ( result ), \"html.parser\" ) des = self . _format ( des ) . lstrip ( str ( time )) . strip () except IndexError : try : des = des . replace ( \"mn\" , \"\" ) except ( UnboundLocalError , AttributeError ): des = None if time : time = time . split ( \"-\" )[ 0 ] . strip () # \u56e0\u4e3a\u767e\u5ea6\u7684\u94fe\u63a5\u662f\u52a0\u5bc6\u7684\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u53bb\u8bbf\u95ee # \u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u5206\u6790\u94fe\u63a5\u90e8\u5206\u6682\u7565 # if href is not None: # try: # # \u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u8fd9\u91cc\u8bbe\u7f6e1\u79d2\u8d85\u65f6 # r = requests.get(href, timeout=1) # href = r.url # except: # # \u83b7\u53d6\u7f51\u9875\u5931\u8d25\uff0c\u9ed8\u8ba4\u6362\u56de\u539f\u52a0\u5bc6\u94fe\u63a5 # href = href # # \u5206\u6790\u94fe\u63a5 # if href: # parse = urlparse(href) # domain = parse.netloc # prepath = parse.path.split('/') # path = [] # for loc in prepath: # if loc != '': # path.append(loc) # else: # domain = None # path = None try : result [ \"tpl\" ] except : pass is_not_special = ( result [ \"tpl\" ] not in [ \"short_video_pc\" , \"sp_realtime_bigpic5\" , \"bk_polysemy\" , \"tieba_general\" , \"yl_music_song\" , ] and result . find ( \"article\" ) is None ) domain = None if is_not_special : # \u786e\u4fdd\u4e0d\u662f\u7279\u6b8a\u7c7b\u578b\u7684\u7ed3\u679c # \u83b7\u53d6\u53ef\u89c1\u7684\u57df\u540d try : domain = ( result . find ( \"div\" , class_ = \"c-row\" ) . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"div\" , class_ = \"se_st_footer\" ) . find ( \"a\" , class_ = \"c-showurl\" ) . text ) except Exception : try : domain = ( result . find ( \"div\" , class_ = \"c-row\" ) . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"p\" , class_ = \"op-bk-polysemy-move\" ) . find ( \"span\" , class_ = \"c-showurl\" ) . text ) except Exception : try : domain = ( result . find ( \"div\" , class_ = \"se_st_footer\" ) . find ( \"a\" , class_ = \"c-showurl\" ) . text ) except : domain = None if domain : domain = domain . replace ( \" \" , \"\" ) # \u767e\u5ea6\u5feb\u7167 snapshot = result . find ( \"a\" , class_ = \"kuaizhao\" ) if snapshot is not None : snapshot = snapshot [ \"href\" ] # \u52a0\u5165\u7ed3\u679c if title and href and is_not_special : res . append ( { \"title\" : title , \"des\" : des , \"origin\" : domain , \"url\" : href , \"time\" : time , \"snapshot\" : snapshot , \"type\" : \"result\" , } ) soup = BeautifulSoup ( content , \"html.parser\" ) soup = BeautifulSoup ( str ( soup . findAll ( \"div\" , id = \"page\" )[ 0 ]), \"html.parser\" ) # \u5206\u9875 # pages_ = soup.findAll(\"span\", class_=\"pc\") # pages = [] # for _ in pages_: # pages.append(int(_.text)) # # \u5982\u679c\u641c\u7d22\u7ed3\u679c\u4ec5\u6709\u4e00\u9875\u65f6\uff0c\u767e\u5ea6\u4e0d\u4f1a\u663e\u793a\u5e95\u90e8\u5bfc\u822a\u680f # # \u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u8bbe\u7f6e\u62101\uff0c\u5982\u679c\u4e0d\u8bbe\u4f1a\u62a5\u9519`TypeError` # if not pages: # pages = [1] # \u8bbe\u7f6e\u6700\u7ec8\u7ed3\u679c result = pre_results result . extend ( res ) return { \"results\" : result , # \u6700\u5927\u9875\u6570 # \"pages\": max(pages), \"total\" : num , } parse_wenku ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801\u3002 Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u6587\u5e93\u641c\u7d22API\u63a5\u53e3JSON\u6570\u636e required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_wenku ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801\u3002 Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u6587\u5e93\u641c\u7d22API\u63a5\u53e3JSON\u6570\u636e Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" results = [] pages = 0 _ = json . loads ( content ) if _ [ \"status\" ][ \"msg\" ] != \"success\" : raise RuntimeError for res in _ [ \"data\" ][ \"normalResult\" ]: info = res [ \"docInfo\" ] author = res [ \"authorInfo\" ] title = ( info [ \"title\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) . replace ( \" - \u767e\u5ea6\u6587\u5e93\" , \"\" ) ) des = info [ \"content\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) pub_date = strftime ( \"%Y-%m- %d \" , localtime ( int ( info [ \"createTime\" ]))) page_num = info [ \"pageNum\" ] score = info [ \"qualityScore\" ] downloads = info [ \"downloadCount\" ] url = info [ \"url\" ] is_vip = info [ \"flag\" ] == 28 u_name = author [ \"uname\" ] u_url = f \"https://wenku.baidu.com/u/ { u_name } ?uid= { author [ 'uid' ] } \" results . append ( { \"title\" : title , \"des\" : des , \"pub_date\" : pub_date , \"pages\" : page_num , \"quality\" : score , \"downloads\" : downloads , \"url\" : url , \"is_vip\" : is_vip , \"uploader\" : { \"name\" : u_name , \"url\" : u_url }, } ) pages = math . ceil ( ( _ [ \"data\" ][ \"total\" ] - len ( _ [ \"data\" ][ \"normalResult\" ])) / 10 + 1 ) return { \"results\" : results , \"pages\" : pages } parse_zhidao ( self , content ) \u2693\ufe0e \u89e3\u6790\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u77e5\u9053\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_zhidao ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u77e5\u9053\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( self . _minify ( content ), \"html.parser\" ) # \u641c\u7d22\u7ed3\u679c\u603b\u6570 total = int ( bs . find ( \"div\" , class_ = \"wgt-picker\" ) . find ( \"span\" , class_ = \"f-lighter\" ) . text . split ( \"\u5171\" , 1 )[ - 1 ] . split ( \"\u6761\u7ed3\u679c\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u6240\u6709\u641c\u7d22\u7ed3\u679c list_ = bs . find ( \"div\" , class_ = \"list\" ) . findAll ( \"dl\" ) results = [] for item in list_ : # \u5c4f\u853d\u4f01\u4e1a\u56de\u7b54 if \"ec-oad\" in item [ \"class\" ]: continue # print(item.prettify() + '\\n\\n\\n\\n\\n\\n\\n') # \u6807\u9898 title = item . find ( \"dt\" ) . text . strip ( \" \\n \" ) # \u94fe\u63a5 try : url = item . find ( \"dt\" ) . find ( \"a\" )[ \"href\" ] except KeyError : url = item . find ( \"dt\" ) . find ( \"a\" )[ \"data-href\" ] if item . find ( \"dd\" , class_ = \"video-content\" ) is not None : # \u95ee\u9898 __ = item . find ( \"dd\" , class_ = \"summary\" ) question = __ . text . strip ( \"\u95ee\uff1a\" ) if __ is not None else None item = item . find ( \"div\" , class_ = \"right\" ) tmp = item . findAll ( \"div\" , class_ = \"video-text\" ) # # \u7b80\u4ecb # des = self._format(tmp[2].text) answer = None # \u56de\u7b54\u8005 answerer = tmp [ 0 ] . text . strip ( \" \\n \" ) . strip ( \"\u56de\u7b54: \\u2002 \" ) # \u53d1\u5e03\u65e5\u671f date = self . _format ( tmp [ 1 ] . text . strip ( \"\u65f6\u95f4:\" )) # \u56de\u7b54\u603b\u6570 count = None # \u8d5e\u540c\u6570 try : agree = int ( tmp [ 2 ] . text . strip ( \"\u83b7\u8d5e: \\u2002 \" ) . strip ( \"\u6b21\" )) except ValueError : agree = 0 answer = tmp [ 2 ] . text . strip () type_ = \"video\" else : # \u56de\u7b54 __ = item . find ( \"dd\" , class_ = \"answer\" ) answer = __ . text . strip ( \"\u7b54\uff1a\" ) if __ is not None else None # \u95ee\u9898 __ = item . find ( \"dd\" , class_ = \"summary\" ) question = __ . text . strip ( \"\u95ee\uff1a\" ) if __ is not None else None tmp = item . find ( \"dd\" , class_ = \"explain\" ) . findAll ( \"span\" , class_ = \"mr-8\" ) # \u53d1\u5e03\u65e5\u671f date = ( item . find ( \"dd\" , class_ = \"explain\" ) . find ( \"span\" , class_ = \"mr-7\" ) . text ) # \u56de\u7b54\u603b\u6570 try : count = int ( str ( tmp [ - 1 ] . text ) . strip ( \" \\n \" ) . strip ( \"\u4e2a\u56de\u7b54\" )) except : count = None # \u56de\u7b54\u8005 answerer = tmp [ - 2 ] . text . strip ( \" \\n \" ) . strip ( \"\u56de\u7b54\u8005: \\xa0 \" ) # \u8d5e\u540c\u6570 __ = item . find ( \"dd\" , class_ = \"explain\" ) . find ( \"span\" , class_ = \"ml-10\" ) agree = int ( __ . text . strip ()) if __ is not None else 0 type_ = \"normal\" # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"question\" : question , \"answer\" : answer , \"date\" : date , \"count\" : count , \"url\" : url , \"agree\" : agree , \"answerer\" : answerer , # \"type\": type_ } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u5206\u9875 # wrap = bs.find(\"div\", class_=\"pager\") # pages_ = wrap.findAll(\"a\")[:-2] # if \"\u4e0b\u4e00\u9875\" in pages_[-1].text: # pages = pages_[-2].text # else: # pages = pages_[-1].text return { \"results\" : results , # \u53d6\u6700\u5927\u9875\u7801 # \"pages\": int(pages), \"total\" : total , }","title":"__init__.py"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__","text":"","title":"__init__"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser","text":"","title":"Parser"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.__init__","text":"\u767e\u5ea6\u641c\u7d22\u89e3\u6790\u5668 Source code in baiduspider\\parser\\__init__.py def __init__ ( self ) -> None : \"\"\"\u767e\u5ea6\u641c\u7d22\u89e3\u6790\u5668\"\"\" super () . __init__ () self . webSubParser = WebSubParser ()","title":"__init__()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_baike","text":"\u89e3\u6790\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u767e\u79d1\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_baike ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u767e\u79d1\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u767e\u79d1\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" code = self . _minify ( content ) # \u521b\u5efaBeautifulSoup\u5bf9\u8c61 soup = ( BeautifulSoup ( code , \"html.parser\" ) . find ( \"div\" , class_ = \"body-wrapper\" ) . find ( \"div\" , class_ = \"searchResult\" ) ) # \u83b7\u53d6\u767e\u79d1\u603b\u6570 total = int ( soup . find ( \"div\" , class_ = \"result-count\" ) . text . strip ( \"\u767e\u5ea6\u767e\u79d1\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u8bcd\u6761\u7ea6\" ) . strip ( \"\u4e2a\" ) ) # \u83b7\u53d6\u6240\u6709\u7ed3\u679c container = soup . findAll ( \"dd\" ) results = [] for res in container : # \u94fe\u63a5 url = \"https://baike.baidu.com\" + self . _format ( res . find ( \"a\" , class_ = \"result-title\" )[ \"href\" ] ) # \u6807\u9898 title = self . _format ( res . find ( \"a\" , class_ = \"result-title\" ) . text ) # \u7b80\u4ecb des = self . _format ( res . find ( \"p\" , class_ = \"result-summary\" ) . text ) # \u66f4\u65b0\u65e5\u671f upd_date = self . _format ( res . find ( \"span\" , class_ = \"result-date\" ) . text ) # \u751f\u6210\u7ed3\u679c results . append ( { \"title\" : title , \"des\" : des , \"upd_date\" : upd_date , \"url\" : url } ) return { \"results\" : results , \"total\" : total }","title":"parse_baike()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_jingyan","text":"\u89e3\u6790\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_jingyan ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" # \u6700\u5c0f\u5316\u4ee3\u7801 code = self . _minify ( content ) bs = BeautifulSoup ( code , \"html.parser\" ) total = int ( bs . find ( \"div\" , class_ = \"result-num\" ) . text . split ( \"\u7ea6\" , 1 )[ - 1 ] . split ( \"\u4e2a\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u52a0\u8f7d\u641c\u7d22\u7ed3\u679c data = bs . find ( \"div\" , class_ = \"search-list\" ) . findAll ( \"dl\" ) results = [] for res in data : # \u6807\u9898 title = self . _format ( res . find ( \"dt\" ) . find ( \"a\" ) . text ) # \u94fe\u63a5 url = \"https://jingyan.baidu.com/\" + res . find ( \"dt\" ) . find ( \"a\" )[ \"href\" ] # \u7b80\u4ecb des = self . _format ( res . find ( \"dd\" ) . find ( \"div\" , class_ = \"summary\" ) . find ( \"span\" , class_ = \"abstract\" ) . text ) # \u83b7\u53d6\u53d1\u5e03\u65e5\u671f\u548c\u5206\u7c7b\uff0c\u4f4d\u4e8e`<span class=\"cate\"/>`\u4e2d _ = res . find ( \"dd\" ) . find ( \"div\" , class_ = \"summary\" ) . find ( \"span\" , class_ = \"cate\" ) tmp = self . _format ( _ . text ) . split ( \"-\" ) # \u53d1\u5e03\u65e5\u671f pub_date = self . _format ( tmp [ 1 ]) . replace ( \"/\" , \"-\" ) # \u5206\u7c7b category = self . _format ( tmp [ - 1 ]) . strip ( \"\u5206\u7c7b\uff1a\" ) . split ( \">\" ) # \u53d1\u5e03\u8005 publisher = { \"name\" : self . _format ( _ . find ( \"a\" ) . text ), \"url\" : \"https://jingyan.baidu.com\" + _ . find ( \"a\" )[ \"href\" ], } # \u652f\u6301\u7968\u6570 votes = int ( self . _format ( res . find ( \"dt\" ) . find ( \"span\" , class_ = \"succ-times\" ) . text ) . strip ( \"\u5f97\u7968\" ) ) # \u662f\u5426\u4e3a\u539f\u521b\u7ecf\u9a8c try : res . find ( \"span\" , class_ = \"i-original\" ) . text original = True except : original = False # \u662f\u5426\u4e3a\u4f18\u79c0\u7ecf\u9a8c try : res . find ( \"span\" , class_ = \"i-good-exp\" ) . text outstanding = True except : outstanding = False # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"des\" : des , \"pub_date\" : pub_date , \"category\" : category , \"votes\" : votes , \"publisher\" : publisher , \"is_original\" : original , \"is_outstanding\" : outstanding , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c\u5230\u96c6\u5408\u4e2d # \u83b7\u53d6\u5206\u9875 # pages_ = bs.find(\"div\", class_=\"pager-wrap\").findAll(\"a\", class_=\"pg-btn\") # if not pages_: # return {\"results\": results, \"pages\": 1} # if \"\u4e0b\u4e00\u9875\" in pages_[-1].text: # pages_ = pages_[:-1] # pages = int(self._format(pages_[-1].text)) return { \"results\" : results , \"total\" : total }","title":"parse_jingyan()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_news","text":"\u89e3\u6790\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u8d44\u8baf\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_news ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u8d44\u8baf\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( self . _format ( content ), \"html.parser\" ) # \u641c\u7d22\u7ed3\u679c\u603b\u6570 total = int ( bs . find ( \"div\" , id = \"wrapper_wrapper\" ) . find ( \"span\" , class_ = \"nums\" ) . text . split ( \"\u8d44\u8baf\" , 1 )[ - 1 ] . split ( \"\u7bc7\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u641c\u7d22\u7ed3\u679c\u5bb9\u5668 data = ( bs . find ( \"div\" , id = \"content_left\" ) . findAll ( \"div\" )[ 1 ] . findAll ( \"div\" , class_ = \"result-op\" ) ) results = [] for res in data : # \u6807\u9898 title = self . _format ( res . find ( \"h3\" ) . find ( \"a\" ) . text ) # \u94fe\u63a5 url = res . find ( \"h3\" ) . find ( \"a\" )[ \"href\" ] # \u7b80\u4ecb des = ( res . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"span\" , class_ = \"c-color-text\" ) . text ) _ = res . find ( \"div\" , class_ = \"c-span-last\" ) # \u4f5c\u8005 author = _ . find ( \"span\" , class_ = \"c-gap-right\" ) . text # \u53d1\u5e03\u65e5\u671f try : date = _ . find ( \"span\" , class_ = \"c-color-gray2\" ) . text except AttributeError : date = None # \u5c01\u9762\u56fe\u7247 try : cover = res . find ( \"div\" , class_ = \"c-img-radius-large\" ) . find ( \"img\" )[ \"src\" ] except : cover = None # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"author\" : author , \"date\" : date , \"des\" : des , \"url\" : url , \"cover\" : cover , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u6240\u6709\u9875\u6570 # pages_ = bs.find(\"div\", id=\"page\").findAll(\"a\") # # \u8fc7\u6ee4\u9875\u7801 # if \"< \u4e0a\u4e00\u9875\" in pages_[0].text: # pages_ = pages_[1:] # if \"\u4e0b\u4e00\u9875 >\" in pages_[-1].text: # pages_ = pages_[:-1] return { \"results\" : results , \"total\" : total }","title":"parse_news()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_pic","text":"\u89e3\u6790\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u56fe\u7247\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py @handle_err def parse_pic ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u56fe\u7247\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" # \u4eceJavaScript\u4e2d\u52a0\u8f7d\u6570\u636e # \u56e0\u4e3aJavaScript\u5f88\u50cfJSON\uff08JavaScript Object Notation\uff09\uff0c\u6240\u4ee5\u76f4\u63a5\u7528json\u52a0\u8f7d\u5c31\u884c\u4e86 # \u8fd8\u6709\u8981\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u628a\u51fd\u6570\u548c\u65e0\u7528\u7684\u62ec\u53f7\u8fc7\u6ee4\u6389 error = None try : data = json . loads ( content . split ( \"flip.setData('imgData', \" )[ 1 ] . split ( \"flip.setData(\" )[ 0 ] . split ( \"]);\" )[ 0 ] . replace ( \");\" , \"\" ) . replace ( \"< \\\\ /strong>\" , \"</strong>\" ) . replace ( \" \\\\ '\" , \"'\" ) . replace ( ' \\\\ \"' , \"'\" ), strict = False , ) except Exception as err : error = err if type ( err ) in [ IndexError , AttributeError ]: raise ParseError ( \"Invalid HTML content.\" ) finally : if error : raise ParseError ( str ( error )) soup = BeautifulSoup ( content , \"html.parser\" ) total = int ( soup . find ( \"div\" , id = \"resultInfo\" ) . text . split ( \"\u7ea6\" )[ - 1 ] . split ( \"\u5f20\" )[ 0 ] . replace ( \",\" , \"\" ) ) results = [] for _ in data [ \"data\" ][: - 1 ]: if _ : # \u6807\u9898 title = str ( _ [ \"fromPageTitle\" ]) . encode ( \"utf-8\" ) . decode ( \"utf-8\" ) # \u53bb\u9664\u6807\u9898\u91cc\u7684HTML title = unescape ( self . _remove_html ( title )) # \u94fe\u63a5 url = _ [ \"objURL\" ] # \u6765\u6e90\u57df\u540d host = _ [ \"fromURLHost\" ] # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"host\" : host } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u5206\u9875 # bs = BeautifulSoup(content, \"html.parser\") # pages_ = bs.find(\"div\", id=\"page\").findAll(\"span\", class_=\"pc\") # pages = [] # for _ in pages_: # pages.append(int(_.text)) return { \"results\" : results , # \u53d6\u6700\u5927\u9875\u7801 # \"pages\": max(pages), \"total\" : total , }","title":"parse_pic()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_video","text":"\u89e3\u6790\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u89c6\u9891\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_video ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u89c6\u9891\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u89c6\u9891\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( content , \"html.parser\" ) # \u9501\u5b9a\u7ed3\u679cdiv data = bs . findAll ( \"div\" , class_ = \"video_short\" ) if len ( data ) == 0 : return { \"results\" : None } results = [] for res in data : __ = res . find ( \"div\" , class_ = \"video_small_intro\" ) _ = __ . find ( \"a\" ) # \u6807\u9898 title = self . _format ( _ . text ) # \u94fe\u63a5 url = _ [ \"href\" ] # \u5c01\u9762\u56fe\u7247\u94fe\u63a5 img = res . find ( \"img\" , class_ = \"border-radius\" )[ \"src\" ] . rsplit ( \"?\" , 1 )[ 0 ] # \u65f6\u957f length_ = res . find ( \"span\" , class_ = \"video_play_timer\" ) . text _ = [ int ( i ) for i in length_ . split ( \":\" )] if len ( _ ) < 3 : length_ = time ( minute = _ [ 0 ], second = _ [ 1 ]) else : length_ = time ( _ [ 0 ], _ [ 1 ], _ [ 2 ]) # \u7b80\u4ecb try : des = __ . find ( \"div\" , class_ = \"c-color-text\" ) . text except AttributeError : des = None # \u6765\u6e90 try : origin = self . _format ( __ . find ( \"span\" , class_ = \"wetSource\" ) . text ) . strip ( \"\u6765\u6e90\uff1a\" ) except AttributeError : origin = None # \u53d1\u5e03\u65f6\u95f4 pub_time : str = __ . findAll ( \"span\" , class_ = \"c-font-normal\" )[ - 1 ] . text . strip ( \"\u53d1\u5e03\u65f6\u95f4\uff1a\" ) try : __ = [ int ( i ) for i in pub_time . split ( \"-\" )] except ValueError : __ = self . _convert_time ( pub_time , True ) pub_time = datetime ( __ [ 0 ], __ [ 1 ], __ [ 2 ]) # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"url\" : url , \"img\" : img , \"length\" : length_ , \"des\" : des , \"origin\" : origin , \"pub_time\" : pub_time , } results . append ( result ) # \u52a0\u5165\u7ed3\u679c return { \"results\" : results }","title":"parse_video()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_web","text":"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801. required exclude list \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_web ( self , content : str , exclude : list ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u7f51\u9875\u641c\u7d22HTML\u6e90\u7801. exclude (list): \u8981\u5c4f\u853d\u7684\u63a7\u4ef6. Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" soup = BeautifulSoup ( content , \"html.parser\" ) if soup . find ( \"div\" , id = \"content_left\" ) is None : return { \"results\" : [], \"pages\" : 0 , \"total\" : 0 } # \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\u603b\u6570 tmp1 = soup . findAll ( \"div\" , class_ = \"result-molecule\" ) idx_ = 0 ele = None while ele is None and idx_ < len ( tmp1 ): tmp = tmp1 [ idx_ ] . findAll ( \"span\" ) found = False for t in tmp : if \"\u767e\u5ea6\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u7ed3\u679c\" in t . text : ele = t found = True break if found : break idx_ += 1 num = int ( str ( ele . text ) . strip ( \"\u767e\u5ea6\u4e3a\u60a8\u627e\u5230\u76f8\u5173\u7ed3\u679c\" ) . strip ( \"\u7ea6\" ) . strip ( \"\u4e2a\" ) . replace ( \",\" , \"\" ) ) # \u5b9a\u4e49\u9884\u7ed3\u679c\uff08\u8fd0\u7b97\u4ee5\u53ca\u76f8\u5173\u641c\u7d22\uff09 pre_results = [] # \u9884\u5904\u7406\u65b0\u95fb if \"news\" not in exclude : news = soup . find ( \"div\" , class_ = \"result-op\" , srcid = \"19\" ) news_detail = self . webSubParser . parse_news_block ( news ) # \u9884\u5904\u7406\u77ed\u89c6\u9891 if \"video\" not in exclude : video = soup . find ( \"div\" , class_ = \"op-short-video-pc\" ) video_results = self . webSubParser . parse_video_block ( video ) # \u9884\u5904\u7406\u8fd0\u7b97 if \"calc\" not in exclude : calc = soup . find ( \"div\" , class_ = \"op_new_cal_screen\" ) # \u9884\u5904\u7406\u76f8\u5173\u641c\u7d22 if \"related\" not in exclude : try : _related = soup . findAll ( \"table\" )[ - 1 ] . findAll ( \"td\" ) except AttributeError : _related = [] related = [] # \u4e00\u4e2a\u4e00\u4e2aappend\u76f8\u5173\u641c\u7d22 for _ in _related : if _ . text : related . append ( self . _format ( _ . text )) # \u9884\u5904\u7406\u767e\u79d1 if \"baike\" not in exclude : baike = soup . find ( \"div\" , class_ = \"c-container\" , tpl = \"bk_polysemy\" ) baike = self . webSubParser . parse_baike_block ( baike ) # \u9884\u5904\u7406\u8d34\u5427 if \"tieba\" not in exclude : tieba = BeautifulSoup ( content , \"html.parser\" ) . find ( \"div\" , srcid = \"10\" ) tieba = self . webSubParser . parse_tieba_block ( tieba ) if \"music\" not in exclude : music = BeautifulSoup ( content , \"html.parser\" ) . find ( \"div\" , class_ = \"result-op\" , tpl = \"yl_music_song\" ) music = self . webSubParser . parse_music_block ( music ) # \u9884\u5904\u7406\u535a\u5ba2 article_tags = BeautifulSoup ( content , \"html.parser\" ) . findAll ( \"article\" ) if \"blog\" not in exclude : blog = None for tmp in article_tags : if tmp [ \"class\" ][ - 1 ] . startswith ( \"open-source-software-blog\" ): blog = tmp break blog = self . webSubParser . parse_blog_block ( blog ) # \u9884\u5904\u7406\u7801\u4e91 if \"gitee\" not in exclude : gitee = None for tmp in article_tags : if tmp [ \"class\" ][ - 1 ] . startswith ( \"osc-gitee\" ): gitee = tmp break gitee = self . webSubParser . parse_gitee_block ( gitee ) # \u52a0\u8f7d\u8d34\u5427 if \"tieba\" not in exclude and tieba : pre_results . append ( dict ( type = \"tieba\" , result = tieba )) # \u52a0\u8f7d\u535a\u5ba2 if \"blog\" not in exclude and blog : pre_results . append ( dict ( type = \"blog\" , result = blog )) # \u52a0\u8f7d\u7801\u4e91 if \"gitee\" not in exclude and gitee : pre_results . append ( dict ( type = \"gitee\" , result = gitee )) # \u52a0\u8f7d\u641c\u7d22\u7ed3\u679c\u603b\u6570 # \u5df2\u7ecf\u79fb\u52a8\u5230\u6839\u5b57\u5178\u4e2d # if num != 0: # pre_results.append(dict(type=\"total\", result=num)) # \u52a0\u8f7d\u8fd0\u7b97 if \"calc\" not in exclude and calc : pre_results . append ( dict ( type = \"calc\" , process = str ( calc . find ( \"p\" , class_ = \"op_new_val_screen_process\" ) . find ( \"span\" ) . text ), result = str ( calc . find ( \"p\" , class_ = \"op_new_val_screen_result\" ) . find ( \"span\" ) . text ), ) ) # \u52a0\u8f7d\u76f8\u5173\u641c\u7d22 if \"related\" not in exclude and related : pre_results . append ( dict ( type = \"related\" , results = related )) # \u52a0\u8f7d\u8d44\u8baf if \"news\" not in exclude and news_detail : pre_results . append ( dict ( type = \"news\" , results = news_detail )) # \u52a0\u8f7d\u77ed\u89c6\u9891 if \"video\" not in exclude and video_results : pre_results . append ( dict ( type = \"video\" , results = video_results )) # \u52a0\u8f7d\u767e\u79d1 if \"baike\" not in exclude and baike : pre_results . append ( dict ( type = \"baike\" , result = baike )) # \u52a0\u8f7d\u97f3\u4e50 if \"music\" not in exclude and music : pre_results . append ( dict ( type = \"music\" , result = music )) # \u9884\u5904\u7406\u6e90\u7801 soup = BeautifulSoup ( content , \"html.parser\" ) results = soup . findAll ( \"div\" , class_ = \"result\" ) res = [] for result in results : des = None try : result [ \"tpl\" ] except : continue soup = BeautifulSoup ( self . _minify ( str ( result )), \"html.parser\" ) # \u94fe\u63a5 href = soup . find ( \"a\" ) . get ( \"href\" ) . strip () # \u6807\u9898 title = self . _format ( str ( soup . find ( \"a\" ) . text )) # \u65f6\u95f4 try : time = self . _format ( soup . findAll ( \"div\" , class_ = \"c-abstract\" )[ 0 ] . find ( \"span\" , class_ = \"newTimeFactor_before_abs\" ) . text ) except ( AttributeError , IndexError ): time = None try : # \u7b80\u4ecb des = soup . find_all ( \"div\" , class_ = \"c-abstract\" )[ 0 ] . text soup = BeautifulSoup ( str ( result ), \"html.parser\" ) des = self . _format ( des ) . lstrip ( str ( time )) . strip () except IndexError : try : des = des . replace ( \"mn\" , \"\" ) except ( UnboundLocalError , AttributeError ): des = None if time : time = time . split ( \"-\" )[ 0 ] . strip () # \u56e0\u4e3a\u767e\u5ea6\u7684\u94fe\u63a5\u662f\u52a0\u5bc6\u7684\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u53bb\u8bbf\u95ee # \u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u5206\u6790\u94fe\u63a5\u90e8\u5206\u6682\u7565 # if href is not None: # try: # # \u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u8fd9\u91cc\u8bbe\u7f6e1\u79d2\u8d85\u65f6 # r = requests.get(href, timeout=1) # href = r.url # except: # # \u83b7\u53d6\u7f51\u9875\u5931\u8d25\uff0c\u9ed8\u8ba4\u6362\u56de\u539f\u52a0\u5bc6\u94fe\u63a5 # href = href # # \u5206\u6790\u94fe\u63a5 # if href: # parse = urlparse(href) # domain = parse.netloc # prepath = parse.path.split('/') # path = [] # for loc in prepath: # if loc != '': # path.append(loc) # else: # domain = None # path = None try : result [ \"tpl\" ] except : pass is_not_special = ( result [ \"tpl\" ] not in [ \"short_video_pc\" , \"sp_realtime_bigpic5\" , \"bk_polysemy\" , \"tieba_general\" , \"yl_music_song\" , ] and result . find ( \"article\" ) is None ) domain = None if is_not_special : # \u786e\u4fdd\u4e0d\u662f\u7279\u6b8a\u7c7b\u578b\u7684\u7ed3\u679c # \u83b7\u53d6\u53ef\u89c1\u7684\u57df\u540d try : domain = ( result . find ( \"div\" , class_ = \"c-row\" ) . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"div\" , class_ = \"se_st_footer\" ) . find ( \"a\" , class_ = \"c-showurl\" ) . text ) except Exception : try : domain = ( result . find ( \"div\" , class_ = \"c-row\" ) . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"p\" , class_ = \"op-bk-polysemy-move\" ) . find ( \"span\" , class_ = \"c-showurl\" ) . text ) except Exception : try : domain = ( result . find ( \"div\" , class_ = \"se_st_footer\" ) . find ( \"a\" , class_ = \"c-showurl\" ) . text ) except : domain = None if domain : domain = domain . replace ( \" \" , \"\" ) # \u767e\u5ea6\u5feb\u7167 snapshot = result . find ( \"a\" , class_ = \"kuaizhao\" ) if snapshot is not None : snapshot = snapshot [ \"href\" ] # \u52a0\u5165\u7ed3\u679c if title and href and is_not_special : res . append ( { \"title\" : title , \"des\" : des , \"origin\" : domain , \"url\" : href , \"time\" : time , \"snapshot\" : snapshot , \"type\" : \"result\" , } ) soup = BeautifulSoup ( content , \"html.parser\" ) soup = BeautifulSoup ( str ( soup . findAll ( \"div\" , id = \"page\" )[ 0 ]), \"html.parser\" ) # \u5206\u9875 # pages_ = soup.findAll(\"span\", class_=\"pc\") # pages = [] # for _ in pages_: # pages.append(int(_.text)) # # \u5982\u679c\u641c\u7d22\u7ed3\u679c\u4ec5\u6709\u4e00\u9875\u65f6\uff0c\u767e\u5ea6\u4e0d\u4f1a\u663e\u793a\u5e95\u90e8\u5bfc\u822a\u680f # # \u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u8bbe\u7f6e\u62101\uff0c\u5982\u679c\u4e0d\u8bbe\u4f1a\u62a5\u9519`TypeError` # if not pages: # pages = [1] # \u8bbe\u7f6e\u6700\u7ec8\u7ed3\u679c result = pre_results result . extend ( res ) return { \"results\" : result , # \u6700\u5927\u9875\u6570 # \"pages\": max(pages), \"total\" : num , }","title":"parse_web()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_wenku","text":"\u89e3\u6790\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801\u3002 Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u6587\u5e93\u641c\u7d22API\u63a5\u53e3JSON\u6570\u636e required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_wenku ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801\u3002 Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u6587\u5e93\u641c\u7d22API\u63a5\u53e3JSON\u6570\u636e Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" results = [] pages = 0 _ = json . loads ( content ) if _ [ \"status\" ][ \"msg\" ] != \"success\" : raise RuntimeError for res in _ [ \"data\" ][ \"normalResult\" ]: info = res [ \"docInfo\" ] author = res [ \"authorInfo\" ] title = ( info [ \"title\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) . replace ( \" - \u767e\u5ea6\u6587\u5e93\" , \"\" ) ) des = info [ \"content\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) pub_date = strftime ( \"%Y-%m- %d \" , localtime ( int ( info [ \"createTime\" ]))) page_num = info [ \"pageNum\" ] score = info [ \"qualityScore\" ] downloads = info [ \"downloadCount\" ] url = info [ \"url\" ] is_vip = info [ \"flag\" ] == 28 u_name = author [ \"uname\" ] u_url = f \"https://wenku.baidu.com/u/ { u_name } ?uid= { author [ 'uid' ] } \" results . append ( { \"title\" : title , \"des\" : des , \"pub_date\" : pub_date , \"pages\" : page_num , \"quality\" : score , \"downloads\" : downloads , \"url\" : url , \"is_vip\" : is_vip , \"uploader\" : { \"name\" : u_name , \"url\" : u_url }, } ) pages = math . ceil ( ( _ [ \"data\" ][ \"total\" ] - len ( _ [ \"data\" ][ \"normalResult\" ])) / 10 + 1 ) return { \"results\" : results , \"pages\" : pages }","title":"parse_wenku()"},{"location":"api/baiduspider/parser/__init__.html#baiduspider.parser.__init__.Parser.parse_zhidao","text":"\u89e3\u6790\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Parameters: Name Type Description Default content str \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u77e5\u9053\u641c\u7d22HTML\u6e90\u7801 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c Source code in baiduspider\\parser\\__init__.py def parse_zhidao ( self , content : str ) -> dict : \"\"\"\u89e3\u6790\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u7684\u9875\u9762\u6e90\u4ee3\u7801. Args: content (str): \u5df2\u7ecf\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u7684\u767e\u5ea6\u77e5\u9053\u641c\u7d22HTML\u6e90\u7801 Returns: dict: \u89e3\u6790\u540e\u7684\u7ed3\u679c \"\"\" bs = BeautifulSoup ( self . _minify ( content ), \"html.parser\" ) # \u641c\u7d22\u7ed3\u679c\u603b\u6570 total = int ( bs . find ( \"div\" , class_ = \"wgt-picker\" ) . find ( \"span\" , class_ = \"f-lighter\" ) . text . split ( \"\u5171\" , 1 )[ - 1 ] . split ( \"\u6761\u7ed3\u679c\" , 1 )[ 0 ] . replace ( \",\" , \"\" ) ) # \u6240\u6709\u641c\u7d22\u7ed3\u679c list_ = bs . find ( \"div\" , class_ = \"list\" ) . findAll ( \"dl\" ) results = [] for item in list_ : # \u5c4f\u853d\u4f01\u4e1a\u56de\u7b54 if \"ec-oad\" in item [ \"class\" ]: continue # print(item.prettify() + '\\n\\n\\n\\n\\n\\n\\n') # \u6807\u9898 title = item . find ( \"dt\" ) . text . strip ( \" \\n \" ) # \u94fe\u63a5 try : url = item . find ( \"dt\" ) . find ( \"a\" )[ \"href\" ] except KeyError : url = item . find ( \"dt\" ) . find ( \"a\" )[ \"data-href\" ] if item . find ( \"dd\" , class_ = \"video-content\" ) is not None : # \u95ee\u9898 __ = item . find ( \"dd\" , class_ = \"summary\" ) question = __ . text . strip ( \"\u95ee\uff1a\" ) if __ is not None else None item = item . find ( \"div\" , class_ = \"right\" ) tmp = item . findAll ( \"div\" , class_ = \"video-text\" ) # # \u7b80\u4ecb # des = self._format(tmp[2].text) answer = None # \u56de\u7b54\u8005 answerer = tmp [ 0 ] . text . strip ( \" \\n \" ) . strip ( \"\u56de\u7b54: \\u2002 \" ) # \u53d1\u5e03\u65e5\u671f date = self . _format ( tmp [ 1 ] . text . strip ( \"\u65f6\u95f4:\" )) # \u56de\u7b54\u603b\u6570 count = None # \u8d5e\u540c\u6570 try : agree = int ( tmp [ 2 ] . text . strip ( \"\u83b7\u8d5e: \\u2002 \" ) . strip ( \"\u6b21\" )) except ValueError : agree = 0 answer = tmp [ 2 ] . text . strip () type_ = \"video\" else : # \u56de\u7b54 __ = item . find ( \"dd\" , class_ = \"answer\" ) answer = __ . text . strip ( \"\u7b54\uff1a\" ) if __ is not None else None # \u95ee\u9898 __ = item . find ( \"dd\" , class_ = \"summary\" ) question = __ . text . strip ( \"\u95ee\uff1a\" ) if __ is not None else None tmp = item . find ( \"dd\" , class_ = \"explain\" ) . findAll ( \"span\" , class_ = \"mr-8\" ) # \u53d1\u5e03\u65e5\u671f date = ( item . find ( \"dd\" , class_ = \"explain\" ) . find ( \"span\" , class_ = \"mr-7\" ) . text ) # \u56de\u7b54\u603b\u6570 try : count = int ( str ( tmp [ - 1 ] . text ) . strip ( \" \\n \" ) . strip ( \"\u4e2a\u56de\u7b54\" )) except : count = None # \u56de\u7b54\u8005 answerer = tmp [ - 2 ] . text . strip ( \" \\n \" ) . strip ( \"\u56de\u7b54\u8005: \\xa0 \" ) # \u8d5e\u540c\u6570 __ = item . find ( \"dd\" , class_ = \"explain\" ) . find ( \"span\" , class_ = \"ml-10\" ) agree = int ( __ . text . strip ()) if __ is not None else 0 type_ = \"normal\" # \u751f\u6210\u7ed3\u679c result = { \"title\" : title , \"question\" : question , \"answer\" : answer , \"date\" : date , \"count\" : count , \"url\" : url , \"agree\" : agree , \"answerer\" : answerer , # \"type\": type_ } results . append ( result ) # \u52a0\u5165\u7ed3\u679c # \u83b7\u53d6\u5206\u9875 # wrap = bs.find(\"div\", class_=\"pager\") # pages_ = wrap.findAll(\"a\")[:-2] # if \"\u4e0b\u4e00\u9875\" in pages_[-1].text: # pages = pages_[-2].text # else: # pages = pages_[-1].text return { \"results\" : results , # \u53d6\u6700\u5927\u9875\u7801 # \"pages\": int(pages), \"total\" : total , }","title":"parse_zhidao()"},{"location":"api/baiduspider/parser/subparser.html","text":"baiduspider.parser.subparser \u2693\ufe0e WebSubParser \u2693\ufe0e \u7f51\u9875\u641c\u7d22\u5b50\u89e3\u6790\u6a21\u5757\u3002 \u6b64\u6a21\u5757\u4e3a BaiduSpider.search_web \u51fd\u6570\u7684\u5b50\u6a21\u5757\uff0c\u7528\u4e8e\u89e3\u6790\u7f51\u9875\u641c\u7d22\u5b50\u6a21\u5757\u7684HTML\u4ee3\u7801 \u5e76\u8fd4\u56dePython\u5b57\u5178\u3002 parse_baike_block ( self , baike ) \u2693\ufe0e \u89e3\u6790\u767e\u79d1\u5b50\u5757 Parameters: Name Type Description Default baike BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_baike_block ( self , baike : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Args: baike (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if baike : b_title = self . _format ( baike . find ( \"h3\" ) . text ) b_url = baike . find ( \"a\" )[ \"href\" ] b_des = self . _format ( baike . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"div\" , class_ = \"c-font-normal\" ) . text ) try : b_cover = baike . find ( \"div\" , class_ = \"c-span3\" ) . find ( \"img\" )[ \"src\" ] b_cover_type = \"image\" except ( TypeError , AttributeError ): try : b_cover = ( baike . find ( \"div\" , class_ = \"op-bk-polysemy-imgWrap\" ) . find ( \"div\" , class_ = \"c-img\" )[ \"style\" ] . split ( \"url\" , 1 )[ - 1 ] . split ( \")\" , 1 )[ 0 ] . strip ( \"(\" ) ) b_cover_type = \"video\" except ( TypeError ): b_cover = None b_cover_type = None baike = { \"title\" : b_title , \"url\" : b_url , \"des\" : b_des , \"cover\" : b_cover , \"cover-type\" : b_cover_type , } return baike parse_blog_block ( self , blog ) \u2693\ufe0e \u89e3\u6790\u535a\u5ba2\u5b50\u5757 Parameters: Name Type Description Default blog BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u535a\u5ba2\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_blog_block ( self , blog : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u535a\u5ba2\u5b50\u5757 Args: blog (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u535a\u5ba2\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if blog is not None : blog = blog . find ( \"section\" ) b_title = blog . find ( \"h3\" , class_ = \"c-title\" ) . text b_url = blog . find ( \"a\" )[ \"href\" ] b_blogs_ = blog . findAll ( \"div\" , class_ = \"c-row\" ) b_blogs = [] for b in b_blogs_ : b_current_blog_header = b . find ( \"div\" ) b_blog_title = b_current_blog_header . find ( \"a\" ) . text b_blog_url = b_current_blog_header . find ( \"a\" )[ \"href\" ] b_blog_origin = b_current_blog_header . find ( \"span\" , class_ = \"nor-src-wrap\" ) . text try : b_current_blog_tags = b . findAll ( \"div\" )[ 1 ] . findAll ( \"span\" ) b_blog_tags = [ tag . text for tag in b_current_blog_tags ] except IndexError : b_blog_tags = [] b_blog_parent = b . find_parent ( \"div\" ) . findAll ( \"div\" ) b_blog_des = None for p in b_blog_parent : if p [ \"class\" ][ 0 ] . startswith ( \"blog-summary\" ): b_blog_des = p . text break b_blogs . append ( { \"title\" : b_blog_title , \"url\" : b_blog_url , \"origin\" : b_blog_origin , \"tags\" : b_blog_tags , \"des\" : b_blog_des , } ) blog = { \"title\" : b_title , \"url\" : b_url , \"blogs\" : b_blogs } return blog parse_gitee_block ( self , gitee ) \u2693\ufe0e \u89e3\u6790Gitee\u4ed3\u5e93\u5b50\u5757 Parameters: Name Type Description Default gitee BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u7801\u4e91\u4ed3\u5e93\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_gitee_block ( self , gitee : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790Gitee\u4ed3\u5e93\u5b50\u5757 Args: gitee (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u7801\u4e91\u4ed3\u5e93\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if gitee is not None : g_title = gitee . find ( \"h3\" , class_ = \"c-title\" ) . text g_url = gitee . find ( \"a\" , class_ = \"c-blocka\" )[ \"href\" ] gitee = gitee . find ( \"section\" ) . find ( \"div\" , class_ = \"c-tabs-content-wrapper\" ) g_tabs = gitee . findAll ( \"div\" , class_ = \"c-tabs-content\" ) g_intro = g_tabs [ 0 ] . find ( \"div\" , class_ = \"c-tabs-item\" ) . find ( \"div\" ) g_des = g_intro . find ( \"div\" ) . text g_license = ( g_intro . findAll ( \"div\" )[ 1 ] . text . lstrip ( \"\u5f00\u6e90\u534f\u8bae\uff1a\" ) if len ( g_intro . findAll ( \"div\" )) >= 2 and g_intro . findAll ( \"div\" )[ 1 ] . text . startswith ( \"\u5f00\u6e90\u534f\u8bae\uff1a\" ) else None ) g_lang = ( g_intro . findAll ( \"div\" )[ 2 ] . text . lstrip ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) if len ( g_intro . findAll ( \"div\" )) >= 2 and g_intro . findAll ( \"div\" )[ 1 ] . text . startswith ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) or len ( g_intro . findAll ( \"div\" )) >= 3 and g_intro . findAll ( \"div\" )[ 2 ] . text . startswith ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) else None ) g_temp = g_intro . findAll ( \"span\" ) g_star = int ( g_temp [ 0 ] . text . strip ( \"Star\uff1a\" )) g_fork = int ( g_temp [ 1 ] . text . strip ( \"Fork\uff1a\" )) g_watch = int ( g_temp [ 2 ] . text . strip ( \"Watch\uff1a\" )) g_status = g_tabs [ - 1 ] . find ( \"img\" )[ \"src\" ] gitee = { \"title\" : g_title , \"url\" : g_url , \"des\" : g_des , \"license\" : g_license , \"lang\" : g_lang , \"star\" : g_star , \"fork\" : g_fork , \"watch\" : g_watch , \"status\" : g_status , } return gitee parse_music_block ( self , music ) \u2693\ufe0e \u89e3\u6790\u97f3\u4e50\u5b50\u5757 Parameters: Name Type Description Default music BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u97f3\u4e50\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_music_block ( self , music : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u97f3\u4e50\u5b50\u5757 Args: music (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u97f3\u4e50\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if music is not None : # \u4ece\u6ce8\u91ca\u4e2d\u83b7\u53d6\u7ed3\u679cJSON music = json . loads ( music . find ( text = lambda text : isinstance ( text , Comment )) . strip ( \"s-data: \" ) ) m_title = music [ \"title\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) # \u641c\u7d22\u7ed3\u679c\u6807\u9898 m_url = music [ \"url\" ] # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 m_songs = [] # \u641c\u7d22\u7ed3\u679c\u6b4c\u66f2 for song in music [ \"data\" ][ \"site\" ]: # \u6b4c\u624b\u4fe1\u606f s_singer = [ { \"url\" : i [ \"singerUrl\" ], \"name\" : i [ \"singerName\" ]} for i in song [ \"singer\" ] ] # \u9884\u5904\u7406\u6b4c\u66f2\u53d1\u5e03\u65f6\u95f4 try : __ = song [ \"publishTime\" ] . split ( \"-\" ) except KeyError : __ = None # \u9884\u5904\u7406\u6b4c\u66f2\u65f6\u957f _ = int ( song [ \"duration\" ]) # \u6b4c\u66f2\u4fe1\u606f s_song = { \"name\" : song [ \"displaySongName\" ], # \u6b4c\u66f2\u540d\u79f0 \"url\" : song [ \"songUrl\" ], # \u6b4c\u66f2\u94fe\u63a5 \"poster\" : song [ \"poster\" ], # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 \"is_original\" : bool ( int ( song [ \"isOriginal\" ])), # \u662f\u5426\u4e3a\u539f\u5531 \"pub_date\" : datetime ( int ( __ [ 0 ]), int ( __ [ 1 ]), int ( __ [ 2 ])) if __ is not None else None , # \u6b4c\u66f2\u53d1\u5e03\u65f6\u95f4 \"labels\" : [ i [ \"txt\" ] for i in song [ \"labels\" ]], # \u6b4c\u66f2\u6807\u7b7e \"copyright\" : bool ( int ( song [ \"copyRight\" ])), # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 \"site\" : song [ \"sitePinyin\" ], # \u6b4c\u66f2\u53d1\u5e03\u7ad9\u70b9\uff08\u62fc\u97f3\uff09 \"duration\" : time ( hour = int ( _ / 60 / 60 ), minute = int ( _ / 60 ), second = int ( _ % 60 ) ), # \u6b4c\u66f2\u65f6\u957f \"other_sites\" : song [ \"allWapPlayFile\" ], # \u6b4c\u66f2\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5 } # \u6b4c\u66f2\u53d1\u5e03\u516c\u53f8 try : s_song [ \"pub_company\" ] = song [ \"pubCompany\" ] if song [ \"pubCompany\" ] == \"null\" : s_song [ \"pub_company\" ] = None except KeyError : s_song [ \"pub_company\" ] = None # \u6b4c\u66f2\u4e13\u8f91 try : s_album = { \"url\" : song [ \"album\" ][ \"albumUrl\" ], \"name\" : song [ \"album\" ][ \"albumName\" ], } except KeyError : s_album = None m_songs . append ({ \"song\" : s_song , \"singer\" : s_singer , \"album\" : s_album }) music = { \"title\" : m_title , \"url\" : m_url , \"songs\" : m_songs } return music parse_news_block ( self , news ) \u2693\ufe0e \u89e3\u6790\u8d44\u8baf\u5b50\u5757 Parameters: Name Type Description Default news BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d44\u8baf\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_news_block ( self , news : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u8d44\u8baf\u5b50\u5757 Args: news (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d44\u8baf\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" try : self . _format ( news . find ( \"h3\" , class_ = \"t\" ) . find ( \"a\" ) . text ) except : news_detail = [] else : news_rows = news . findAll ( \"div\" , class_ = \"c-row\" ) news_detail = [] prev_row = {} for row in news_rows : try : row_title = self . _format ( row . find ( \"a\" ) . text ) except AttributeError : prev_row [ \"des\" ] = self . _format ( row . text ) continue row_time = self . _format ( row . find ( \"span\" , class_ = \"c-color-gray2\" ) . text ) row_author = self . _format ( row . find ( \"span\" , class_ = \"c-color-gray\" ) . text ) row_url = self . _format ( row . find ( \"a\" )[ \"href\" ]) news_detail . append ( { \"title\" : row_title , \"time\" : row_time , \"author\" : row_author , \"url\" : row_url , \"des\" : None , } ) prev_row = news_detail [ - 1 ] return news_detail parse_tieba_block ( self , tieba ) \u2693\ufe0e \u89e3\u6790\u8d34\u5427\u5b50\u5757 Parameters: Name Type Description Default tieba BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d34\u5427\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_tieba_block ( self , tieba : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u8d34\u5427\u5b50\u5757 Args: tieba (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d34\u5427\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if tieba : t_title = self . _format ( tieba . find ( \"h3\" ) . text ) t_url = tieba [ \"mu\" ] try : t_info_ = tieba . find ( \"div\" , class_ = \"op-tieba-general-col-top-xs\" ) . findAll ( \"p\" ) t_des = self . _format ( t_info_ [ 0 ] . text ) except AttributeError : t_des = None t_followers = self . _format ( tieba . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"span\" ) . find ( \"span\" ) . text ) t_total = self . _format ( tieba . find ( \"div\" , class_ = \"c-span-last\" ) . findAll ( \"span\" )[ - 1 ] . text ) try : t_cover = tieba . find ( \"a\" , class_ = \"op-tieba-general-photo-link\" ) . find ( \"img\" )[ \"src\" ] except AttributeError : t_cover = None t_hot_ = tieba . findAll ( \"div\" , class_ = \"c-row\" )[ 1 : - 1 ] t_hot = [] i = 1 for hot in t_hot_ : t_h_title = self . _format ( hot . find ( \"a\" ) . text ) t_h_url = hot . find ( \"a\" )[ \"href\" ] t_h_clicks = self . _format ( hot . find ( \"div\" , class_ = \"c-color-gray2\" ) . find ( \"span\" ) . text ) t_h_replies = self . _format ( hot . findAll ( \"div\" , class_ = \"c-color-gray2\" )[ - 1 ] . find ( \"span\" ) . text ) t_hot . append ( { \"title\" : t_h_title , \"url\" : t_h_url , \"clicks\" : t_h_clicks , \"replies\" : t_h_replies , } ) i += 1 del i tieba = { \"title\" : t_title , \"url\" : t_url , \"des\" : t_des , \"followers\" : t_followers , \"total\" : t_total , \"cover\" : t_cover , \"hot\" : t_hot , } return tieba parse_video_block ( self , video ) \u2693\ufe0e \u89e3\u6790\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_video_block ( self , video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Args: video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if video : video_rows = video . findAll ( \"div\" , class_ = \"c-row\" ) video_results = [] for row in video_rows : row_res = [] videos = row . findAll ( \"div\" , class_ = \"c-span3\" ) for v in videos : v_link = v . find ( \"a\" ) v_title = v_link [ \"title\" ] v_url = self . _format ( v_link [ \"href\" ]) v_img = v_link . find ( \"img\" )[ \"src\" ] v_len = self . _format ( v . find ( \"div\" , class_ = \"op-short-video-pc-duration-wrap-new\" ) . text ) v_from = self . _format ( v . find ( \"div\" , class_ = \"op-short-video-pc-clamp1\" ) . text ) row_res . append ( { \"title\" : v_title , \"url\" : v_url , \"cover\" : v_img , \"length\" : v_len , \"origin\" : v_from , } ) video_results += row_res else : video_results = [] return video_results","title":"subparser.py"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser","text":"","title":"subparser"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser","text":"\u7f51\u9875\u641c\u7d22\u5b50\u89e3\u6790\u6a21\u5757\u3002 \u6b64\u6a21\u5757\u4e3a BaiduSpider.search_web \u51fd\u6570\u7684\u5b50\u6a21\u5757\uff0c\u7528\u4e8e\u89e3\u6790\u7f51\u9875\u641c\u7d22\u5b50\u6a21\u5757\u7684HTML\u4ee3\u7801 \u5e76\u8fd4\u56dePython\u5b57\u5178\u3002","title":"WebSubParser"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_baike_block","text":"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Parameters: Name Type Description Default baike BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_baike_block ( self , baike : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u767e\u79d1\u5b50\u5757 Args: baike (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u767e\u79d1\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if baike : b_title = self . _format ( baike . find ( \"h3\" ) . text ) b_url = baike . find ( \"a\" )[ \"href\" ] b_des = self . _format ( baike . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"div\" , class_ = \"c-font-normal\" ) . text ) try : b_cover = baike . find ( \"div\" , class_ = \"c-span3\" ) . find ( \"img\" )[ \"src\" ] b_cover_type = \"image\" except ( TypeError , AttributeError ): try : b_cover = ( baike . find ( \"div\" , class_ = \"op-bk-polysemy-imgWrap\" ) . find ( \"div\" , class_ = \"c-img\" )[ \"style\" ] . split ( \"url\" , 1 )[ - 1 ] . split ( \")\" , 1 )[ 0 ] . strip ( \"(\" ) ) b_cover_type = \"video\" except ( TypeError ): b_cover = None b_cover_type = None baike = { \"title\" : b_title , \"url\" : b_url , \"des\" : b_des , \"cover\" : b_cover , \"cover-type\" : b_cover_type , } return baike","title":"parse_baike_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_blog_block","text":"\u89e3\u6790\u535a\u5ba2\u5b50\u5757 Parameters: Name Type Description Default blog BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u535a\u5ba2\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_blog_block ( self , blog : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u535a\u5ba2\u5b50\u5757 Args: blog (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u535a\u5ba2\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if blog is not None : blog = blog . find ( \"section\" ) b_title = blog . find ( \"h3\" , class_ = \"c-title\" ) . text b_url = blog . find ( \"a\" )[ \"href\" ] b_blogs_ = blog . findAll ( \"div\" , class_ = \"c-row\" ) b_blogs = [] for b in b_blogs_ : b_current_blog_header = b . find ( \"div\" ) b_blog_title = b_current_blog_header . find ( \"a\" ) . text b_blog_url = b_current_blog_header . find ( \"a\" )[ \"href\" ] b_blog_origin = b_current_blog_header . find ( \"span\" , class_ = \"nor-src-wrap\" ) . text try : b_current_blog_tags = b . findAll ( \"div\" )[ 1 ] . findAll ( \"span\" ) b_blog_tags = [ tag . text for tag in b_current_blog_tags ] except IndexError : b_blog_tags = [] b_blog_parent = b . find_parent ( \"div\" ) . findAll ( \"div\" ) b_blog_des = None for p in b_blog_parent : if p [ \"class\" ][ 0 ] . startswith ( \"blog-summary\" ): b_blog_des = p . text break b_blogs . append ( { \"title\" : b_blog_title , \"url\" : b_blog_url , \"origin\" : b_blog_origin , \"tags\" : b_blog_tags , \"des\" : b_blog_des , } ) blog = { \"title\" : b_title , \"url\" : b_url , \"blogs\" : b_blogs } return blog","title":"parse_blog_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_gitee_block","text":"\u89e3\u6790Gitee\u4ed3\u5e93\u5b50\u5757 Parameters: Name Type Description Default gitee BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u7801\u4e91\u4ed3\u5e93\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_gitee_block ( self , gitee : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790Gitee\u4ed3\u5e93\u5b50\u5757 Args: gitee (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u7801\u4e91\u4ed3\u5e93\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if gitee is not None : g_title = gitee . find ( \"h3\" , class_ = \"c-title\" ) . text g_url = gitee . find ( \"a\" , class_ = \"c-blocka\" )[ \"href\" ] gitee = gitee . find ( \"section\" ) . find ( \"div\" , class_ = \"c-tabs-content-wrapper\" ) g_tabs = gitee . findAll ( \"div\" , class_ = \"c-tabs-content\" ) g_intro = g_tabs [ 0 ] . find ( \"div\" , class_ = \"c-tabs-item\" ) . find ( \"div\" ) g_des = g_intro . find ( \"div\" ) . text g_license = ( g_intro . findAll ( \"div\" )[ 1 ] . text . lstrip ( \"\u5f00\u6e90\u534f\u8bae\uff1a\" ) if len ( g_intro . findAll ( \"div\" )) >= 2 and g_intro . findAll ( \"div\" )[ 1 ] . text . startswith ( \"\u5f00\u6e90\u534f\u8bae\uff1a\" ) else None ) g_lang = ( g_intro . findAll ( \"div\" )[ 2 ] . text . lstrip ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) if len ( g_intro . findAll ( \"div\" )) >= 2 and g_intro . findAll ( \"div\" )[ 1 ] . text . startswith ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) or len ( g_intro . findAll ( \"div\" )) >= 3 and g_intro . findAll ( \"div\" )[ 2 ] . text . startswith ( \"\u5f00\u53d1\u8bed\u8a00\uff1a\" ) else None ) g_temp = g_intro . findAll ( \"span\" ) g_star = int ( g_temp [ 0 ] . text . strip ( \"Star\uff1a\" )) g_fork = int ( g_temp [ 1 ] . text . strip ( \"Fork\uff1a\" )) g_watch = int ( g_temp [ 2 ] . text . strip ( \"Watch\uff1a\" )) g_status = g_tabs [ - 1 ] . find ( \"img\" )[ \"src\" ] gitee = { \"title\" : g_title , \"url\" : g_url , \"des\" : g_des , \"license\" : g_license , \"lang\" : g_lang , \"star\" : g_star , \"fork\" : g_fork , \"watch\" : g_watch , \"status\" : g_status , } return gitee","title":"parse_gitee_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_music_block","text":"\u89e3\u6790\u97f3\u4e50\u5b50\u5757 Parameters: Name Type Description Default music BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u97f3\u4e50\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_music_block ( self , music : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u97f3\u4e50\u5b50\u5757 Args: music (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u97f3\u4e50\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if music is not None : # \u4ece\u6ce8\u91ca\u4e2d\u83b7\u53d6\u7ed3\u679cJSON music = json . loads ( music . find ( text = lambda text : isinstance ( text , Comment )) . strip ( \"s-data: \" ) ) m_title = music [ \"title\" ] . replace ( \"<em>\" , \"\" ) . replace ( \"</em>\" , \"\" ) # \u641c\u7d22\u7ed3\u679c\u6807\u9898 m_url = music [ \"url\" ] # \u641c\u7d22\u7ed3\u679c\u94fe\u63a5 m_songs = [] # \u641c\u7d22\u7ed3\u679c\u6b4c\u66f2 for song in music [ \"data\" ][ \"site\" ]: # \u6b4c\u624b\u4fe1\u606f s_singer = [ { \"url\" : i [ \"singerUrl\" ], \"name\" : i [ \"singerName\" ]} for i in song [ \"singer\" ] ] # \u9884\u5904\u7406\u6b4c\u66f2\u53d1\u5e03\u65f6\u95f4 try : __ = song [ \"publishTime\" ] . split ( \"-\" ) except KeyError : __ = None # \u9884\u5904\u7406\u6b4c\u66f2\u65f6\u957f _ = int ( song [ \"duration\" ]) # \u6b4c\u66f2\u4fe1\u606f s_song = { \"name\" : song [ \"displaySongName\" ], # \u6b4c\u66f2\u540d\u79f0 \"url\" : song [ \"songUrl\" ], # \u6b4c\u66f2\u94fe\u63a5 \"poster\" : song [ \"poster\" ], # \u6b4c\u66f2\u6d77\u62a5\u56fe\u7247\u94fe\u63a5 \"is_original\" : bool ( int ( song [ \"isOriginal\" ])), # \u662f\u5426\u4e3a\u539f\u5531 \"pub_date\" : datetime ( int ( __ [ 0 ]), int ( __ [ 1 ]), int ( __ [ 2 ])) if __ is not None else None , # \u6b4c\u66f2\u53d1\u5e03\u65f6\u95f4 \"labels\" : [ i [ \"txt\" ] for i in song [ \"labels\" ]], # \u6b4c\u66f2\u6807\u7b7e \"copyright\" : bool ( int ( song [ \"copyRight\" ])), # \u6b4c\u66f2\u662f\u5426\u6709\u7248\u6743 \"site\" : song [ \"sitePinyin\" ], # \u6b4c\u66f2\u53d1\u5e03\u7ad9\u70b9\uff08\u62fc\u97f3\uff09 \"duration\" : time ( hour = int ( _ / 60 / 60 ), minute = int ( _ / 60 ), second = int ( _ % 60 ) ), # \u6b4c\u66f2\u65f6\u957f \"other_sites\" : song [ \"allWapPlayFile\" ], # \u6b4c\u66f2\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5 } # \u6b4c\u66f2\u53d1\u5e03\u516c\u53f8 try : s_song [ \"pub_company\" ] = song [ \"pubCompany\" ] if song [ \"pubCompany\" ] == \"null\" : s_song [ \"pub_company\" ] = None except KeyError : s_song [ \"pub_company\" ] = None # \u6b4c\u66f2\u4e13\u8f91 try : s_album = { \"url\" : song [ \"album\" ][ \"albumUrl\" ], \"name\" : song [ \"album\" ][ \"albumName\" ], } except KeyError : s_album = None m_songs . append ({ \"song\" : s_song , \"singer\" : s_singer , \"album\" : s_album }) music = { \"title\" : m_title , \"url\" : m_url , \"songs\" : m_songs } return music","title":"parse_music_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_news_block","text":"\u89e3\u6790\u8d44\u8baf\u5b50\u5757 Parameters: Name Type Description Default news BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d44\u8baf\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_news_block ( self , news : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u8d44\u8baf\u5b50\u5757 Args: news (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d44\u8baf\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" try : self . _format ( news . find ( \"h3\" , class_ = \"t\" ) . find ( \"a\" ) . text ) except : news_detail = [] else : news_rows = news . findAll ( \"div\" , class_ = \"c-row\" ) news_detail = [] prev_row = {} for row in news_rows : try : row_title = self . _format ( row . find ( \"a\" ) . text ) except AttributeError : prev_row [ \"des\" ] = self . _format ( row . text ) continue row_time = self . _format ( row . find ( \"span\" , class_ = \"c-color-gray2\" ) . text ) row_author = self . _format ( row . find ( \"span\" , class_ = \"c-color-gray\" ) . text ) row_url = self . _format ( row . find ( \"a\" )[ \"href\" ]) news_detail . append ( { \"title\" : row_title , \"time\" : row_time , \"author\" : row_author , \"url\" : row_url , \"des\" : None , } ) prev_row = news_detail [ - 1 ] return news_detail","title":"parse_news_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_tieba_block","text":"\u89e3\u6790\u8d34\u5427\u5b50\u5757 Parameters: Name Type Description Default tieba BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d34\u5427\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_tieba_block ( self , tieba : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u8d34\u5427\u5b50\u5757 Args: tieba (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u8d34\u5427\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if tieba : t_title = self . _format ( tieba . find ( \"h3\" ) . text ) t_url = tieba [ \"mu\" ] try : t_info_ = tieba . find ( \"div\" , class_ = \"op-tieba-general-col-top-xs\" ) . findAll ( \"p\" ) t_des = self . _format ( t_info_ [ 0 ] . text ) except AttributeError : t_des = None t_followers = self . _format ( tieba . find ( \"div\" , class_ = \"c-span-last\" ) . find ( \"span\" ) . find ( \"span\" ) . text ) t_total = self . _format ( tieba . find ( \"div\" , class_ = \"c-span-last\" ) . findAll ( \"span\" )[ - 1 ] . text ) try : t_cover = tieba . find ( \"a\" , class_ = \"op-tieba-general-photo-link\" ) . find ( \"img\" )[ \"src\" ] except AttributeError : t_cover = None t_hot_ = tieba . findAll ( \"div\" , class_ = \"c-row\" )[ 1 : - 1 ] t_hot = [] i = 1 for hot in t_hot_ : t_h_title = self . _format ( hot . find ( \"a\" ) . text ) t_h_url = hot . find ( \"a\" )[ \"href\" ] t_h_clicks = self . _format ( hot . find ( \"div\" , class_ = \"c-color-gray2\" ) . find ( \"span\" ) . text ) t_h_replies = self . _format ( hot . findAll ( \"div\" , class_ = \"c-color-gray2\" )[ - 1 ] . find ( \"span\" ) . text ) t_hot . append ( { \"title\" : t_h_title , \"url\" : t_h_url , \"clicks\" : t_h_clicks , \"replies\" : t_h_replies , } ) i += 1 del i tieba = { \"title\" : t_title , \"url\" : t_url , \"des\" : t_des , \"followers\" : t_followers , \"total\" : t_total , \"cover\" : t_cover , \"hot\" : t_hot , } return tieba","title":"parse_tieba_block()"},{"location":"api/baiduspider/parser/subparser.html#baiduspider.parser.subparser.WebSubParser.parse_video_block","text":"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Parameters: Name Type Description Default video BeautifulSoup \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 required Returns: Type Description dict dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 Source code in baiduspider\\parser\\subparser.py @handle_err def parse_video_block ( self , video : BeautifulSoup ) -> dict : \"\"\"\u89e3\u6790\u89c6\u9891\u5b50\u5757 Args: video (BeautifulSoup): \u4ece\u6e90HTML\u4ee3\u7801\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u5757BeautifulSoup\u5bf9\u8c61 Returns: dict: \u89e3\u6790\u540e\u81ea\u52a8\u751f\u6210\u7684Python\u7ed3\u679c\u5b57\u5178\u5bf9\u8c61 \"\"\" if video : video_rows = video . findAll ( \"div\" , class_ = \"c-row\" ) video_results = [] for row in video_rows : row_res = [] videos = row . findAll ( \"div\" , class_ = \"c-span3\" ) for v in videos : v_link = v . find ( \"a\" ) v_title = v_link [ \"title\" ] v_url = self . _format ( v_link [ \"href\" ]) v_img = v_link . find ( \"img\" )[ \"src\" ] v_len = self . _format ( v . find ( \"div\" , class_ = \"op-short-video-pc-duration-wrap-new\" ) . text ) v_from = self . _format ( v . find ( \"div\" , class_ = \"op-short-video-pc-clamp1\" ) . text ) row_res . append ( { \"title\" : v_title , \"url\" : v_url , \"cover\" : v_img , \"length\" : v_len , \"origin\" : v_from , } ) video_results += row_res else : video_results = [] return video_results","title":"parse_video_block()"},{"location":"api/baiduspider/predictor/__init__.html","text":"baiduspider.predictor.__init__ special \u2693\ufe0e BaiduPredictor \u2693\ufe0e \u767e\u5ea6\u641c\u7d22\u8bcd\u9884\u6d4b \u672c\u6a21\u5757\u722c\u53d6\u767e\u5ea6\u7684\u641c\u7d22\u8bcd\u9884\u6d4b\u90e8\u5206\u4fe1\u606f\uff0c\u6309\u7167\u767e\u5ea6\u63d0\u4f9b\u7684\u9ed8\u8ba4\u9884\u6d4b\u987a\u5e8f\u6392\u5e8f\uff0c\u7ed9\u51fa\u767e\u5ea6\u7684\u641c\u7d22\u8bcd\u9884\u6d4b predict_news ( self , query ) \u2693\ufe0e \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_news ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"http://news.baidu.com/sn/api/sug?wd= { query } &prod=news\" ) ) return data [ \"data\" ] predict_pic ( self , query ) \u2693\ufe0e \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_pic ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?ie=utf-8&wd= { query } &prod=open_image\" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret predict_tieba ( self , query ) \u2693\ufe0e \u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[baiduspider.predictor.models.TiebaPredictorResult] List[TiebaPredictorResult]: \u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_tieba ( self , query : str ) -> List [ TiebaPredictorResult ]: \"\"\"\u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[TiebaPredictorResult]: \u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://tieba.baidu.com/suggestion?query= { query } &ie=utf-8\" ) ) if data [ \"query_match\" ][ \"search_data\" ] is None : return [] ret = [ { \"name\" : i [ \"fname\" ], \"cover\" : i [ \"fpic\" ], \"members\" : i [ \"member_num\" ], \"threads\" : i [ \"thread_num\" ], \"classifiers\" : [ i [ \"fclass1\" ], i [ \"fclass2\" ]], \"desc\" : i [ \"forum_desc\" ], } for i in data [ \"query_match\" ][ \"search_data\" ] ] return ret predict_web ( self , query ) \u2693\ufe0e \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_web ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?ie=utf-8&json=1&prod=pc&from=pc_web&wd= { query } \" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret predict_wenku ( self , query ) \u2693\ufe0e \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_wenku ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?prod=open_wenku&wd= { query } \" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret predict_zhidao ( self , query ) \u2693\ufe0e \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_zhidao ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?wd= { query } &prod=open_zhidao\" ) ) if \"g\" not in data : return [ data [ \"q\" ]] ret = [ i [ \"q\" ] for i in data [ \"g\" ]] return ret","title":"__init__.py"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__","text":"","title":"__init__"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor","text":"\u767e\u5ea6\u641c\u7d22\u8bcd\u9884\u6d4b \u672c\u6a21\u5757\u722c\u53d6\u767e\u5ea6\u7684\u641c\u7d22\u8bcd\u9884\u6d4b\u90e8\u5206\u4fe1\u606f\uff0c\u6309\u7167\u767e\u5ea6\u63d0\u4f9b\u7684\u9ed8\u8ba4\u9884\u6d4b\u987a\u5e8f\u6392\u5e8f\uff0c\u7ed9\u51fa\u767e\u5ea6\u7684\u641c\u7d22\u8bcd\u9884\u6d4b","title":"BaiduPredictor"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_news","text":"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_news ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"http://news.baidu.com/sn/api/sug?wd= { query } &prod=news\" ) ) return data [ \"data\" ]","title":"predict_news()"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_pic","text":"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_pic ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u56fe\u7247\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?ie=utf-8&wd= { query } &prod=open_image\" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret","title":"predict_pic()"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_tieba","text":"\u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[baiduspider.predictor.models.TiebaPredictorResult] List[TiebaPredictorResult]: \u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_tieba ( self , query : str ) -> List [ TiebaPredictorResult ]: \"\"\"\u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[TiebaPredictorResult]: \u767e\u5ea6\u8d34\u5427\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://tieba.baidu.com/suggestion?query= { query } &ie=utf-8\" ) ) if data [ \"query_match\" ][ \"search_data\" ] is None : return [] ret = [ { \"name\" : i [ \"fname\" ], \"cover\" : i [ \"fpic\" ], \"members\" : i [ \"member_num\" ], \"threads\" : i [ \"thread_num\" ], \"classifiers\" : [ i [ \"fclass1\" ], i [ \"fclass2\" ]], \"desc\" : i [ \"forum_desc\" ], } for i in data [ \"query_match\" ][ \"search_data\" ] ] return ret","title":"predict_tieba()"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_web","text":"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_web ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u7f51\u9875\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?ie=utf-8&json=1&prod=pc&from=pc_web&wd= { query } \" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret","title":"predict_web()"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_wenku","text":"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_wenku ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u6587\u5e93\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?prod=open_wenku&wd= { query } \" ) ) ret = [ i [ \"q\" ] for i in data [ \"g\" ]] if \"g\" not in data : return [ data [ \"q\" ]] return ret","title":"predict_wenku()"},{"location":"api/baiduspider/predictor/__init__.html#baiduspider.predictor.__init__.BaiduPredictor.predict_zhidao","text":"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Parameters: Name Type Description Default query str \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd required Returns: Type Description List[str] List[str]: \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Source code in baiduspider\\predictor\\__init__.py def predict_zhidao ( self , query : str ) -> List [ str ]: \"\"\"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b Args: query (str): \u8981\u9884\u6d4b\u7684\u90e8\u5206\u641c\u7d22\u8bcd Returns: List[str]: \u767e\u5ea6\u77e5\u9053\u641c\u7d22\u641c\u7d22\u8bcd\u9884\u6d4b \"\"\" data = json . loads ( self . _get_response ( f \"https://www.baidu.com/sugrec?wd= { query } &prod=open_zhidao\" ) ) if \"g\" not in data : return [ data [ \"q\" ]] ret = [ i [ \"q\" ] for i in data [ \"g\" ]] return ret","title":"predict_zhidao()"},{"location":"api/baiduspider/predictor/models/__init__.html","text":"baiduspider.predictor.models.__init__ special \u2693\ufe0e \u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6587\u4ef6\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7684\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u5757\u5185\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002 TiebaPredictorResult \u2693\ufe0e \u8d34\u5427\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u9884\u6d4b\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u9884\u6d4b\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description classifiers List[str] \u9884\u6d4b\u7ed3\u679c\u7c7b\u522b\u5206\u7c7b cover str \u9884\u6d4b\u7ed3\u679c\u5c01\u9762\u56fe\u7247URL desc str \u9884\u6d4b\u7ed3\u679c\u4ecb\u7ecd members int \u9884\u6d4b\u7ed3\u679c\u6210\u5458\u6570 name str \u9884\u6d4b\u7ed3\u679c\u540d\u79f0 threads int \u9884\u6d4b\u7ed3\u679c\u5e16\u5b50\u6570 plain list \u6e90\u9884\u6d4b\u7ed3\u679c\u5b57\u5178 get_attr ( d , t ) \u2693\ufe0e \u83b7\u53d6\u5b57\u5178 d \u4e0b\u7684 t Source code in baiduspider\\predictor\\models\\__init__.py def get_attr ( d : dict , t : str ): \"\"\"\u83b7\u53d6\u5b57\u5178`d`\u4e0b\u7684`t`\"\"\" try : return d [ t ] except : return None","title":"__init__.py"},{"location":"api/baiduspider/predictor/models/__init__.html#baiduspider.predictor.models.__init__","text":"\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6587\u4ef6\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u7684\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u5757\u5185\u8fd4\u56de\u503c\u6a21\u578b\u5e76\u7f16\u5199\u4e86\u81ea\u52a8\u6784\u5efa\u51fd\u6570\u3002","title":"__init__"},{"location":"api/baiduspider/predictor/models/__init__.html#baiduspider.predictor.models.__init__.TiebaPredictorResult","text":"\u8d34\u5427\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u9884\u6d4b\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8fd9\u662f\u4e00\u4e2a\u9075\u7167BaiduSpider\u767e\u79d1\u641c\u7d22\u7ed3\u679c\u7ed3\u679c\u9884\u6d4b\u6a21\u578b\u521b\u5efa\u7684\u8fd4\u56de\u6a21\u578b\u7c7b\u3002 Attributes: Name Type Description classifiers List[str] \u9884\u6d4b\u7ed3\u679c\u7c7b\u522b\u5206\u7c7b cover str \u9884\u6d4b\u7ed3\u679c\u5c01\u9762\u56fe\u7247URL desc str \u9884\u6d4b\u7ed3\u679c\u4ecb\u7ecd members int \u9884\u6d4b\u7ed3\u679c\u6210\u5458\u6570 name str \u9884\u6d4b\u7ed3\u679c\u540d\u79f0 threads int \u9884\u6d4b\u7ed3\u679c\u5e16\u5b50\u6570 plain list \u6e90\u9884\u6d4b\u7ed3\u679c\u5b57\u5178","title":"TiebaPredictorResult"},{"location":"api/baiduspider/predictor/models/__init__.html#baiduspider.predictor.models.__init__.get_attr","text":"\u83b7\u53d6\u5b57\u5178 d \u4e0b\u7684 t Source code in baiduspider\\predictor\\models\\__init__.py def get_attr ( d : dict , t : str ): \"\"\"\u83b7\u53d6\u5b57\u5178`d`\u4e0b\u7684`t`\"\"\" try : return d [ t ] except : return None","title":"get_attr()"},{"location":"api/baiduspider/predictor/models/typings/__init__.html","text":"baiduspider.predictor.models.typings.__init__ special \u2693\ufe0e \u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u5757\u5185\u6240\u6709\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002 TiebaPredictorResult \u2693\ufe0e \u8d34\u5427\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u9884\u6d4b\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.predictor.models.TiebaPredictorResult \u7c7b\u3002","title":"__init__.py"},{"location":"api/baiduspider/predictor/models/typings/__init__.html#baiduspider.predictor.models.typings.__init__","text":"\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u6587\u4ef6 \u6b64\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u6240\u6709\u73b0\u6709\u641c\u7d22\u8bcd\u9884\u6d4b\u6a21\u5757\u5185\u6240\u6709\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\uff0c\u4fbf\u4e8e\u73b0\u4ee3\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7801\u4f53\u9a8c\u3002","title":"__init__"},{"location":"api/baiduspider/predictor/models/typings/__init__.html#baiduspider.predictor.models.typings.__init__.TiebaPredictorResult","text":"\u8d34\u5427\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u9884\u6d4b\u7ed3\u679c\u6a21\u578b\u7c7b\u578b\u6ce8\u91ca\u7c7b\u3002 \u8be6\u89c1 baiduspider.predictor.models.TiebaPredictorResult \u7c7b\u3002","title":"TiebaPredictorResult"},{"location":"guide/index.html","text":"\u6307\u5357 \u2693\ufe0e \u6307\u5357 \u8fd9\u90e8\u5206\u6587\u6863\u5c06\u4ecb\u7ecd BaiduSpider \u7edd\u5927\u591a\u6570\u51fd\u6570\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u901a\u7528\u6587\u6863\u3002 \u641c\u7d22\u8fd4\u56de\u503c \u2693\ufe0e BaiduSpider \u7684\u6240\u6709\u641c\u7d22\u51fd\u6570\u90fd\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7ed3\u679c\u7c7b\u3002\u4f8b\u5982\uff0cPC\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u7c7b\u578b\u4e3a WebResult \uff0c\u800c\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u5219\u4e3a mobile.WebResult \u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u641c\u7d22\u7c7b\u578b\uff0cBaiduSpider \u63d0\u4f9b\u4e0d\u540c\u7684\u8fd4\u56de\u7ed3\u679c\u3002\u66f4\u8be6\u7ec6\u7684\u8fd4\u56de\u7c7b\u578b\u8bf7\u53c2\u8003 API \u6587\u6863 \u3002 \u4ee3\u7406\u8bbe\u7f6e \u2693\ufe0e \u51e0\u4e4e\u6240\u6709\u7684 BaiduSpider \u641c\u7d22\u51fd\u6570\u90fd\u652f\u6301 proxies \u53c2\u6570\u3002\u8be5\u53c2\u6570\u7684\u4f5c\u7528\u4e3a\u8bbe\u5b9a\u4ee3\u7406 IP\u3002\u4e0b\u9762\u662f\u5b83\u7684\u4e00\u4e9b\u4f7f\u7528\u573a\u666f\uff1a \u505a\u6570\u636e\u5206\u6790\uff0c\u9700\u8981\u722c\u53d6\u5927\u91cf\u6570\u636e\u65f6 \u4eba\u5de5\u667a\u80fd\u65e0\u76d1\u7763\u5b66\u4e60\u65f6 \u901a\u8fc7\u767e\u5ea6\u641c\u7d22\u8fdb\u884c\u7279\u5b9a\u7684\u5927\u91cf\u5b9a\u65f6\u4efb\u52a1\u65f6 \u5927\u91cf\uff0c\u9891\u7e41\u5730\u641c\u96c6\u70ed\u70b9\u65b0\u95fb\u65f6 \u2026\u2026 \u7531\u4e8e\u7528\u6237\u7684\u79cd\u79cd\u9700\u6c42\uff0c\u6211\u4eec\u7279\u5f00\u53d1\u51fa\u4e86\u6b64\u529f\u80fd\u3002 \u8be5\u53c2\u6570\u63a5\u53d7\u4e00\u4e2a dict \u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () result = spider . search_news ( \"\u641c\u7d22\u8bcd\" , proxies = { \"http\" : \"http://192.168.xxx.xxx\" , # HTTP\u4ee3\u7406IP\u5730\u5740 \"https\" : \"https://192.168.xxx.xxx\" # HTTPS\u4ee3\u7406IP\u5730\u5740 } ) pprint ( result . plain ) \u8be5\u529f\u80fd\u7684\u539f\u7406\u4e3a\u8bbe\u5b9a requests.get \u51fd\u6570\u7684 proxies \u53c2\u6570\uff0cBaiduSpider\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\u3002\u7531\u6b64\uff0c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 requests \u6587\u6863 \u3002 \u8bf7\u6c42\u8fc7\u591a\u600e\u4e48\u529e\uff1f \u5982\u679c\u9047\u5230\u5355\u4e2a IP \u8bf7\u6c42\u8fc7\u591a\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 IP \u4ee3\u7406\u6c60\u8f6e\u6362\u4f7f\u7528\u3002\u6216\u8005\u53ef\u4ee5\u53c2\u8003 \u8bbe\u7f6e Cookie \u6765\u5ef6\u7f13\u5c01\u7981\u3002 Warning \u6b64\u529f\u80fd\u4ec5\u4e3a\u5b66\u4e60\u548c\u7814\u7a76\u4f7f\u7528\uff0c\u8bf7\u52ff\u4f7f\u7528\u6b64\u529f\u80fd\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider \u4e0d\u4e3a\u6b64\u529f\u80fd\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002 \u51fa\u73b0\u89e3\u6790\u8b66\u544a \u2693\ufe0e \u8bf7\u53c2\u8003 FAQ \u3002 \u8bbe\u7f6eCookie \u2693\ufe0e BaiduSpider\u63d0\u4f9b\u8bbe\u5b9a\u7528\u6237\u7684Cookie\u6765\u5ef6\u7f13\u88ab\u767e\u5ea6IP\u5c01\u7981\u7684\u95ee\u9898\u3002 \u76ee\u524d\u4ec5\u652f\u6301 PC \u7aef\u7f51\u9875\u641c\u7d22 \uff0c\u4e14\u4e0d\u4fdd\u8bc1100%\u6709\u6548\u3002 \u9664\u6b64\u4ee5\u5916\uff0c PC \u7aef\u6587\u5e93\u641c\u7d22 \u5728\u641c\u7d22\u8303\u56f4\u4e3a\u201c\u514d\u8d39\u201d\uff08 \"free\" \uff09\u65f6\uff0c\u4e5f\u9700\u8981\u4f20\u5165Cookie\u624d\u80fd\u8fdb\u884c\u6b63\u5e38\u641c\u7d22\u3002 \u53ea\u6709\u5728\u767b\u5f55\u4e86\u767e\u5ea6\u8d26\u53f7\u65f6\u83b7\u53d6\u7684 Cookie \u624d\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u672a\u767b\u5f55\u60c5\u51b5\u4e0b\u65e0\u6548\u3002 Todo \u79fb\u52a8\u7aef\u722c\u866b BaiduMobileSpider \u5c1a\u672a\u5f00\u53d1\u6b64\u63a5\u53e3\uff0c\u8bf7\u52ff\u4f7f\u7528 1 \u3002\u540e\u671f\u53ef\u80fd\u4f1a\u8003\u8651\u52a0\u5165\u6b64\u63a5\u53e3\u3002 \u4f60\u9700\u8981\u628a\u4f60\u7684 Cookie \u4f20\u7ed9 BaiduSpider\uff0c\u65b9\u5f0f\u5982\u4e0b\uff1a from baiduspider import BaiduSpider # \u5728\u5b9e\u4f8b\u5316BaiduSpider\u5bf9\u8c61\u65f6\u4f20\u5165cookie spider = BaiduSpider ( cookie = \"\u4f60\u7684cookie\" ) \u7136\u540e\uff0cBaiduSpider \u4f1a\u5728\u6bcf\u6b21\u8c03\u7528 search_web \u7684\u65f6\u5019\u6839\u636e\u4f60\u7684 Cookie \u91cd\u65b0\u751f\u6210\u65b0\u7684 Cookie \u5e76\u7a0d\u52a0\u66f4\u6539\u3002 \u5982\u4f55\u83b7\u53d6\u4f60\u7684Cookie \u2693\ufe0e \u9996\u5148\uff0c\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8bbf\u95ee https://www.baidu.com/s?wd=placeholder&pn=0 \uff1a \u7136\u540e\uff0c\u6309\u4e0b ++F12++ \u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5e76\u5728\u5f00\u53d1\u8005\u5de5\u5177\u9876\u90e8\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u9009\u9879\u5e76\u6309 ++Ctrl+r++\uff1a\uff08Windows\uff09\u6216 ++Cmd+r++ \uff08Mac\uff09\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\u3002\u5f00\u53d1\u8005\u5de5\u5177\u4e2d\u5c06\u4f1a\u663e\u793a\u4e00\u4e32\u5217\u8868\uff0c\u8868\u793a\u6240\u6709\u7684\u8bf7\u6c42\u3002 \u6700\u540e\uff0c\u5728\u5217\u8868\u6700\u4e0a\u65b9\u70b9\u51fb\u4ee5 s?wd=placeholder \u5f00\u5934\u7684\u9009\u9879\uff0c\u5c06\u4f1a\u5f39\u51fa\u4e00\u4e2a\u4fe1\u606f\u6846\u3002\u5728\u4fe1\u606f\u6846\u5185\u7684 Headers \uff08\u7b2c\u4e00\u4e2a\uff09\u9009\u9879\u5185\u627e\u5230 Request Headers \uff08\u8bf7\u6c42\u5934\uff09\uff0c\u518d\u5728 Request Headers \u5185\u627e\u5230 Cookie: \uff0c\u590d\u5236 Cookie \u4e0b\u7684\u5168\u90e8\u5185\u5bb9\uff08\u4e0d\u5305\u62ec Cookie: \uff09\uff0c\u8fd9\u5c31\u662f\u4f60\u7684 Cookie\u3002 \u4e0d\u8981\u4f20\u5165\u975e\u6cd5 Cookie\uff01 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684 Cookie \u7ed9 BaiduSpider\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684 IP \u957f\u65f6\u95f4\u5c01\u7981\uff01 Warning BaiduSpider \u7684\u8fd9\u4e2a\u529f\u80fd\u4ec5\u4f9b\u5b66\u4e60\u4e0e\u7814\u7a76\uff0c\u4efb\u4f55\u975e\u6cd5\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\u7684\u884c\u4e3a\u540e\u679c\u81ea\u8d1f\uff0cBaiduSpider \u5f00\u53d1\u56e2\u961f\u4e0d\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002 \u5373 BaiduMobileSpider \u7c7b\u6682\u65f6\u6ca1\u6709 cookie \u53c2\u6570\uff0c\u82e5\u4f7f\u7528\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u21a9","title":"\u7b80\u4ecb"},{"location":"guide/index.html#\u6307\u5357","text":"\u6307\u5357 \u8fd9\u90e8\u5206\u6587\u6863\u5c06\u4ecb\u7ecd BaiduSpider \u7edd\u5927\u591a\u6570\u51fd\u6570\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u901a\u7528\u6587\u6863\u3002","title":"\u6307\u5357"},{"location":"guide/index.html#\u641c\u7d22\u8fd4\u56de\u503c","text":"BaiduSpider \u7684\u6240\u6709\u641c\u7d22\u51fd\u6570\u90fd\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7ed3\u679c\u7c7b\u3002\u4f8b\u5982\uff0cPC\u7aef\u7f51\u9875\u641c\u7d22\u8fd4\u56de\u7c7b\u578b\u4e3a WebResult \uff0c\u800c\u79fb\u52a8\u7aef\u7f51\u9875\u641c\u7d22\u5219\u4e3a mobile.WebResult \u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u641c\u7d22\u7c7b\u578b\uff0cBaiduSpider \u63d0\u4f9b\u4e0d\u540c\u7684\u8fd4\u56de\u7ed3\u679c\u3002\u66f4\u8be6\u7ec6\u7684\u8fd4\u56de\u7c7b\u578b\u8bf7\u53c2\u8003 API \u6587\u6863 \u3002","title":"\u641c\u7d22\u8fd4\u56de\u503c"},{"location":"guide/index.html#\u4ee3\u7406\u8bbe\u7f6e","text":"\u51e0\u4e4e\u6240\u6709\u7684 BaiduSpider \u641c\u7d22\u51fd\u6570\u90fd\u652f\u6301 proxies \u53c2\u6570\u3002\u8be5\u53c2\u6570\u7684\u4f5c\u7528\u4e3a\u8bbe\u5b9a\u4ee3\u7406 IP\u3002\u4e0b\u9762\u662f\u5b83\u7684\u4e00\u4e9b\u4f7f\u7528\u573a\u666f\uff1a \u505a\u6570\u636e\u5206\u6790\uff0c\u9700\u8981\u722c\u53d6\u5927\u91cf\u6570\u636e\u65f6 \u4eba\u5de5\u667a\u80fd\u65e0\u76d1\u7763\u5b66\u4e60\u65f6 \u901a\u8fc7\u767e\u5ea6\u641c\u7d22\u8fdb\u884c\u7279\u5b9a\u7684\u5927\u91cf\u5b9a\u65f6\u4efb\u52a1\u65f6 \u5927\u91cf\uff0c\u9891\u7e41\u5730\u641c\u96c6\u70ed\u70b9\u65b0\u95fb\u65f6 \u2026\u2026 \u7531\u4e8e\u7528\u6237\u7684\u79cd\u79cd\u9700\u6c42\uff0c\u6211\u4eec\u7279\u5f00\u53d1\u51fa\u4e86\u6b64\u529f\u80fd\u3002 \u8be5\u53c2\u6570\u63a5\u53d7\u4e00\u4e2a dict \u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () result = spider . search_news ( \"\u641c\u7d22\u8bcd\" , proxies = { \"http\" : \"http://192.168.xxx.xxx\" , # HTTP\u4ee3\u7406IP\u5730\u5740 \"https\" : \"https://192.168.xxx.xxx\" # HTTPS\u4ee3\u7406IP\u5730\u5740 } ) pprint ( result . plain ) \u8be5\u529f\u80fd\u7684\u539f\u7406\u4e3a\u8bbe\u5b9a requests.get \u51fd\u6570\u7684 proxies \u53c2\u6570\uff0cBaiduSpider\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3\u3002\u7531\u6b64\uff0c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 requests \u6587\u6863 \u3002 \u8bf7\u6c42\u8fc7\u591a\u600e\u4e48\u529e\uff1f \u5982\u679c\u9047\u5230\u5355\u4e2a IP \u8bf7\u6c42\u8fc7\u591a\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 IP \u4ee3\u7406\u6c60\u8f6e\u6362\u4f7f\u7528\u3002\u6216\u8005\u53ef\u4ee5\u53c2\u8003 \u8bbe\u7f6e Cookie \u6765\u5ef6\u7f13\u5c01\u7981\u3002 Warning \u6b64\u529f\u80fd\u4ec5\u4e3a\u5b66\u4e60\u548c\u7814\u7a76\u4f7f\u7528\uff0c\u8bf7\u52ff\u4f7f\u7528\u6b64\u529f\u80fd\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\uff0c\u8fdd\u8005\u540e\u679c\u81ea\u8d1f\u3002BaiduSpider \u4e0d\u4e3a\u6b64\u529f\u80fd\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002","title":"\u4ee3\u7406\u8bbe\u7f6e"},{"location":"guide/index.html#\u51fa\u73b0\u89e3\u6790\u8b66\u544a","text":"\u8bf7\u53c2\u8003 FAQ \u3002","title":"\u51fa\u73b0\u89e3\u6790\u8b66\u544a"},{"location":"guide/index.html#\u8bbe\u7f6eCookie","text":"BaiduSpider\u63d0\u4f9b\u8bbe\u5b9a\u7528\u6237\u7684Cookie\u6765\u5ef6\u7f13\u88ab\u767e\u5ea6IP\u5c01\u7981\u7684\u95ee\u9898\u3002 \u76ee\u524d\u4ec5\u652f\u6301 PC \u7aef\u7f51\u9875\u641c\u7d22 \uff0c\u4e14\u4e0d\u4fdd\u8bc1100%\u6709\u6548\u3002 \u9664\u6b64\u4ee5\u5916\uff0c PC \u7aef\u6587\u5e93\u641c\u7d22 \u5728\u641c\u7d22\u8303\u56f4\u4e3a\u201c\u514d\u8d39\u201d\uff08 \"free\" \uff09\u65f6\uff0c\u4e5f\u9700\u8981\u4f20\u5165Cookie\u624d\u80fd\u8fdb\u884c\u6b63\u5e38\u641c\u7d22\u3002 \u53ea\u6709\u5728\u767b\u5f55\u4e86\u767e\u5ea6\u8d26\u53f7\u65f6\u83b7\u53d6\u7684 Cookie \u624d\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u672a\u767b\u5f55\u60c5\u51b5\u4e0b\u65e0\u6548\u3002 Todo \u79fb\u52a8\u7aef\u722c\u866b BaiduMobileSpider \u5c1a\u672a\u5f00\u53d1\u6b64\u63a5\u53e3\uff0c\u8bf7\u52ff\u4f7f\u7528 1 \u3002\u540e\u671f\u53ef\u80fd\u4f1a\u8003\u8651\u52a0\u5165\u6b64\u63a5\u53e3\u3002 \u4f60\u9700\u8981\u628a\u4f60\u7684 Cookie \u4f20\u7ed9 BaiduSpider\uff0c\u65b9\u5f0f\u5982\u4e0b\uff1a from baiduspider import BaiduSpider # \u5728\u5b9e\u4f8b\u5316BaiduSpider\u5bf9\u8c61\u65f6\u4f20\u5165cookie spider = BaiduSpider ( cookie = \"\u4f60\u7684cookie\" ) \u7136\u540e\uff0cBaiduSpider \u4f1a\u5728\u6bcf\u6b21\u8c03\u7528 search_web \u7684\u65f6\u5019\u6839\u636e\u4f60\u7684 Cookie \u91cd\u65b0\u751f\u6210\u65b0\u7684 Cookie \u5e76\u7a0d\u52a0\u66f4\u6539\u3002","title":"\u8bbe\u7f6eCookie"},{"location":"guide/index.html#\u5982\u4f55\u83b7\u53d6\u4f60\u7684Cookie","text":"\u9996\u5148\uff0c\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8bbf\u95ee https://www.baidu.com/s?wd=placeholder&pn=0 \uff1a \u7136\u540e\uff0c\u6309\u4e0b ++F12++ \u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5e76\u5728\u5f00\u53d1\u8005\u5de5\u5177\u9876\u90e8\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u7f51\u7edc\u201d\uff08Network\uff09\u9009\u9879\u5e76\u6309 ++Ctrl+r++\uff1a\uff08Windows\uff09\u6216 ++Cmd+r++ \uff08Mac\uff09\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\u3002\u5f00\u53d1\u8005\u5de5\u5177\u4e2d\u5c06\u4f1a\u663e\u793a\u4e00\u4e32\u5217\u8868\uff0c\u8868\u793a\u6240\u6709\u7684\u8bf7\u6c42\u3002 \u6700\u540e\uff0c\u5728\u5217\u8868\u6700\u4e0a\u65b9\u70b9\u51fb\u4ee5 s?wd=placeholder \u5f00\u5934\u7684\u9009\u9879\uff0c\u5c06\u4f1a\u5f39\u51fa\u4e00\u4e2a\u4fe1\u606f\u6846\u3002\u5728\u4fe1\u606f\u6846\u5185\u7684 Headers \uff08\u7b2c\u4e00\u4e2a\uff09\u9009\u9879\u5185\u627e\u5230 Request Headers \uff08\u8bf7\u6c42\u5934\uff09\uff0c\u518d\u5728 Request Headers \u5185\u627e\u5230 Cookie: \uff0c\u590d\u5236 Cookie \u4e0b\u7684\u5168\u90e8\u5185\u5bb9\uff08\u4e0d\u5305\u62ec Cookie: \uff09\uff0c\u8fd9\u5c31\u662f\u4f60\u7684 Cookie\u3002 \u4e0d\u8981\u4f20\u5165\u975e\u6cd5 Cookie\uff01 \u8bf7\u52ff\u4f20\u5165\u975e\u6cd5\u7684 Cookie \u7ed9 BaiduSpider\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684 IP \u957f\u65f6\u95f4\u5c01\u7981\uff01 Warning BaiduSpider \u7684\u8fd9\u4e2a\u529f\u80fd\u4ec5\u4f9b\u5b66\u4e60\u4e0e\u7814\u7a76\uff0c\u4efb\u4f55\u975e\u6cd5\u722c\u53d6\u767e\u5ea6\u5927\u91cf\u6570\u636e\u7684\u884c\u4e3a\u540e\u679c\u81ea\u8d1f\uff0cBaiduSpider \u5f00\u53d1\u56e2\u961f\u4e0d\u627f\u62c5\u4efb\u4f55\u6cd5\u5f8b\u8d23\u4efb\u3002 \u5373 BaiduMobileSpider \u7c7b\u6682\u65f6\u6ca1\u6709 cookie \u53c2\u6570\uff0c\u82e5\u4f7f\u7528\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u21a9","title":"\u5982\u4f55\u83b7\u53d6\u4f60\u7684Cookie"},{"location":"guide/mobile/web.html","text":"\u7f51\u9875\u641c\u7d22 \u2693\ufe0e \u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22\uff0c\u66f4\u8f7b\u5de7\uff0c\u66f4\u4fbf\u6377\u3002 BaiduMobileSpider . search_web ( self : BaiduMobileSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> WebResult \u53c2\u6570 \u2693\ufe0e query str : \u9700\u8981\u67e5\u8be2\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduMobileSpider from pprint import pprint pprint ( BaiduMobileSpider () . search_web ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" )) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e pn \u53c2\u6570\u6765\u66f4\u6539 BaiduSpider \u6240\u83b7\u53d6\u7684\u9875\u7801\u3002 from baiduspider import BaiduMobileSpider from pprint import pprint pprint ( BaiduMobileSpider () . search_web ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 )) \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u7f51\u9875\u641c\u7d22"},{"location":"guide/mobile/web.html#\u7f51\u9875\u641c\u7d22","text":"\u79fb\u52a8\u7aef\u767e\u5ea6\u7f51\u9875\u641c\u7d22\uff0c\u66f4\u8f7b\u5de7\uff0c\u66f4\u4fbf\u6377\u3002 BaiduMobileSpider . search_web ( self : BaiduMobileSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> WebResult","title":"\u7f51\u9875\u641c\u7d22"},{"location":"guide/mobile/web.html#\u53c2\u6570","text":"query str : \u9700\u8981\u67e5\u8be2\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/mobile/web.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/mobile/web.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduMobileSpider from pprint import pprint pprint ( BaiduMobileSpider () . search_web ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ))","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/mobile/web.html#\u6307\u5b9a\u9875\u7801","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e pn \u53c2\u6570\u6765\u66f4\u6539 BaiduSpider \u6240\u83b7\u53d6\u7684\u9875\u7801\u3002 from baiduspider import BaiduMobileSpider from pprint import pprint pprint ( BaiduMobileSpider () . search_web ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ))","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/mobile/web.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/mobile/web.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/mobile/web.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/baike.html","text":"\u767e\u79d1\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u767e\u79d1\u641c\u7d22\uff0c\u79fb\u52a8\u7684\u767e\u79d1\u5168\u4e66\u3002 BaiduSpider . search_baike ( self : BaiduSpider , query : str , proxies : Union [ dict , None ] = None , ) -> BaikeResult \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u89c6\u9891\u641c\u7d22\u7684\u5b57\u7b26\u4e32 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_baike ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u767e\u79d1\u641c\u7d22"},{"location":"guide/pc/baike.html#\u767e\u79d1\u641c\u7d22","text":"\u767e\u5ea6\u767e\u79d1\u641c\u7d22\uff0c\u79fb\u52a8\u7684\u767e\u79d1\u5168\u4e66\u3002 BaiduSpider . search_baike ( self : BaiduSpider , query : str , proxies : Union [ dict , None ] = None , ) -> BaikeResult","title":"\u767e\u79d1\u641c\u7d22"},{"location":"guide/pc/baike.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u89c6\u9891\u641c\u7d22\u7684\u5b57\u7b26\u4e32 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/baike.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/baike.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_baike ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/baike.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/baike.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/baike.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/jingyan.html","text":"\u7ecf\u9a8c\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\uff0c\u83b7\u53d6\u524d\u4eba\u7ecf\u9a8c BaiduSpider . search_jingyan ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , proxies : Union [ dict , None ] = None , ) -> JingyanResult : \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u77e5\u9053\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 scope str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_jingyan ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_jingyan ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u7b5b\u9009\u8303\u56f4 \u2693\ufe0e \u7ecf\u9a8c\u641c\u7d22\u63d0\u4f9b\u7b5b\u9009\u8303\u56f4\u53c2\u6570\uff1a scope \u53c2\u6570\u3002\u4f60\u53ef\u4ee5\u7b5b\u9009\u5168\u90e8\u7ecf\u9a8c\uff08 \"all\" \uff0c\u9ed8\u8ba4\uff09\u3001\u4f18\u79c0\u7ecf\u9a8c\uff08 \"outstanding\" \uff09\u3001\u597d\u8bc4\u7ecf\u9a8c\uff08 \"praise\" \uff09\u548c\u539f\u521b\u7ecf\u9a8c\uff08 \"original\" \uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_jingyan ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , scope = \"original\" ) . plain ) # \u4ec5\u663e\u793a\u539f\u521b\u7ecf\u9a8c \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u7ecf\u9a8c\u641c\u7d22"},{"location":"guide/pc/jingyan.html#\u7ecf\u9a8c\u641c\u7d22","text":"\u767e\u5ea6\u7ecf\u9a8c\u641c\u7d22\uff0c\u83b7\u53d6\u524d\u4eba\u7ecf\u9a8c BaiduSpider . search_jingyan ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , proxies : Union [ dict , None ] = None , ) -> JingyanResult :","title":"\u7ecf\u9a8c\u641c\u7d22"},{"location":"guide/pc/jingyan.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u77e5\u9053\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 scope str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/jingyan.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/jingyan.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_jingyan ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/jingyan.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_jingyan ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/jingyan.html#\u7b5b\u9009\u8303\u56f4","text":"\u7ecf\u9a8c\u641c\u7d22\u63d0\u4f9b\u7b5b\u9009\u8303\u56f4\u53c2\u6570\uff1a scope \u53c2\u6570\u3002\u4f60\u53ef\u4ee5\u7b5b\u9009\u5168\u90e8\u7ecf\u9a8c\uff08 \"all\" \uff0c\u9ed8\u8ba4\uff09\u3001\u4f18\u79c0\u7ecf\u9a8c\uff08 \"outstanding\" \uff09\u3001\u597d\u8bc4\u7ecf\u9a8c\uff08 \"praise\" \uff09\u548c\u539f\u521b\u7ecf\u9a8c\uff08 \"original\" \uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_jingyan ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , scope = \"original\" ) . plain ) # \u4ec5\u663e\u793a\u539f\u521b\u7ecf\u9a8c","title":"\u7b5b\u9009\u8303\u56f4"},{"location":"guide/pc/jingyan.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/jingyan.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/jingyan.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/news.html","text":"\u8d44\u8baf\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u8d44\u8baf\u641c\u7d22\uff0c\u4ece\u6d77\u91cf\u65b0\u95fb\u5f53\u4e2d\u63d0\u53d6\u91cd\u8981\u4fe1\u606f\u3002 BaiduSpider . search_news ( self : BaiduSpider , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : Union [ dict , None ] = None , ) -> NewsResult : \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u8d44\u8baf\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 sort_by str : \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"focus\" \uff0c\u53ef\u9009 show str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_news ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f \u2693\ufe0e BaiduSpider \u63d0\u4f9b\u4e24\u79cd\u4e0d\u540c\u7684\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff1a\u7126\u70b9\u4e0e\u65f6\u95f4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cBaiduSpider \u4f1a\u6309\u7167\u7126\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff1a\u901a\u8fc7\u66f4\u6539 sort_by \u53c2\u6570\u7684\u503c\u3002 sort_by \u53c2\u6570\u63a5\u53d7\u4e24\u79cd\u5b57\u7b26\u4e32\u7684\u503c\uff1a focus \uff08\u7126\u70b9\uff0c\u9ed8\u8ba4\uff09\u4e0e time \uff08\u65f6\u95f4\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , sort_by = \"time\" ) . plain ) # \u6309\u65f6\u95f4\u6392\u5e8f \u7b5b\u9009\u8d44\u8baf\u6765\u6e90 \u2693\ufe0e \u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u8ba9\u4f60\u641c\u5230\u6240\u9700\u8981\u7684\u6765\u6e90\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 show \u53c2\u6570\u7684\u503c\u6765\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002\u9ed8\u8ba4\u65e0\u7b5b\u9009\u3002 \u76ee\u524d\u652f\u6301\u7684\u9009\u9879\u6709\uff1a all \uff08\u5168\u90e8\uff0c\u5373\u65e0\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 media \uff08\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\uff09\u3001 baijiahao \uff08\u6765\u81ea\u767e\u5bb6\u53f7\u7684\u65b0\u95fb\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , show = \"media\" ) . plain ) # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u8d44\u8baf \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u8d44\u8baf\u641c\u7d22"},{"location":"guide/pc/news.html#\u8d44\u8baf\u641c\u7d22","text":"\u767e\u5ea6\u8d44\u8baf\u641c\u7d22\uff0c\u4ece\u6d77\u91cf\u65b0\u95fb\u5f53\u4e2d\u63d0\u53d6\u91cd\u8981\u4fe1\u606f\u3002 BaiduSpider . search_news ( self : BaiduSpider , query : str , pn : int = 1 , sort_by : str = \"focus\" , show : str = \"all\" , proxies : Union [ dict , None ] = None , ) -> NewsResult :","title":"\u8d44\u8baf\u641c\u7d22"},{"location":"guide/pc/news.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u8d44\u8baf\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 sort_by str : \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"focus\" \uff0c\u53ef\u9009 show str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/news.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/news.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_news ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/news.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/news.html#\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f","text":"BaiduSpider \u63d0\u4f9b\u4e24\u79cd\u4e0d\u540c\u7684\u8d44\u8baf\u641c\u7d22\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff1a\u7126\u70b9\u4e0e\u65f6\u95f4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cBaiduSpider \u4f1a\u6309\u7167\u7126\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff1a\u901a\u8fc7\u66f4\u6539 sort_by \u53c2\u6570\u7684\u503c\u3002 sort_by \u53c2\u6570\u63a5\u53d7\u4e24\u79cd\u5b57\u7b26\u4e32\u7684\u503c\uff1a focus \uff08\u7126\u70b9\uff0c\u9ed8\u8ba4\uff09\u4e0e time \uff08\u65f6\u95f4\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , sort_by = \"time\" ) . plain ) # \u6309\u65f6\u95f4\u6392\u5e8f","title":"\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f"},{"location":"guide/pc/news.html#\u7b5b\u9009\u8d44\u8baf\u6765\u6e90","text":"\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u8ba9\u4f60\u641c\u5230\u6240\u9700\u8981\u7684\u6765\u6e90\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 show \u53c2\u6570\u7684\u503c\u6765\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\u3002\u9ed8\u8ba4\u65e0\u7b5b\u9009\u3002 \u76ee\u524d\u652f\u6301\u7684\u9009\u9879\u6709\uff1a all \uff08\u5168\u90e8\uff0c\u5373\u65e0\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 media \uff08\u6765\u81ea\u5a92\u4f53\u7684\u65b0\u95fb\uff09\u3001 baijiahao \uff08\u6765\u81ea\u767e\u5bb6\u53f7\u7684\u65b0\u95fb\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_news ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , show = \"media\" ) . plain ) # \u4ec5\u663e\u793a\u6765\u81ea\u5a92\u4f53\u7684\u8d44\u8baf","title":"\u7b5b\u9009\u8d44\u8baf\u6765\u6e90"},{"location":"guide/pc/news.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/news.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/news.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/pic.html","text":"\u56fe\u7247\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u56fe\u7247\u641c\u7d22\uff0c\u68c0\u7d22\u4e92\u8054\u7f51\u4e0a\u7e41\u591a\u7684\u56fe\u7247\u3002 BaiduSpider . search_pic ( self : BaiduSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> PicResult \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u56fe\u7247\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e \u4e0e\u7f51\u9875\u641c\u7d22\u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u6700\u57fa\u7840\u7684\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_pic ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_pic ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u56fe\u7247\u641c\u7d22"},{"location":"guide/pc/pic.html#\u56fe\u7247\u641c\u7d22","text":"\u767e\u5ea6\u56fe\u7247\u641c\u7d22\uff0c\u68c0\u7d22\u4e92\u8054\u7f51\u4e0a\u7e41\u591a\u7684\u56fe\u7247\u3002 BaiduSpider . search_pic ( self : BaiduSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> PicResult","title":"\u56fe\u7247\u641c\u7d22"},{"location":"guide/pc/pic.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u56fe\u7247\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/pic.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/pic.html#\u57fa\u672c\u7684\u8c03\u7528","text":"\u4e0e\u7f51\u9875\u641c\u7d22\u4e00\u6837\uff0c\u8fd9\u4e5f\u662f\u6700\u57fa\u7840\u7684\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_pic ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/pic.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_pic ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/pic.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/pic.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/pic.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/video.html","text":"\u89c6\u9891\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u89c6\u9891\u641c\u7d22\uff0c\u5230\u624b\u8da3\u5473\u89c6\u9891\u3002 BaiduSpider . search_video ( self : BaiduSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> VideoResult \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u89c6\u9891\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_video ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_video ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u89c6\u9891\u641c\u7d22"},{"location":"guide/pc/video.html#\u89c6\u9891\u641c\u7d22","text":"\u767e\u5ea6\u89c6\u9891\u641c\u7d22\uff0c\u5230\u624b\u8da3\u5473\u89c6\u9891\u3002 BaiduSpider . search_video ( self : BaiduSpider , query : str , pn : int = 1 , proxies : Union [ dict , None ] = None , ) -> VideoResult","title":"\u89c6\u9891\u641c\u7d22"},{"location":"guide/pc/video.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u89c6\u9891\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/video.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/video.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_video ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/video.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_video ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/video.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/video.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/video.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/web.html","text":"\u7f51\u9875\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u7f51\u9875\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u7efc\u5408\u641c\u7d22\u4f7f\u7528\u3002 BaiduSpider . search_web ( self : BaiduSpider , query : str , pn : int = 1 , exclude : list = [], proxies : Union [ dict , None ] = None , ) -> WebResult \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u7f51\u9875\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 exclude dict : \u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868\uff0c\u53ef\u9009 time str | List [ datetime . datetime ] : \u641c\u7d22\u65f6\u95f4\u8303\u56f4 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e \u8fd9\u662f\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u53c2\u6570\u2014\u2014 query \u3002\u5b83\u7528\u4e8e\u4f20\u9012\u641c\u7d22\u8bcd\uff08\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u3002 # \u5bfc\u5165BaiduSpider from baiduspider import BaiduSpider from pprint import pprint # \u5b9e\u4f8b\u5316BaiduSpider spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e pn \u53c2\u6570\u6765\u66f4\u6539 BaiduSpider \u6240\u83b7\u53d6\u7684\u9875\u7801\u3002 from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u9875\u7801\u53c2\u6570\uff08\u6b64\u5904\u4e3a\u7b2c\u4e8c\u9875\uff09 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) Warning \u4f20\u5165\u9875\u7801\u53c2\u6570\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff0c\u52a1\u5fc5\u4e0d\u8981\u4f20\u5165\u8fc7\u5927\u7684\u9875\u7801\uff0c\u5426\u5219\u767e\u5ea6\u641c\u7d22\u4f1a\u81ea\u52a8\u8df3\u8f6c\u56de\u7b2c\u4e00\u9875 \u5c4f\u853d\u7279\u5b9a\u7684\u641c\u7d22\u7ed3\u679c \u2693\ufe0e \u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a\u4f60\u63d0\u4f9b\u5f88\u5927\u7684\u4fbf\u6377\u3002\u901a\u8fc7\u8bbe\u7f6e exclude \u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u5c4f\u853d\u67d0\u4e9b\u7279\u5b9a\u7684\u7f51\u9875\u641c\u7d22\u5b50\u641c\u7d22\u7ed3\u679c\u6765\u63d0\u9ad8\u89e3\u6790\u901f\u5ea6\u3002 from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u8981\u5c4f\u853d\u7684\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u5c4f\u853d\u4e86\u8d34\u5427\u548c\u535a\u5ba2 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , exclude = [ \"tieba\" , \"blog\" ]) . plain ) exclude \u7684\u503c\u53ef\u4ee5\u5305\u542b\uff1a [ \"news\" , \"video\" , \"baike\" , \"tieba\" , \"blog\" , \"gitee\" , \"related\" , \"calc\" ] \uff0c\u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 exclude \u7684\u503c\u4e5f\u53ef\u4ee5\u662f [ \"all\" ] \uff0c\u8868\u793a\u5c4f\u853d\u9664\u4e86\u666e\u901a\u641c\u7d22\u7ed3\u679c\u5916\u7684\u6240\u6709\u641c\u7d22\u7ed3\u679c\u3002\u5b9e\u4f8b\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u8981\u5c4f\u853d\u7684\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u5c4f\u853d\u4e86\u6240\u6709\u975e\u666e\u901a\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , exclude = [ \"all\" ]) . plain ) \u5982\u679c exclude \u4e2d\u5305\u542b all \u4e14\u8fd8\u6709\u5176\u4ed6\u53c2\u6570\uff0c\u90a3\u4e48\u5c06\u6309\u7167\u53ea\u6709 all \u7684\u65b9\u5f0f\u8fc7\u6ee4\u641c\u7d22\u7ed3\u679c\u3002 \u6309\u65f6\u95f4\u7b5b\u9009 \u2693\ufe0e time \u53c2\u6570\u80fd\u591f\u5b9e\u73b0\u66f4\u7cbe\u51c6\u7684\u641c\u7d22\u3002 time \u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u662f\u4e00\u4e2a\u7531 datetime.datetime \u7ec4\u6210\u7684\u5143\u7ec4\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u5f62\u5f0f\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u4ec5\u663e\u793a\u65f6\u95f4\u6bb5\u5185\u7684\u641c\u7d22\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u7b5b\u9009\u540e\u4ec5\u663e\u793a\u4e00\u5468\u5185\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"week\" ) . plain ) \u6b64\u529f\u80fd\u4f7f\u7528\u767e\u5ea6\u5185\u7f6e\u7684\u641c\u7d22\u65f6\u95f4\u7b5b\u9009\u5668\u7b5b\u9009\u7ed3\u679c\uff0c\u5e76\u975e\u4f7f\u7528\u7a0b\u5e8f\u7b5b\u9009\u3002\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c time \u7684\u503c\u662f \"week\" \uff0c\u4ee3\u8868\u7b5b\u9009\u4e00\u5468\u5185\u7684\u641c\u7d22\u7ed3\u679c\u3002 time \u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a [ \"day\" , \"week\" , \"month\" , \"year\" ] \u3002\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u9664\u6b64\u4ee5\u5916\uff0cBaiduSpider \u8fd8\u652f\u6301\u81ea\u5b9a\u4e49\u65f6\u95f4\u6bb5\u3002\u4f8b\u5982\uff1a from baiduspider import BaiduSpider from pprint import pprint from datetime import datetime spider = BaiduSpider () # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u7b5b\u9009\u540e\u4ec5\u663e\u793a2020.1.5 - 2020.4.9\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = ( datetime ( 2020 , 1 , 5 ), datetime ( 2020 , 4 , 9 ))) . plain ) \u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c time \u7684\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff08 tuple \uff09\u3002\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u8d77\u59cb\u65f6\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u7ed3\u675f\u65f6\u95f4\u3002BaiduSpider\u4f1a\u628a\u4ed6\u4eec\u90fd\u8f6c\u5316\u6210 time . time () \u5f62\u5f0f\u7684\u6d6e\u70b9\u6570\uff08\u7136\u540e\u4ec5\u4fdd\u7559\u6574\u6570\uff09\uff0c\u6240\u4ee5\u4f60\u4e5f\u53ef\u4ee5\u5c06 datetime \u66ff\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\u3002 \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u7f51\u9875\u641c\u7d22"},{"location":"guide/pc/web.html#\u7f51\u9875\u641c\u7d22","text":"\u767e\u5ea6\u7f51\u9875\u641c\u7d22\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u7efc\u5408\u641c\u7d22\u4f7f\u7528\u3002 BaiduSpider . search_web ( self : BaiduSpider , query : str , pn : int = 1 , exclude : list = [], proxies : Union [ dict , None ] = None , ) -> WebResult","title":"\u7f51\u9875\u641c\u7d22"},{"location":"guide/pc/web.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u7f51\u9875\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 exclude dict : \u8981\u5c4f\u853d\u7684\u5b50\u90e8\u4ef6\u5217\u8868\uff0c\u53ef\u9009 time str | List [ datetime . datetime ] : \u641c\u7d22\u65f6\u95f4\u8303\u56f4 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/web.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/web.html#\u57fa\u672c\u7684\u8c03\u7528","text":"\u8fd9\u662f\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u53c2\u6570\u2014\u2014 query \u3002\u5b83\u7528\u4e8e\u4f20\u9012\u641c\u7d22\u8bcd\uff08\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u3002 # \u5bfc\u5165BaiduSpider from baiduspider import BaiduSpider from pprint import pprint # \u5b9e\u4f8b\u5316BaiduSpider spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/web.html#\u6307\u5b9a\u9875\u7801","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e pn \u53c2\u6570\u6765\u66f4\u6539 BaiduSpider \u6240\u83b7\u53d6\u7684\u9875\u7801\u3002 from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u9875\u7801\u53c2\u6570\uff08\u6b64\u5904\u4e3a\u7b2c\u4e8c\u9875\uff09 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) Warning \u4f20\u5165\u9875\u7801\u53c2\u6570\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff0c\u52a1\u5fc5\u4e0d\u8981\u4f20\u5165\u8fc7\u5927\u7684\u9875\u7801\uff0c\u5426\u5219\u767e\u5ea6\u641c\u7d22\u4f1a\u81ea\u52a8\u8df3\u8f6c\u56de\u7b2c\u4e00\u9875","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/web.html#\u5c4f\u853d\u7279\u5b9a\u7684\u641c\u7d22\u7ed3\u679c","text":"\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a\u4f60\u63d0\u4f9b\u5f88\u5927\u7684\u4fbf\u6377\u3002\u901a\u8fc7\u8bbe\u7f6e exclude \u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u5c4f\u853d\u67d0\u4e9b\u7279\u5b9a\u7684\u7f51\u9875\u641c\u7d22\u5b50\u641c\u7d22\u7ed3\u679c\u6765\u63d0\u9ad8\u89e3\u6790\u901f\u5ea6\u3002 from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u8981\u5c4f\u853d\u7684\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u5c4f\u853d\u4e86\u8d34\u5427\u548c\u535a\u5ba2 pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , exclude = [ \"tieba\" , \"blog\" ]) . plain ) exclude \u7684\u503c\u53ef\u4ee5\u5305\u542b\uff1a [ \"news\" , \"video\" , \"baike\" , \"tieba\" , \"blog\" , \"gitee\" , \"related\" , \"calc\" ] \uff0c\u5206\u522b\u8868\u793a\uff1a\u8d44\u8baf\uff0c\u89c6\u9891\uff0c\u767e\u79d1\uff0c\u8d34\u5427\uff0c\u535a\u5ba2\uff0cGitee\u4ee3\u7801\u4ed3\u5e93\uff0c\u76f8\u5173\u641c\u7d22\uff0c\u8ba1\u7b97\u3002 exclude \u7684\u503c\u4e5f\u53ef\u4ee5\u662f [ \"all\" ] \uff0c\u8868\u793a\u5c4f\u853d\u9664\u4e86\u666e\u901a\u641c\u7d22\u7ed3\u679c\u5916\u7684\u6240\u6709\u641c\u7d22\u7ed3\u679c\u3002\u5b9e\u4f8b\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u5e76\u4f20\u5165\u8981\u5c4f\u853d\u7684\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u5c4f\u853d\u4e86\u6240\u6709\u975e\u666e\u901a\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , exclude = [ \"all\" ]) . plain ) \u5982\u679c exclude \u4e2d\u5305\u542b all \u4e14\u8fd8\u6709\u5176\u4ed6\u53c2\u6570\uff0c\u90a3\u4e48\u5c06\u6309\u7167\u53ea\u6709 all \u7684\u65b9\u5f0f\u8fc7\u6ee4\u641c\u7d22\u7ed3\u679c\u3002","title":"\u5c4f\u853d\u7279\u5b9a\u7684\u641c\u7d22\u7ed3\u679c"},{"location":"guide/pc/web.html#\u6309\u65f6\u95f4\u7b5b\u9009","text":"time \u53c2\u6570\u80fd\u591f\u5b9e\u73b0\u66f4\u7cbe\u51c6\u7684\u641c\u7d22\u3002 time \u7684\u53d6\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u662f\u4e00\u4e2a\u7531 datetime.datetime \u7ec4\u6210\u7684\u5143\u7ec4\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u5f62\u5f0f\uff1a from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () # \u641c\u7d22\u7f51\u9875\uff0c\u4ec5\u663e\u793a\u65f6\u95f4\u6bb5\u5185\u7684\u641c\u7d22\u7ed3\u679c # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u7b5b\u9009\u540e\u4ec5\u663e\u793a\u4e00\u5468\u5185\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"week\" ) . plain ) \u6b64\u529f\u80fd\u4f7f\u7528\u767e\u5ea6\u5185\u7f6e\u7684\u641c\u7d22\u65f6\u95f4\u7b5b\u9009\u5668\u7b5b\u9009\u7ed3\u679c\uff0c\u5e76\u975e\u4f7f\u7528\u7a0b\u5e8f\u7b5b\u9009\u3002\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c time \u7684\u503c\u662f \"week\" \uff0c\u4ee3\u8868\u7b5b\u9009\u4e00\u5468\u5185\u7684\u641c\u7d22\u7ed3\u679c\u3002 time \u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a [ \"day\" , \"week\" , \"month\" , \"year\" ] \u3002\u5206\u522b\u8868\u793a\uff1a\u4e00\u5929\u5185\u3001\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u3001\u4e00\u5e74\u5185\u3002\u9664\u6b64\u4ee5\u5916\uff0cBaiduSpider \u8fd8\u652f\u6301\u81ea\u5b9a\u4e49\u65f6\u95f4\u6bb5\u3002\u4f8b\u5982\uff1a from baiduspider import BaiduSpider from pprint import pprint from datetime import datetime spider = BaiduSpider () # \u5728\u672c\u6837\u4f8b\u4e2d\uff0c\u7b5b\u9009\u540e\u4ec5\u663e\u793a2020.1.5 - 2020.4.9\u7684\u641c\u7d22\u7ed3\u679c pprint ( spider . search_web ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = ( datetime ( 2020 , 1 , 5 ), datetime ( 2020 , 4 , 9 ))) . plain ) \u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c time \u7684\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff08 tuple \uff09\u3002\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u8d77\u59cb\u65f6\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u7ed3\u675f\u65f6\u95f4\u3002BaiduSpider\u4f1a\u628a\u4ed6\u4eec\u90fd\u8f6c\u5316\u6210 time . time () \u5f62\u5f0f\u7684\u6d6e\u70b9\u6570\uff08\u7136\u540e\u4ec5\u4fdd\u7559\u6574\u6570\uff09\uff0c\u6240\u4ee5\u4f60\u4e5f\u53ef\u4ee5\u5c06 datetime \u66ff\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\u3002","title":"\u6309\u65f6\u95f4\u7b5b\u9009"},{"location":"guide/pc/web.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/web.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/web.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/wenku.html","text":"\u6587\u5e93\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u6587\u5e93\u641c\u7d22\uff0c\u83b7\u53d6\u6587\u6863\u66f4\u52a0\u4fbf\u6377 BaiduSpider . search_wenku ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : Union [ dict , None ] = None , ) -> WenkuResult : \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u6587\u5e93\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 scope str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 format str : \u641c\u7d22\u7ed3\u679c\u683c\u5f0f\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 time str : \u641c\u7d22\u7ed3\u679c\u65f6\u95f4\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 page_range Union [ Tuple [ int ], str ] \uff0c\u641c\u7d22\u7ed3\u679c\u9875\u7801\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all \uff0c\u53ef\u9009 sort_by str : \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"relation\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_wenku ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u7b5b\u9009\u6587\u6863\u6765\u6e90 \u2693\ufe0e \u8fd9\u56db\u4e2a\u53c2\u6570\u53ef\u4ee5\u8ba9\u4f60\u641c\u5230\u6240\u9700\u8981\u7684\u6765\u6e90\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4e00\u4e00\u4ecb\u7ecd\u5b83\u4eec\u7684\u7528\u6cd5\u4e0e\u542b\u4e49\u3002 \u5f53\u7136\uff0c\u9664\u4e86\u5355\u4e00\u5730\u4f7f\u7528\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8fd9\u4e9b\u7b5b\u9009\u4e00\u8d77\u4f7f\u7528\u3002 \u6309\u8303\u56f4\u7b5b\u9009 \u2693\ufe0e \u6b63\u5982\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u672c\u8eab\u6240\u63d0\u4f9b\u7684\u4e00\u6837\uff0cBaiduSpider\u4e5f\u63d0\u4f9b\u8fd9\u9879\u7b5b\u9009\u3002\u5b83\u7684\u9009\u9879\u5206\u522b\u4e3a \"all\" \uff08\u663e\u793a\u5168\u90e8\uff0c\u5373\u4e0d\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 \"vip-only\" \uff08VIP\u4e13\u4eab\uff09\u3001 \"vip-free\" \uff08VIP\u514d\u8d39\uff09\u3001 \"free\" \uff08\u514d\u8d39\uff09\u548c \"high-quality\" \uff08\u7cbe\u54c1\uff09\u3002\u53c2\u6570 scope \u8d1f\u8d23\u8fd9\u9879\u529f\u80fd\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53\u4f7f\u7528 \"free\" \u4f5c\u4e3a\u7b5b\u9009\u7684\u65f6\u5019\uff0c\u9700\u8981\u989d\u5916 \u63d0\u4f9b Cookie \u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , scope = \"vip-only\" ) . plain ) # \u4ec5\u663e\u793aVIP\u4e13\u4eab\u7684\u6587\u6863 \u6309\u683c\u5f0f\u7b5b\u9009 \u2693\ufe0e \u76ee\u524d BaiduSpider \u652f\u6301\u516d\u79cd\u683c\u5f0f\u53ef\u4f9b\u7b5b\u9009\uff0c\u5206\u522b\u4e3a [ \"all\" , \"doc\" , \"ppt\" , \"txt\" , \"pdf\" , \"xls\" ] \u3002\u5176\u4e2d\uff0c \"all\" \u7684\u542b\u4e49\u4e3a\u4e0d\u7b5b\u9009\u683c\u5f0f\uff08\u9ed8\u8ba4\uff09\uff0c\u5176\u4f59\u542b\u4e49\u5982\u5b57\u9762\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e format \u53c2\u6570\u6765\u6539\u53d8\u7b5b\u9009\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , format = \"ppt\" ) . plain ) # \u4ec5\u663e\u793aPPT\u683c\u5f0f\u7684\u6587\u6863 \u6309\u65f6\u95f4\u7b5b\u9009 \u2693\ufe0e \u4f7f\u7528 time \u7b5b\u9009\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4ee5\u5e74\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u7b5b\u9009\u3002\u9009\u9879\u5206\u522b\u4e3a \"all\" \uff08\u4e0d\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 \"this-year\" \uff08\u4eca\u5e74\uff09\u3001 \"last-year\" \uff08\u53bb\u5e74\uff09\u548c \"previous-years\" \uff08\u524d\u5e74\u53ca\u4ee5\u524d\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"last-year\" ) . plain ) # \u4ec5\u663e\u793a\u53bb\u5e74\u53d1\u5e03\u7684\u6587\u6863 \u6309\u9875\u6570\u7b5b\u9009 \u2693\ufe0e \u4f60\u53ef\u4ee5\u4f7f\u7528 page_range \u53c2\u6570\u6765\u901a\u8fc7\u9875\u6570\u7b5b\u9009\u6587\u6863\u3002 page_range \u7684\u53ef\u9009\u503c\u4e3a [ \"all\" , Tuple [ start : int , end : int ]] \u3002\u5176\u4e2d\uff0c \"all\" \u7684\u542b\u4e49\u4e3a\u4e0d\u901a\u8fc7\u9875\u6570\u8fdb\u884c\u7b5b\u9009\uff08\u9ed8\u8ba4\uff09\u3002\u53e6\u4e00\u4e2a\u5143\u7ec4\u9009\u9879\u5219\u662f\u7b5b\u9009\u533a\u95f4\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4 ( 1 , 10 ) \u8868\u793a\u4ec5\u7b5b\u9009\u9875\u6570\u4e3a1 ~ 10\u9875\u7684\u6587\u6863\u3002\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u533a\u95f4\u5f00\u59cb\u9875\u7801\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5219\u662f\u533a\u95f4\u7ed3\u675f\u7684\u9875\u7801\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , page_range = ( 5 , 19 )) . plain ) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a5\u9875\u523019\u9875\u7684\u6587\u6863 \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f \u2693\ufe0e \u5bf9\u4e8e\u6587\u5e93\u641c\u7d22\uff0cBaiduSpider \u63d0\u4f9b\u56db\u79cd\u4e0d\u540c\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 sort_by \u53c2\u6570\u7684\u503c\u6765\u4fee\u6539\u6392\u5e8f\u65b9\u5f0f\u3002 sort_by \u53c2\u6570\u63a5\u53d7\u56db\u79cd\u5b57\u7b26\u4e32\u7684\u503c\uff1a [ \"relation\" , \"time\" , \"downloads\" , \"score\" ] \u3002\u5176\u542b\u4e49\u5206\u522b\u5982\u4e0a\u8ff0\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , sort_by = \"downloads\" ) . plain ) # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6587\u5e93\u641c\u7d22"},{"location":"guide/pc/wenku.html#\u6587\u5e93\u641c\u7d22","text":"\u767e\u5ea6\u6587\u5e93\u641c\u7d22\uff0c\u83b7\u53d6\u6587\u6863\u66f4\u52a0\u4fbf\u6377 BaiduSpider . search_wenku ( self : BaiduSpider , query : str , pn : int = 1 , scope : str = \"all\" , format : str = \"all\" , time : str = \"all\" , page_range : Union [ Tuple [ int ], str ] = \"all\" , sort_by : str = \"relation\" , proxies : Union [ dict , None ] = None , ) -> WenkuResult :","title":"\u6587\u5e93\u641c\u7d22"},{"location":"guide/pc/wenku.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u6587\u5e93\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 scope str : \u641c\u7d22\u7ed3\u679c\u7b5b\u9009\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 format str : \u641c\u7d22\u7ed3\u679c\u683c\u5f0f\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 time str : \u641c\u7d22\u7ed3\u679c\u65f6\u95f4\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"all\" \uff0c\u53ef\u9009 page_range Union [ Tuple [ int ], str ] \uff0c\u641c\u7d22\u7ed3\u679c\u9875\u7801\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a \"all \uff0c\u53ef\u9009 sort_by str : \u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a \"relation\" \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/wenku.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/wenku.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_wenku ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/wenku.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/wenku.html#\u7b5b\u9009\u6587\u6863\u6765\u6e90","text":"\u8fd9\u56db\u4e2a\u53c2\u6570\u53ef\u4ee5\u8ba9\u4f60\u641c\u5230\u6240\u9700\u8981\u7684\u6765\u6e90\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4e00\u4e00\u4ecb\u7ecd\u5b83\u4eec\u7684\u7528\u6cd5\u4e0e\u542b\u4e49\u3002 \u5f53\u7136\uff0c\u9664\u4e86\u5355\u4e00\u5730\u4f7f\u7528\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8fd9\u4e9b\u7b5b\u9009\u4e00\u8d77\u4f7f\u7528\u3002","title":"\u7b5b\u9009\u6587\u6863\u6765\u6e90"},{"location":"guide/pc/wenku.html#\u6309\u8303\u56f4\u7b5b\u9009","text":"\u6b63\u5982\u767e\u5ea6\u6587\u5e93\u641c\u7d22\u672c\u8eab\u6240\u63d0\u4f9b\u7684\u4e00\u6837\uff0cBaiduSpider\u4e5f\u63d0\u4f9b\u8fd9\u9879\u7b5b\u9009\u3002\u5b83\u7684\u9009\u9879\u5206\u522b\u4e3a \"all\" \uff08\u663e\u793a\u5168\u90e8\uff0c\u5373\u4e0d\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 \"vip-only\" \uff08VIP\u4e13\u4eab\uff09\u3001 \"vip-free\" \uff08VIP\u514d\u8d39\uff09\u3001 \"free\" \uff08\u514d\u8d39\uff09\u548c \"high-quality\" \uff08\u7cbe\u54c1\uff09\u3002\u53c2\u6570 scope \u8d1f\u8d23\u8fd9\u9879\u529f\u80fd\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53\u4f7f\u7528 \"free\" \u4f5c\u4e3a\u7b5b\u9009\u7684\u65f6\u5019\uff0c\u9700\u8981\u989d\u5916 \u63d0\u4f9b Cookie \u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , scope = \"vip-only\" ) . plain ) # \u4ec5\u663e\u793aVIP\u4e13\u4eab\u7684\u6587\u6863","title":"\u6309\u8303\u56f4\u7b5b\u9009"},{"location":"guide/pc/wenku.html#\u6309\u683c\u5f0f\u7b5b\u9009","text":"\u76ee\u524d BaiduSpider \u652f\u6301\u516d\u79cd\u683c\u5f0f\u53ef\u4f9b\u7b5b\u9009\uff0c\u5206\u522b\u4e3a [ \"all\" , \"doc\" , \"ppt\" , \"txt\" , \"pdf\" , \"xls\" ] \u3002\u5176\u4e2d\uff0c \"all\" \u7684\u542b\u4e49\u4e3a\u4e0d\u7b5b\u9009\u683c\u5f0f\uff08\u9ed8\u8ba4\uff09\uff0c\u5176\u4f59\u542b\u4e49\u5982\u5b57\u9762\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e format \u53c2\u6570\u6765\u6539\u53d8\u7b5b\u9009\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , format = \"ppt\" ) . plain ) # \u4ec5\u663e\u793aPPT\u683c\u5f0f\u7684\u6587\u6863","title":"\u6309\u683c\u5f0f\u7b5b\u9009"},{"location":"guide/pc/wenku.html#\u6309\u65f6\u95f4\u7b5b\u9009","text":"\u4f7f\u7528 time \u7b5b\u9009\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4ee5\u5e74\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u7b5b\u9009\u3002\u9009\u9879\u5206\u522b\u4e3a \"all\" \uff08\u4e0d\u7b5b\u9009\uff0c\u9ed8\u8ba4\uff09\u3001 \"this-year\" \uff08\u4eca\u5e74\uff09\u3001 \"last-year\" \uff08\u53bb\u5e74\uff09\u548c \"previous-years\" \uff08\u524d\u5e74\u53ca\u4ee5\u524d\uff09\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"last-year\" ) . plain ) # \u4ec5\u663e\u793a\u53bb\u5e74\u53d1\u5e03\u7684\u6587\u6863","title":"\u6309\u65f6\u95f4\u7b5b\u9009"},{"location":"guide/pc/wenku.html#\u6309\u9875\u6570\u7b5b\u9009","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 page_range \u53c2\u6570\u6765\u901a\u8fc7\u9875\u6570\u7b5b\u9009\u6587\u6863\u3002 page_range \u7684\u53ef\u9009\u503c\u4e3a [ \"all\" , Tuple [ start : int , end : int ]] \u3002\u5176\u4e2d\uff0c \"all\" \u7684\u542b\u4e49\u4e3a\u4e0d\u901a\u8fc7\u9875\u6570\u8fdb\u884c\u7b5b\u9009\uff08\u9ed8\u8ba4\uff09\u3002\u53e6\u4e00\u4e2a\u5143\u7ec4\u9009\u9879\u5219\u662f\u7b5b\u9009\u533a\u95f4\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4 ( 1 , 10 ) \u8868\u793a\u4ec5\u7b5b\u9009\u9875\u6570\u4e3a1 ~ 10\u9875\u7684\u6587\u6863\u3002\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u533a\u95f4\u5f00\u59cb\u9875\u7801\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5219\u662f\u533a\u95f4\u7ed3\u675f\u7684\u9875\u7801\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , page_range = ( 5 , 19 )) . plain ) # \u4ec5\u663e\u793a\u9875\u6570\u4e3a5\u9875\u523019\u9875\u7684\u6587\u6863","title":"\u6309\u9875\u6570\u7b5b\u9009"},{"location":"guide/pc/wenku.html#\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f","text":"\u5bf9\u4e8e\u6587\u5e93\u641c\u7d22\uff0cBaiduSpider \u63d0\u4f9b\u56db\u79cd\u4e0d\u540c\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a\u6309\u76f8\u5173\u6027\u3001\u6309\u65f6\u95f4\u3001\u6309\u4e0b\u8f7d\u91cf\u548c\u6309\u8bc4\u5206\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 sort_by \u53c2\u6570\u7684\u503c\u6765\u4fee\u6539\u6392\u5e8f\u65b9\u5f0f\u3002 sort_by \u53c2\u6570\u63a5\u53d7\u56db\u79cd\u5b57\u7b26\u4e32\u7684\u503c\uff1a [ \"relation\" , \"time\" , \"downloads\" , \"score\" ] \u3002\u5176\u542b\u4e49\u5206\u522b\u5982\u4e0a\u8ff0\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_wenku ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , sort_by = \"downloads\" ) . plain ) # \u6309\u4e0b\u8f7d\u91cf\u6392\u5e8f","title":"\u641c\u7d22\u7ed3\u679c\u6392\u5e8f\u65b9\u5f0f"},{"location":"guide/pc/wenku.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/wenku.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/wenku.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"},{"location":"guide/pc/zhidao.html","text":"\u77e5\u9053\u641c\u7d22 \u2693\ufe0e \u767e\u5ea6\u77e5\u9053\u641c\u7d22\uff0c\u79d2\u53d6\u95ee\u9898\u7b54\u6848 BaiduSpider . search_zhidao ( self : BaiduSpider , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : Union [ dict , None ] = None , ) -> ZhidaoResult : \u53c2\u6570 \u2693\ufe0e query str : \u8981\u67e5\u8be2\u77e5\u9053\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 time Union [ str , None ] : \u641c\u7d22\u7ed3\u679c\u65f6\u95f4\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 \u5b9e\u4f8b \u2693\ufe0e \u57fa\u672c\u7684\u8c03\u7528 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_zhidao ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain ) \u6307\u5b9a\u9875\u7801 \u2693\ufe0e from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_zhidao ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain ) \u6309\u65f6\u95f4\u7b5b\u9009 \u2693\ufe0e \u901a\u8fc7\u66f4\u6539 time \u53c2\u6570\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u6309\u65f6\u95f4\u7b5b\u9009\u641c\u7d22\u7ed3\u679c\u3002 time \u9ed8\u8ba4\u4e3a None \uff0c\u5373\u4e0d\u7b5b\u9009\uff0c\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u66f4\u6539\u4e3a\u4e0b\u5217\u4efb\u4e00\u4e00\u79cd\uff1a [ \"week\" , \"month\" , \"year\" ] \u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u548c\u4e00\u5e74\u5185\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_zhidao ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"month\" ) . plain ) # \u4ec5\u663e\u793a\u53d1\u5e03\u65f6\u95f4\u5728\u4e00\u4e2a\u6708\u5185\u7684\u95ee\u7b54 \u8fd4\u56de\u503c \u2693\ufe0e \u5b57\u5178\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002 \u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c \u2693\ufe0e \u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u77e5\u9053\u641c\u7d22"},{"location":"guide/pc/zhidao.html#\u77e5\u9053\u641c\u7d22","text":"\u767e\u5ea6\u77e5\u9053\u641c\u7d22\uff0c\u79d2\u53d6\u95ee\u9898\u7b54\u6848 BaiduSpider . search_zhidao ( self : BaiduSpider , query : str , pn : int = 1 , time : Union [ str , None ] = None , proxies : Union [ dict , None ] = None , ) -> ZhidaoResult :","title":"\u77e5\u9053\u641c\u7d22"},{"location":"guide/pc/zhidao.html#\u53c2\u6570","text":"query str : \u8981\u67e5\u8be2\u77e5\u9053\u641c\u7d22\u7684\u5b57\u7b26\u4e32 pn int : \u8981\u722c\u53d6\u7684\u9875\u7801\uff0c\u9ed8\u8ba4\u4e3a 1 \uff0c\u53ef\u9009 time Union [ str , None ] : \u641c\u7d22\u7ed3\u679c\u65f6\u95f4\u7b5b\u9009\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009 proxies Union [ dict , None ] : \u4ee3\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a None \uff0c\u53ef\u9009","title":"\u53c2\u6570"},{"location":"guide/pc/zhidao.html#\u5b9e\u4f8b","text":"","title":"\u5b9e\u4f8b"},{"location":"guide/pc/zhidao.html#\u57fa\u672c\u7684\u8c03\u7528","text":"from baiduspider import BaiduSpider from pprint import pprint spider = BaiduSpider () pprint ( spider . search_zhidao ( query = \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" ) . plain )","title":"\u57fa\u672c\u7684\u8c03\u7528"},{"location":"guide/pc/zhidao.html#\u6307\u5b9a\u9875\u7801","text":"from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_zhidao ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , pn = 2 ) . plain )","title":"\u6307\u5b9a\u9875\u7801"},{"location":"guide/pc/zhidao.html#\u6309\u65f6\u95f4\u7b5b\u9009","text":"\u901a\u8fc7\u66f4\u6539 time \u53c2\u6570\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u6309\u65f6\u95f4\u7b5b\u9009\u641c\u7d22\u7ed3\u679c\u3002 time \u9ed8\u8ba4\u4e3a None \uff0c\u5373\u4e0d\u7b5b\u9009\uff0c\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u66f4\u6539\u4e3a\u4e0b\u5217\u4efb\u4e00\u4e00\u79cd\uff1a [ \"week\" , \"month\" , \"year\" ] \u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\uff1a\u4e00\u5468\u5185\u3001\u4e00\u6708\u5185\u548c\u4e00\u5e74\u5185\u3002 from baiduspider import BaiduSpider from pprint import pprint pprint ( BaiduSpider () . search_zhidao ( \"\u8981\u641c\u7d22\u7684\u5173\u952e\u8bcd\" , time = \"month\" ) . plain ) # \u4ec5\u663e\u793a\u53d1\u5e03\u65f6\u95f4\u5728\u4e00\u4e2a\u6708\u5185\u7684\u95ee\u7b54","title":"\u6309\u65f6\u95f4\u7b5b\u9009"},{"location":"guide/pc/zhidao.html#\u8fd4\u56de\u503c","text":"","title":"\u8fd4\u56de\u503c"},{"location":"guide/pc/zhidao.html#\u5b57\u5178\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u5b57\u5178\u8fd4\u56de\u503c"},{"location":"guide/pc/zhidao.html#\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c","text":"\u8be6\u89c1 API \u6587\u6863 \u3002","title":"\u6a21\u578b\u7ed3\u679c\u8fd4\u56de\u503c"}]}